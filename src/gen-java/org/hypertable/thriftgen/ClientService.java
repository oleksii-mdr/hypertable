/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.hypertable.thriftgen;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientService {

  /**
   * The client service mimics the C++ client API, with table, scanner and
   * mutator interface flattened.
   */
  public interface Iface {

    /**
     * Create a namespace
     * 
     * @param ns - namespace name
     * 
     * @param ns
     */
    public void namespace_create(String ns) throws ClientException, org.apache.thrift.TException;

    public void create_namespace(String ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Create a table
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param schema - schema of the table (in xml)
     * 
     * @param ns
     * @param table_name
     * @param schema
     */
    public void create_table(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException;

    public void table_create(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException;

    /**
     * Alter a table
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param schema - schema of the table (in xml)
     * 
     * @param ns
     * @param table_name
     * @param schema
     */
    public void alter_table(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException;

    public void table_alter(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a namespace
     * 
     * @param ns - namespace
     * @return value is guaranteed to be non-zero and unique
     * 
     * @param ns
     */
    public long namespace_open(String ns) throws ClientException, org.apache.thrift.TException;

    public long open_namespace(String ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Close a namespace
     * 
     * @param ns - namespace
     * 
     * @param ns
     */
    public void namespace_close(long ns) throws ClientException, org.apache.thrift.TException;

    public void close_namespace(long ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a future object
     * @param capacity - Amount of result data the future object can enqueue without blocking threads
     * 
     * @param capacity
     */
    public long future_open(int capacity) throws ClientException, org.apache.thrift.TException;

    public long open_future(int capacity) throws ClientException, org.apache.thrift.TException;

    /**
     * Cancel tasks outstanding in a future object
     * @param ff - Future object
     * 
     * @param ff
     */
    public void future_cancel(long ff) throws ClientException, org.apache.thrift.TException;

    public void cancel_future(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param ff
     * @param timeout_millis
     */
    public Result future_get_result(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    public Result get_future_result(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param ff
     * @param timeout_millis
     */
    public ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    public ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    /**
     * Fetch asynchronous results
     * @param ff - Future object which has the asynchronous results
     * @return - result from async scanner/mutator
     * 
     * @param ff
     * @param timeout_millis
     */
    public ResultSerialized future_get_result_serialized(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    public ResultSerialized get_future_result_serialized(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if future object's queue is empty
     * 
     * @param ff
     */
    public boolean future_is_empty(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if future object's queue is full
     * 
     * @param ff
     */
    public boolean future_is_full(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if future object has been cancelled
     * 
     * @param ff
     */
    public boolean future_is_cancelled(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if future object has outstanding operations
     * 
     * @param ff
     */
    public boolean future_has_outstanding(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Close a future object
     * @param ff - the future object to be closed
     * 
     * @param ff
     */
    public void future_close(long ff) throws ClientException, org.apache.thrift.TException;

    public void close_future(long ff) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a table scanner
     * @param ns - namespace id
     * @param table_name - table name
     * @param scan_spec - scan specification
     * 
     * @param ns
     * @param table_name
     * @param scan_spec
     */
    public long scanner_open(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    public long open_scanner(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Open an asynchronous table scanner
     * @param ns - namespace id
     * @param table_name - table name
     * @param future - callback object
     * @param scan_spec - scan specification
     * 
     * @param ns
     * @param table_name
     * @param future
     * @param scan_spec
     */
    public long async_scanner_open(long ns, String table_name, long future, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    public long open_scanner_async(long ns, String table_name, long future, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Close a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param scanner
     */
    public void scanner_close(long scanner) throws ClientException, org.apache.thrift.TException;

    public void close_scanner(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Cancel a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param scanner
     */
    public void async_scanner_cancel(long scanner) throws ClientException, org.apache.thrift.TException;

    public void cancel_scanner_async(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Close a table scanner
     * 
     * @param scanner - scanner id to close
     * 
     * @param scanner
     */
    public void async_scanner_close(long scanner) throws ClientException, org.apache.thrift.TException;

    public void close_scanner_async(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Iterate over cells of a scanner
     * 
     * @param scanner - scanner id
     * 
     * @param scanner
     */
    public List<Cell> scanner_get_cells(long scanner) throws ClientException, org.apache.thrift.TException;

    public List<Cell> next_cells(long scanner) throws ClientException, org.apache.thrift.TException;

    public List<List<String>> scanner_get_cells_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException;

    public List<List<String>> next_cells_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param scanner
     */
    public ByteBuffer scanner_get_cells_serialized(long scanner) throws ClientException, org.apache.thrift.TException;

    public ByteBuffer next_cells_serialized(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Iterate over rows of a scanner
     * 
     * @param scanner - scanner id
     * 
     * @param scanner
     */
    public List<Cell> scanner_get_row(long scanner) throws ClientException, org.apache.thrift.TException;

    public List<Cell> next_row(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param scanner
     */
    public List<List<String>> scanner_get_row_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException;

    public List<List<String>> next_row_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternate interface returning a buffer of serialized cells for iterating by row
     * for a given scanner
     * 
     * @param scanner - scanner id
     * 
     * @param scanner
     */
    public ByteBuffer scanner_get_row_serialized(long scanner) throws ClientException, org.apache.thrift.TException;

    public ByteBuffer next_row_serialized(long scanner) throws ClientException, org.apache.thrift.TException;

    /**
     * Get a row (convenience method for random access a row)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param row - row key
     * 
     * @return a list of cells (with row_keys unset)
     * 
     * @param ns
     * @param table_name
     * @param row
     */
    public List<Cell> get_row(long ns, String table_name, String row) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param ns
     * @param name
     * @param row
     */
    public List<List<String>> get_row_as_arrays(long ns, String name, String row) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param ns
     * @param table_name
     * @param row
     */
    public ByteBuffer get_row_serialized(long ns, String table_name, String row) throws ClientException, org.apache.thrift.TException;

    /**
     * Get a cell (convenience method for random access a cell)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param row - row key
     * 
     * @param column - column name
     * 
     * @return value (byte sequence)
     * 
     * @param ns
     * @param table_name
     * @param row
     * @param column
     */
    public ByteBuffer get_cell(long ns, String table_name, String row, String column) throws ClientException, org.apache.thrift.TException;

    /**
     * Get cells (convenience method for access small amount of cells)
     * 
     * @param ns - namespace id
     *  
     * @param table_name - table name
     * 
     * @param scan_spec - scan specification
     * 
     * @return a list of cells (a cell with no row key set is assumed to have
     *         the same row key as the previous cell)
     * 
     * @param ns
     * @param table_name
     * @param scan_spec
     */
    public List<Cell> get_cells(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param ns
     * @param name
     * @param scan_spec
     */
    public List<List<String>> get_cells_as_arrays(long ns, String name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface returning buffer of serialized cells
     * 
     * @param ns
     * @param name
     * @param scan_spec
     */
    public ByteBuffer get_cells_serialized(long ns, String name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Create a shared mutator with specified MutateSpec.
     * Delete and recreate it if the mutator exists.
     * 
     * @param ns - namespace id
     *  
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * 
     * @param ns
     * @param table_name
     * @param mutate_spec
     */
    public void shared_mutator_refresh(long ns, String table_name, MutateSpec mutate_spec) throws ClientException, org.apache.thrift.TException;

    public void refresh_shared_mutator(long ns, String table_name, MutateSpec mutate_spec) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a shared periodic mutator which causes cells to be written asyncronously.
     * Users beware: calling this method merely writes
     * cells to a local buffer and does not guarantee that the cells have been persisted.
     * If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * @param cells - set of cells to be written
     * 
     * @param ns
     * @param table_name
     * @param mutate_spec
     * @param cells
     */
    public void shared_mutator_set_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    public void offer_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative to offer_cell interface using array as cell
     * 
     * @param ns
     * @param table_name
     * @param mutate_spec
     * @param cells
     */
    public void shared_mutator_set_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    public void offer_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a shared periodic mutator which causes cells to be written asyncronously.
     * Users beware: calling this method merely writes
     * cells to a local buffer and does not guarantee that the cells have been persisted.
     * If you want guaranteed durability, use the open_mutator+set_cells* interface instead.
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param mutate_spec - mutator specification
     * 
     * @param cell - cell to be written
     * 
     * @param ns
     * @param table_name
     * @param mutate_spec
     * @param cell
     */
    public void shared_mutator_set_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws ClientException, org.apache.thrift.TException;

    public void offer_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative to offer_cell interface using array as cell
     * 
     * @param ns
     * @param table_name
     * @param mutate_spec
     * @param cell
     */
    public void shared_mutator_set_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws ClientException, org.apache.thrift.TException;

    public void offer_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Open a table mutator
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param flags - mutator flags
     * 
     * @param flush_interval - auto-flush interval in milliseconds; 0 disables it.
     * 
     * @return mutator id
     * 
     * @param ns
     * @param table_name
     * @param flags
     * @param flush_interval
     */
    public long mutator_open(long ns, String table_name, int flags, int flush_interval) throws ClientException, org.apache.thrift.TException;

    public long open_mutator(long ns, String table_name, int flags, int flush_interval) throws ClientException, org.apache.thrift.TException;

    /**
     * Open an asynchronous table mutator
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param future - callback object
     * @param flags - mutator flags
     * 
     * @return mutator id
     * 
     * @param ns
     * @param table_name
     * @param future
     * @param flags
     */
    public long async_mutator_open(long ns, String table_name, long future, int flags) throws ClientException, org.apache.thrift.TException;

    public long open_mutator_async(long ns, String table_name, long future, int flags) throws ClientException, org.apache.thrift.TException;

    /**
     * Close a table mutator
     * 
     * @param mutator - mutator id to close
     * 
     * @param mutator
     */
    public void mutator_close(long mutator) throws ClientException, org.apache.thrift.TException;

    public void close_mutator(long mutator) throws ClientException, org.apache.thrift.TException;

    /**
     * Cancel an asynchronous table mutator
     * 
     * @param mutator -  mutator id to cancel
     * 
     * @param mutator
     */
    public void async_mutator_cancel(long mutator) throws ClientException, org.apache.thrift.TException;

    public void cancel_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException;

    /**
     * Close an asynchronous table mutator
     * 
     * @param mutator - mutator id to close
     * 
     * @param mutator
     */
    public void async_mutator_close(long mutator) throws ClientException, org.apache.thrift.TException;

    public void close_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException;

    /**
     * Set a cell via mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cell - the cell to set
     * 
     * @param mutator
     * @param cell
     */
    public void mutator_set_cell(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Set a cell in the table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param cell - the cell to set
     * 
     * @param ns
     * @param table_name
     * @param cell
     */
    public void set_cell(long ns, String table_name, Cell cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param mutator
     * @param cell
     */
    public void mutator_set_cell_as_array(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param ns
     * @param table_name
     * @param cell
     */
    public void set_cell_as_array(long ns, String table_name, List<String> cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Put a list of cells into a table via mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param mutator
     * @param cells
     */
    public void mutator_set_cells(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Put a list of cells into a table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param ns
     * @param table_name
     * @param cells
     */
    public void set_cells(long ns, String table_name, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param mutator
     * @param cells
     */
    public void mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param ns
     * @param table_name
     * @param cells
     */
    public void set_cells_as_arrays(long ns, String table_name, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param mutator
     * @param cells
     * @param flush
     */
    public void mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param ns
     * @param table_name
     * @param cells
     */
    public void set_cells_serialized(long ns, String table_name, ByteBuffer cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Flush mutator buffers
     * 
     * @param mutator
     */
    public void mutator_flush(long mutator) throws ClientException, org.apache.thrift.TException;

    public void flush_mutator(long mutator) throws ClientException, org.apache.thrift.TException;

    /**
     * Set a cell in the table using an asynchonous mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cell - the cell to set
     * 
     * @param mutator
     * @param cell
     */
    public void async_mutator_set_cell(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException;

    public void set_cell_async(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell using an asynchonous mutator
     * 
     * @param mutator
     * @param cell
     */
    public void async_mutator_set_cell_as_array(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException;

    public void set_cell_as_array_async(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException;

    /**
     * Put a list of cells into a table using asynchonous mutator
     * 
     * @param mutator - mutator id
     * 
     * @param cells - a list of cells (a cell with no row key set is assumed
     *        to have the same row key as the previous cell)
     * 
     * @param mutator
     * @param cells
     */
    public void async_mutator_set_cells(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    public void set_cells_async(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using array as cell
     * 
     * @param mutator
     * @param cells
     */
    public void async_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    public void set_cells_as_arrays_async(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException;

    /**
     * Alternative interface using buffer of serialized cells
     * 
     * @param mutator
     * @param cells
     * @param flush
     */
    public void async_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException;

    public void set_cells_serialized_async(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException;

    /**
     * Flush mutator buffers
     * 
     * @param mutator
     */
    public void async_mutator_flush(long mutator) throws ClientException, org.apache.thrift.TException;

    public void flush_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if the namespace exists
     * 
     * @param ns - namespace name
     * 
     * @return true if ns exists, false ow
     * 
     * @param ns
     */
    public boolean namespace_exists(String ns) throws ClientException, org.apache.thrift.TException;

    public boolean exists_namespace(String ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Check if the table exists
     * 
     * @param ns - namespace id
     * 
     * @param name - table name
     * 
     * @return true if table exists, false ow
     * 
     * @param ns
     * @param name
     */
    public boolean exists_table(long ns, String name) throws ClientException, org.apache.thrift.TException;

    public boolean table_exists(long ns, String name) throws ClientException, org.apache.thrift.TException;

    /**
     * Get the id of a table
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return table id string
     * 
     * @param ns
     * @param table_name
     */
    public String table_get_id(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    public String get_table_id(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Get the schema of a table as a string (that can be used with create_table)
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema string (in xml)
     * 
     * @param ns
     * @param table_name
     */
    public String table_get_schema_str(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    public String get_schema_str(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Get the schema of a table as a string along with column family ids
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema string (in xml)
     * 
     * @param ns
     * @param table_name
     */
    public String table_get_schema_str_with_ids(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    public String get_schema_str_with_ids(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Get the schema of a table as a string (that can be used with create_table)
     *   
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return schema object describing a table
     * 
     * @param ns
     * @param table_name
     */
    public Schema table_get_schema(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    public Schema get_schema(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Get a list of table names in the namespace
     * 
     * @param ns - namespace id
     * 
     * @return a list of table names
     * 
     * @param ns
     */
    public List<String> get_tables(long ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Get a list of namespaces and table names table names in the namespace
     * 
     * @param ns - namespace
     * 
     * @return a list of table names
     * 
     * @param ns
     */
    public List<NamespaceListing> namespace_get_listing(long ns) throws ClientException, org.apache.thrift.TException;

    public List<NamespaceListing> get_listing(long ns) throws ClientException, org.apache.thrift.TException;

    /**
     * Get a list of table splits
     * 
     * @param ns - namespace id
     * 
     * @param table_name - table name
     * 
     * @return a list of table names
     * 
     * @param ns
     * @param table_name
     */
    public List<TableSplit> table_get_splits(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    public List<TableSplit> get_table_splits(long ns, String table_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Drop a namespace
     * 
     * @param ns - namespace name
     * 
     * @param if_exists - if true, don't barf if the table doesn't exist
     * 
     * @param ns
     * @param if_exists
     */
    public void namespace_drop(String ns, boolean if_exists) throws ClientException, org.apache.thrift.TException;

    public void drop_namespace(String ns, boolean if_exists) throws ClientException, org.apache.thrift.TException;

    /**
     * Rename a table
     * 
     * @param ns - namespace id
     * 
     * @param name - current table name
     * 
     * @param new_name - new table name
     * 
     * @param ns
     * @param name
     * @param new_name
     */
    public void rename_table(long ns, String name, String new_name) throws ClientException, org.apache.thrift.TException;

    public void table_rename(long ns, String name, String new_name) throws ClientException, org.apache.thrift.TException;

    /**
     * Drop a table
     * 
     * @param ns - namespace id
     * 
     * @param name - table name
     * 
     * @param if_exists - if true, don't barf if the table doesn't exist
     * 
     * @param ns
     * @param name
     * @param if_exists
     */
    public void drop_table(long ns, String name, boolean if_exists) throws ClientException, org.apache.thrift.TException;

    public void table_drop(long ns, String name, boolean if_exists) throws ClientException, org.apache.thrift.TException;

    /**
     * Generate a GUID
     * 
     * GUIDs are globally unique. The generated string is 36 bytes long and
     * has a format similar to "9cf7da31-307a-4bef-b65e-19fb05aa57d8".
     */
    public String generate_guid() throws org.apache.thrift.TException;

    /**
     * Inserts a unique value into a table
     * 
     * This function inserts a unique value into a table. The table must be
     * created with TIME_ORDER DESC, MAX_VERSIONS 1 (although the latter is
     * optional).
     * 
     * If the value is empty then a new GUID will be assigned
     * (using @a generate_guid).
     * 
     * @param ns - namespace id
     * @param table_name - table name
     * @param key - the Key of the value
     * @param value - the unique value. Can be empty; in this case a new
     *    guid will be generated internally
     * 
     * @return the inserted unique value (which is identical to the @a value
     *    parameter or a new guid, if value is empty)
     * 
     * @param ns
     * @param table_name
     * @param key
     * @param value
     */
    public String create_cell_unique(long ns, String table_name, Key key, String value) throws ClientException, org.apache.thrift.TException;

    /**
     * Retrieves a descriptive error string from an error code
     * 
     * @param error_code - the numeric error code
     * 
     * @return the descriptive string, or "ERROR NOT REGISTERED" if the error
     *    code is unknown
     * 
     * @param error_code
     */
    public String error_get_text(int error_code) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void namespace_create(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_create_call> resultHandler) throws org.apache.thrift.TException;

    public void create_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_namespace_call> resultHandler) throws org.apache.thrift.TException;

    public void create_table(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_table_call> resultHandler) throws org.apache.thrift.TException;

    public void table_create(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_create_call> resultHandler) throws org.apache.thrift.TException;

    public void alter_table(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.alter_table_call> resultHandler) throws org.apache.thrift.TException;

    public void table_alter(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_alter_call> resultHandler) throws org.apache.thrift.TException;

    public void namespace_open(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_namespace_call> resultHandler) throws org.apache.thrift.TException;

    public void namespace_close(long ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_namespace(long ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_namespace_call> resultHandler) throws org.apache.thrift.TException;

    public void future_open(int capacity, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_future(int capacity, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_future_call> resultHandler) throws org.apache.thrift.TException;

    public void future_cancel(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_cancel_call> resultHandler) throws org.apache.thrift.TException;

    public void cancel_future(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancel_future_call> resultHandler) throws org.apache.thrift.TException;

    public void future_get_result(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_get_result_call> resultHandler) throws org.apache.thrift.TException;

    public void get_future_result(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_future_result_call> resultHandler) throws org.apache.thrift.TException;

    public void future_get_result_as_arrays(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_get_result_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void get_future_result_as_arrays(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_future_result_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void future_get_result_serialized(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_get_result_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void get_future_result_serialized(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_future_result_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void future_is_empty(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_is_empty_call> resultHandler) throws org.apache.thrift.TException;

    public void future_is_full(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_is_full_call> resultHandler) throws org.apache.thrift.TException;

    public void future_is_cancelled(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_is_cancelled_call> resultHandler) throws org.apache.thrift.TException;

    public void future_has_outstanding(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_has_outstanding_call> resultHandler) throws org.apache.thrift.TException;

    public void future_close(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.future_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_future(long ff, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_future_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_open(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_scanner(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_scanner_call> resultHandler) throws org.apache.thrift.TException;

    public void async_scanner_open(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_scanner_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_scanner_async(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_scanner_async_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_close(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_scanner(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_scanner_call> resultHandler) throws org.apache.thrift.TException;

    public void async_scanner_cancel(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_scanner_cancel_call> resultHandler) throws org.apache.thrift.TException;

    public void cancel_scanner_async(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancel_scanner_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_scanner_close(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_scanner_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_scanner_async(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_scanner_async_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_cells(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void next_cells(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_cells_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void next_cells_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_cells_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void next_cells_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_row(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_row_call> resultHandler) throws org.apache.thrift.TException;

    public void next_row(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_row_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_row_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void next_row_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void scanner_get_row_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.scanner_get_row_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void next_row_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.next_row_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void get_row(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_row_call> resultHandler) throws org.apache.thrift.TException;

    public void get_row_as_arrays(long ns, String name, String row, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void get_row_serialized(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_row_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void get_cell(long ns, String table_name, String row, String column, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void get_cells(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void get_cells_as_arrays(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void get_cells_serialized(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void shared_mutator_refresh(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shared_mutator_refresh_call> resultHandler) throws org.apache.thrift.TException;

    public void refresh_shared_mutator(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refresh_shared_mutator_call> resultHandler) throws org.apache.thrift.TException;

    public void shared_mutator_set_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shared_mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void offer_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.offer_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void shared_mutator_set_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shared_mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void offer_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.offer_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void shared_mutator_set_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shared_mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void offer_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.offer_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void shared_mutator_set_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.shared_mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException;

    public void offer_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.offer_cell_as_array_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_open(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_mutator(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_mutator_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_open(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_open_call> resultHandler) throws org.apache.thrift.TException;

    public void open_mutator_async(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.open_mutator_async_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_close(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_mutator(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_mutator_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_cancel(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_cancel_call> resultHandler) throws org.apache.thrift.TException;

    public void cancel_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancel_mutator_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_close(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_close_call> resultHandler) throws org.apache.thrift.TException;

    public void close_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.close_mutator_async_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_set_cell(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cell(long ns, String table_name, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_set_cell_as_array(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cell_as_array(long ns, String table_name, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_set_cells(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells(long ns, String table_name, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_set_cells_as_arrays(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells_as_arrays(long ns, String table_name, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells_serialized(long ns, String table_name, ByteBuffer cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void mutator_flush(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.mutator_flush_call> resultHandler) throws org.apache.thrift.TException;

    public void flush_mutator(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.flush_mutator_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_set_cell(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cell_async(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cell_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_set_cell_as_array(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cell_as_array_async(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cell_as_array_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_set_cells(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells_async(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells_as_arrays_async(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_as_arrays_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException;

    public void set_cells_serialized_async(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_cells_serialized_async_call> resultHandler) throws org.apache.thrift.TException;

    public void async_mutator_flush(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.async_mutator_flush_call> resultHandler) throws org.apache.thrift.TException;

    public void flush_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.flush_mutator_async_call> resultHandler) throws org.apache.thrift.TException;

    public void namespace_exists(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_exists_call> resultHandler) throws org.apache.thrift.TException;

    public void exists_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exists_namespace_call> resultHandler) throws org.apache.thrift.TException;

    public void exists_table(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exists_table_call> resultHandler) throws org.apache.thrift.TException;

    public void table_exists(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_exists_call> resultHandler) throws org.apache.thrift.TException;

    public void table_get_id(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_get_id_call> resultHandler) throws org.apache.thrift.TException;

    public void get_table_id(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_table_id_call> resultHandler) throws org.apache.thrift.TException;

    public void table_get_schema_str(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_get_schema_str_call> resultHandler) throws org.apache.thrift.TException;

    public void get_schema_str(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_schema_str_call> resultHandler) throws org.apache.thrift.TException;

    public void table_get_schema_str_with_ids(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_get_schema_str_with_ids_call> resultHandler) throws org.apache.thrift.TException;

    public void get_schema_str_with_ids(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_schema_str_with_ids_call> resultHandler) throws org.apache.thrift.TException;

    public void table_get_schema(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_get_schema_call> resultHandler) throws org.apache.thrift.TException;

    public void get_schema(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_schema_call> resultHandler) throws org.apache.thrift.TException;

    public void get_tables(long ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_tables_call> resultHandler) throws org.apache.thrift.TException;

    public void namespace_get_listing(long ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_get_listing_call> resultHandler) throws org.apache.thrift.TException;

    public void get_listing(long ns, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_listing_call> resultHandler) throws org.apache.thrift.TException;

    public void table_get_splits(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_get_splits_call> resultHandler) throws org.apache.thrift.TException;

    public void get_table_splits(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_table_splits_call> resultHandler) throws org.apache.thrift.TException;

    public void namespace_drop(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.namespace_drop_call> resultHandler) throws org.apache.thrift.TException;

    public void drop_namespace(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.drop_namespace_call> resultHandler) throws org.apache.thrift.TException;

    public void rename_table(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rename_table_call> resultHandler) throws org.apache.thrift.TException;

    public void table_rename(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_rename_call> resultHandler) throws org.apache.thrift.TException;

    public void drop_table(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.drop_table_call> resultHandler) throws org.apache.thrift.TException;

    public void table_drop(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.table_drop_call> resultHandler) throws org.apache.thrift.TException;

    public void generate_guid(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.generate_guid_call> resultHandler) throws org.apache.thrift.TException;

    public void create_cell_unique(long ns, String table_name, Key key, String value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.create_cell_unique_call> resultHandler) throws org.apache.thrift.TException;

    public void error_get_text(int error_code, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.error_get_text_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void namespace_create(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_create(ns);
      recv_namespace_create();
    }

    public void send_namespace_create(String ns) throws org.apache.thrift.TException
    {
      namespace_create_args args = new namespace_create_args();
      args.setNs(ns);
      sendBase("namespace_create", args);
    }

    public void recv_namespace_create() throws ClientException, org.apache.thrift.TException
    {
      namespace_create_result result = new namespace_create_result();
      receiveBase(result, "namespace_create");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void create_namespace(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_create_namespace(ns);
      recv_create_namespace();
    }

    public void send_create_namespace(String ns) throws org.apache.thrift.TException
    {
      create_namespace_args args = new create_namespace_args();
      args.setNs(ns);
      sendBase("create_namespace", args);
    }

    public void recv_create_namespace() throws ClientException, org.apache.thrift.TException
    {
      create_namespace_result result = new create_namespace_result();
      receiveBase(result, "create_namespace");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void create_table(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException
    {
      send_create_table(ns, table_name, schema);
      recv_create_table();
    }

    public void send_create_table(long ns, String table_name, String schema) throws org.apache.thrift.TException
    {
      create_table_args args = new create_table_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setSchema(schema);
      sendBase("create_table", args);
    }

    public void recv_create_table() throws ClientException, org.apache.thrift.TException
    {
      create_table_result result = new create_table_result();
      receiveBase(result, "create_table");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void table_create(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException
    {
      send_table_create(ns, table_name, schema);
      recv_table_create();
    }

    public void send_table_create(long ns, String table_name, String schema) throws org.apache.thrift.TException
    {
      table_create_args args = new table_create_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setSchema(schema);
      sendBase("table_create", args);
    }

    public void recv_table_create() throws ClientException, org.apache.thrift.TException
    {
      table_create_result result = new table_create_result();
      receiveBase(result, "table_create");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void alter_table(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException
    {
      send_alter_table(ns, table_name, schema);
      recv_alter_table();
    }

    public void send_alter_table(long ns, String table_name, String schema) throws org.apache.thrift.TException
    {
      alter_table_args args = new alter_table_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setSchema(schema);
      sendBase("alter_table", args);
    }

    public void recv_alter_table() throws ClientException, org.apache.thrift.TException
    {
      alter_table_result result = new alter_table_result();
      receiveBase(result, "alter_table");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void table_alter(long ns, String table_name, String schema) throws ClientException, org.apache.thrift.TException
    {
      send_table_alter(ns, table_name, schema);
      recv_table_alter();
    }

    public void send_table_alter(long ns, String table_name, String schema) throws org.apache.thrift.TException
    {
      table_alter_args args = new table_alter_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setSchema(schema);
      sendBase("table_alter", args);
    }

    public void recv_table_alter() throws ClientException, org.apache.thrift.TException
    {
      table_alter_result result = new table_alter_result();
      receiveBase(result, "table_alter");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public long namespace_open(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_open(ns);
      return recv_namespace_open();
    }

    public void send_namespace_open(String ns) throws org.apache.thrift.TException
    {
      namespace_open_args args = new namespace_open_args();
      args.setNs(ns);
      sendBase("namespace_open", args);
    }

    public long recv_namespace_open() throws ClientException, org.apache.thrift.TException
    {
      namespace_open_result result = new namespace_open_result();
      receiveBase(result, "namespace_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "namespace_open failed: unknown result");
    }

    public long open_namespace(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_open_namespace(ns);
      return recv_open_namespace();
    }

    public void send_open_namespace(String ns) throws org.apache.thrift.TException
    {
      open_namespace_args args = new open_namespace_args();
      args.setNs(ns);
      sendBase("open_namespace", args);
    }

    public long recv_open_namespace() throws ClientException, org.apache.thrift.TException
    {
      open_namespace_result result = new open_namespace_result();
      receiveBase(result, "open_namespace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_namespace failed: unknown result");
    }

    public void namespace_close(long ns) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_close(ns);
      recv_namespace_close();
    }

    public void send_namespace_close(long ns) throws org.apache.thrift.TException
    {
      namespace_close_args args = new namespace_close_args();
      args.setNs(ns);
      sendBase("namespace_close", args);
    }

    public void recv_namespace_close() throws ClientException, org.apache.thrift.TException
    {
      namespace_close_result result = new namespace_close_result();
      receiveBase(result, "namespace_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_namespace(long ns) throws ClientException, org.apache.thrift.TException
    {
      send_close_namespace(ns);
      recv_close_namespace();
    }

    public void send_close_namespace(long ns) throws org.apache.thrift.TException
    {
      close_namespace_args args = new close_namespace_args();
      args.setNs(ns);
      sendBase("close_namespace", args);
    }

    public void recv_close_namespace() throws ClientException, org.apache.thrift.TException
    {
      close_namespace_result result = new close_namespace_result();
      receiveBase(result, "close_namespace");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public long future_open(int capacity) throws ClientException, org.apache.thrift.TException
    {
      send_future_open(capacity);
      return recv_future_open();
    }

    public void send_future_open(int capacity) throws org.apache.thrift.TException
    {
      future_open_args args = new future_open_args();
      args.setCapacity(capacity);
      sendBase("future_open", args);
    }

    public long recv_future_open() throws ClientException, org.apache.thrift.TException
    {
      future_open_result result = new future_open_result();
      receiveBase(result, "future_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_open failed: unknown result");
    }

    public long open_future(int capacity) throws ClientException, org.apache.thrift.TException
    {
      send_open_future(capacity);
      return recv_open_future();
    }

    public void send_open_future(int capacity) throws org.apache.thrift.TException
    {
      open_future_args args = new open_future_args();
      args.setCapacity(capacity);
      sendBase("open_future", args);
    }

    public long recv_open_future() throws ClientException, org.apache.thrift.TException
    {
      open_future_result result = new open_future_result();
      receiveBase(result, "open_future");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_future failed: unknown result");
    }

    public void future_cancel(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_cancel(ff);
      recv_future_cancel();
    }

    public void send_future_cancel(long ff) throws org.apache.thrift.TException
    {
      future_cancel_args args = new future_cancel_args();
      args.setFf(ff);
      sendBase("future_cancel", args);
    }

    public void recv_future_cancel() throws ClientException, org.apache.thrift.TException
    {
      future_cancel_result result = new future_cancel_result();
      receiveBase(result, "future_cancel");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void cancel_future(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_cancel_future(ff);
      recv_cancel_future();
    }

    public void send_cancel_future(long ff) throws org.apache.thrift.TException
    {
      cancel_future_args args = new cancel_future_args();
      args.setFf(ff);
      sendBase("cancel_future", args);
    }

    public void recv_cancel_future() throws ClientException, org.apache.thrift.TException
    {
      cancel_future_result result = new cancel_future_result();
      receiveBase(result, "cancel_future");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Result future_get_result(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_future_get_result(ff, timeout_millis);
      return recv_future_get_result();
    }

    public void send_future_get_result(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      future_get_result_args args = new future_get_result_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("future_get_result", args);
    }

    public Result recv_future_get_result() throws ClientException, org.apache.thrift.TException
    {
      future_get_result_result result = new future_get_result_result();
      receiveBase(result, "future_get_result");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_get_result failed: unknown result");
    }

    public Result get_future_result(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_get_future_result(ff, timeout_millis);
      return recv_get_future_result();
    }

    public void send_get_future_result(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      get_future_result_args args = new get_future_result_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("get_future_result", args);
    }

    public Result recv_get_future_result() throws ClientException, org.apache.thrift.TException
    {
      get_future_result_result result = new get_future_result_result();
      receiveBase(result, "get_future_result");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_future_result failed: unknown result");
    }

    public ResultAsArrays future_get_result_as_arrays(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_future_get_result_as_arrays(ff, timeout_millis);
      return recv_future_get_result_as_arrays();
    }

    public void send_future_get_result_as_arrays(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("future_get_result_as_arrays", args);
    }

    public ResultAsArrays recv_future_get_result_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
      receiveBase(result, "future_get_result_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_get_result_as_arrays failed: unknown result");
    }

    public ResultAsArrays get_future_result_as_arrays(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_get_future_result_as_arrays(ff, timeout_millis);
      return recv_get_future_result_as_arrays();
    }

    public void send_get_future_result_as_arrays(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("get_future_result_as_arrays", args);
    }

    public ResultAsArrays recv_get_future_result_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
      receiveBase(result, "get_future_result_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_future_result_as_arrays failed: unknown result");
    }

    public ResultSerialized future_get_result_serialized(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_future_get_result_serialized(ff, timeout_millis);
      return recv_future_get_result_serialized();
    }

    public void send_future_get_result_serialized(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      future_get_result_serialized_args args = new future_get_result_serialized_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("future_get_result_serialized", args);
    }

    public ResultSerialized recv_future_get_result_serialized() throws ClientException, org.apache.thrift.TException
    {
      future_get_result_serialized_result result = new future_get_result_serialized_result();
      receiveBase(result, "future_get_result_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_get_result_serialized failed: unknown result");
    }

    public ResultSerialized get_future_result_serialized(long ff, int timeout_millis) throws ClientException, org.apache.thrift.TException
    {
      send_get_future_result_serialized(ff, timeout_millis);
      return recv_get_future_result_serialized();
    }

    public void send_get_future_result_serialized(long ff, int timeout_millis) throws org.apache.thrift.TException
    {
      get_future_result_serialized_args args = new get_future_result_serialized_args();
      args.setFf(ff);
      args.setTimeout_millis(timeout_millis);
      sendBase("get_future_result_serialized", args);
    }

    public ResultSerialized recv_get_future_result_serialized() throws ClientException, org.apache.thrift.TException
    {
      get_future_result_serialized_result result = new get_future_result_serialized_result();
      receiveBase(result, "get_future_result_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_future_result_serialized failed: unknown result");
    }

    public boolean future_is_empty(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_is_empty(ff);
      return recv_future_is_empty();
    }

    public void send_future_is_empty(long ff) throws org.apache.thrift.TException
    {
      future_is_empty_args args = new future_is_empty_args();
      args.setFf(ff);
      sendBase("future_is_empty", args);
    }

    public boolean recv_future_is_empty() throws ClientException, org.apache.thrift.TException
    {
      future_is_empty_result result = new future_is_empty_result();
      receiveBase(result, "future_is_empty");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_is_empty failed: unknown result");
    }

    public boolean future_is_full(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_is_full(ff);
      return recv_future_is_full();
    }

    public void send_future_is_full(long ff) throws org.apache.thrift.TException
    {
      future_is_full_args args = new future_is_full_args();
      args.setFf(ff);
      sendBase("future_is_full", args);
    }

    public boolean recv_future_is_full() throws ClientException, org.apache.thrift.TException
    {
      future_is_full_result result = new future_is_full_result();
      receiveBase(result, "future_is_full");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_is_full failed: unknown result");
    }

    public boolean future_is_cancelled(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_is_cancelled(ff);
      return recv_future_is_cancelled();
    }

    public void send_future_is_cancelled(long ff) throws org.apache.thrift.TException
    {
      future_is_cancelled_args args = new future_is_cancelled_args();
      args.setFf(ff);
      sendBase("future_is_cancelled", args);
    }

    public boolean recv_future_is_cancelled() throws ClientException, org.apache.thrift.TException
    {
      future_is_cancelled_result result = new future_is_cancelled_result();
      receiveBase(result, "future_is_cancelled");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_is_cancelled failed: unknown result");
    }

    public boolean future_has_outstanding(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_has_outstanding(ff);
      return recv_future_has_outstanding();
    }

    public void send_future_has_outstanding(long ff) throws org.apache.thrift.TException
    {
      future_has_outstanding_args args = new future_has_outstanding_args();
      args.setFf(ff);
      sendBase("future_has_outstanding", args);
    }

    public boolean recv_future_has_outstanding() throws ClientException, org.apache.thrift.TException
    {
      future_has_outstanding_result result = new future_has_outstanding_result();
      receiveBase(result, "future_has_outstanding");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "future_has_outstanding failed: unknown result");
    }

    public void future_close(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_future_close(ff);
      recv_future_close();
    }

    public void send_future_close(long ff) throws org.apache.thrift.TException
    {
      future_close_args args = new future_close_args();
      args.setFf(ff);
      sendBase("future_close", args);
    }

    public void recv_future_close() throws ClientException, org.apache.thrift.TException
    {
      future_close_result result = new future_close_result();
      receiveBase(result, "future_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_future(long ff) throws ClientException, org.apache.thrift.TException
    {
      send_close_future(ff);
      recv_close_future();
    }

    public void send_close_future(long ff) throws org.apache.thrift.TException
    {
      close_future_args args = new close_future_args();
      args.setFf(ff);
      sendBase("close_future", args);
    }

    public void recv_close_future() throws ClientException, org.apache.thrift.TException
    {
      close_future_result result = new close_future_result();
      receiveBase(result, "close_future");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public long scanner_open(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_open(ns, table_name, scan_spec);
      return recv_scanner_open();
    }

    public void send_scanner_open(long ns, String table_name, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      scanner_open_args args = new scanner_open_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setScan_spec(scan_spec);
      sendBase("scanner_open", args);
    }

    public long recv_scanner_open() throws ClientException, org.apache.thrift.TException
    {
      scanner_open_result result = new scanner_open_result();
      receiveBase(result, "scanner_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_open failed: unknown result");
    }

    public long open_scanner(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_open_scanner(ns, table_name, scan_spec);
      return recv_open_scanner();
    }

    public void send_open_scanner(long ns, String table_name, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      open_scanner_args args = new open_scanner_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setScan_spec(scan_spec);
      sendBase("open_scanner", args);
    }

    public long recv_open_scanner() throws ClientException, org.apache.thrift.TException
    {
      open_scanner_result result = new open_scanner_result();
      receiveBase(result, "open_scanner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_scanner failed: unknown result");
    }

    public long async_scanner_open(long ns, String table_name, long future, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_async_scanner_open(ns, table_name, future, scan_spec);
      return recv_async_scanner_open();
    }

    public void send_async_scanner_open(long ns, String table_name, long future, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      async_scanner_open_args args = new async_scanner_open_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFuture(future);
      args.setScan_spec(scan_spec);
      sendBase("async_scanner_open", args);
    }

    public long recv_async_scanner_open() throws ClientException, org.apache.thrift.TException
    {
      async_scanner_open_result result = new async_scanner_open_result();
      receiveBase(result, "async_scanner_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "async_scanner_open failed: unknown result");
    }

    public long open_scanner_async(long ns, String table_name, long future, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_open_scanner_async(ns, table_name, future, scan_spec);
      return recv_open_scanner_async();
    }

    public void send_open_scanner_async(long ns, String table_name, long future, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      open_scanner_async_args args = new open_scanner_async_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFuture(future);
      args.setScan_spec(scan_spec);
      sendBase("open_scanner_async", args);
    }

    public long recv_open_scanner_async() throws ClientException, org.apache.thrift.TException
    {
      open_scanner_async_result result = new open_scanner_async_result();
      receiveBase(result, "open_scanner_async");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_scanner_async failed: unknown result");
    }

    public void scanner_close(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_close(scanner);
      recv_scanner_close();
    }

    public void send_scanner_close(long scanner) throws org.apache.thrift.TException
    {
      scanner_close_args args = new scanner_close_args();
      args.setScanner(scanner);
      sendBase("scanner_close", args);
    }

    public void recv_scanner_close() throws ClientException, org.apache.thrift.TException
    {
      scanner_close_result result = new scanner_close_result();
      receiveBase(result, "scanner_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_scanner(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_close_scanner(scanner);
      recv_close_scanner();
    }

    public void send_close_scanner(long scanner) throws org.apache.thrift.TException
    {
      close_scanner_args args = new close_scanner_args();
      args.setScanner(scanner);
      sendBase("close_scanner", args);
    }

    public void recv_close_scanner() throws ClientException, org.apache.thrift.TException
    {
      close_scanner_result result = new close_scanner_result();
      receiveBase(result, "close_scanner");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_scanner_cancel(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_async_scanner_cancel(scanner);
      recv_async_scanner_cancel();
    }

    public void send_async_scanner_cancel(long scanner) throws org.apache.thrift.TException
    {
      async_scanner_cancel_args args = new async_scanner_cancel_args();
      args.setScanner(scanner);
      sendBase("async_scanner_cancel", args);
    }

    public void recv_async_scanner_cancel() throws ClientException, org.apache.thrift.TException
    {
      async_scanner_cancel_result result = new async_scanner_cancel_result();
      receiveBase(result, "async_scanner_cancel");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void cancel_scanner_async(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_cancel_scanner_async(scanner);
      recv_cancel_scanner_async();
    }

    public void send_cancel_scanner_async(long scanner) throws org.apache.thrift.TException
    {
      cancel_scanner_async_args args = new cancel_scanner_async_args();
      args.setScanner(scanner);
      sendBase("cancel_scanner_async", args);
    }

    public void recv_cancel_scanner_async() throws ClientException, org.apache.thrift.TException
    {
      cancel_scanner_async_result result = new cancel_scanner_async_result();
      receiveBase(result, "cancel_scanner_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_scanner_close(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_async_scanner_close(scanner);
      recv_async_scanner_close();
    }

    public void send_async_scanner_close(long scanner) throws org.apache.thrift.TException
    {
      async_scanner_close_args args = new async_scanner_close_args();
      args.setScanner(scanner);
      sendBase("async_scanner_close", args);
    }

    public void recv_async_scanner_close() throws ClientException, org.apache.thrift.TException
    {
      async_scanner_close_result result = new async_scanner_close_result();
      receiveBase(result, "async_scanner_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_scanner_async(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_close_scanner_async(scanner);
      recv_close_scanner_async();
    }

    public void send_close_scanner_async(long scanner) throws org.apache.thrift.TException
    {
      close_scanner_async_args args = new close_scanner_async_args();
      args.setScanner(scanner);
      sendBase("close_scanner_async", args);
    }

    public void recv_close_scanner_async() throws ClientException, org.apache.thrift.TException
    {
      close_scanner_async_result result = new close_scanner_async_result();
      receiveBase(result, "close_scanner_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public List<Cell> scanner_get_cells(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_cells(scanner);
      return recv_scanner_get_cells();
    }

    public void send_scanner_get_cells(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_cells_args args = new scanner_get_cells_args();
      args.setScanner(scanner);
      sendBase("scanner_get_cells", args);
    }

    public List<Cell> recv_scanner_get_cells() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_cells_result result = new scanner_get_cells_result();
      receiveBase(result, "scanner_get_cells");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_cells failed: unknown result");
    }

    public List<Cell> next_cells(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_cells(scanner);
      return recv_next_cells();
    }

    public void send_next_cells(long scanner) throws org.apache.thrift.TException
    {
      next_cells_args args = new next_cells_args();
      args.setScanner(scanner);
      sendBase("next_cells", args);
    }

    public List<Cell> recv_next_cells() throws ClientException, org.apache.thrift.TException
    {
      next_cells_result result = new next_cells_result();
      receiveBase(result, "next_cells");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_cells failed: unknown result");
    }

    public List<List<String>> scanner_get_cells_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_cells_as_arrays(scanner);
      return recv_scanner_get_cells_as_arrays();
    }

    public void send_scanner_get_cells_as_arrays(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
      args.setScanner(scanner);
      sendBase("scanner_get_cells_as_arrays", args);
    }

    public List<List<String>> recv_scanner_get_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
      receiveBase(result, "scanner_get_cells_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_cells_as_arrays failed: unknown result");
    }

    public List<List<String>> next_cells_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_cells_as_arrays(scanner);
      return recv_next_cells_as_arrays();
    }

    public void send_next_cells_as_arrays(long scanner) throws org.apache.thrift.TException
    {
      next_cells_as_arrays_args args = new next_cells_as_arrays_args();
      args.setScanner(scanner);
      sendBase("next_cells_as_arrays", args);
    }

    public List<List<String>> recv_next_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      next_cells_as_arrays_result result = new next_cells_as_arrays_result();
      receiveBase(result, "next_cells_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_cells_as_arrays failed: unknown result");
    }

    public ByteBuffer scanner_get_cells_serialized(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_cells_serialized(scanner);
      return recv_scanner_get_cells_serialized();
    }

    public void send_scanner_get_cells_serialized(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
      args.setScanner(scanner);
      sendBase("scanner_get_cells_serialized", args);
    }

    public ByteBuffer recv_scanner_get_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
      receiveBase(result, "scanner_get_cells_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_cells_serialized failed: unknown result");
    }

    public ByteBuffer next_cells_serialized(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_cells_serialized(scanner);
      return recv_next_cells_serialized();
    }

    public void send_next_cells_serialized(long scanner) throws org.apache.thrift.TException
    {
      next_cells_serialized_args args = new next_cells_serialized_args();
      args.setScanner(scanner);
      sendBase("next_cells_serialized", args);
    }

    public ByteBuffer recv_next_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      next_cells_serialized_result result = new next_cells_serialized_result();
      receiveBase(result, "next_cells_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_cells_serialized failed: unknown result");
    }

    public List<Cell> scanner_get_row(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_row(scanner);
      return recv_scanner_get_row();
    }

    public void send_scanner_get_row(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_row_args args = new scanner_get_row_args();
      args.setScanner(scanner);
      sendBase("scanner_get_row", args);
    }

    public List<Cell> recv_scanner_get_row() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_row_result result = new scanner_get_row_result();
      receiveBase(result, "scanner_get_row");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_row failed: unknown result");
    }

    public List<Cell> next_row(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_row(scanner);
      return recv_next_row();
    }

    public void send_next_row(long scanner) throws org.apache.thrift.TException
    {
      next_row_args args = new next_row_args();
      args.setScanner(scanner);
      sendBase("next_row", args);
    }

    public List<Cell> recv_next_row() throws ClientException, org.apache.thrift.TException
    {
      next_row_result result = new next_row_result();
      receiveBase(result, "next_row");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_row failed: unknown result");
    }

    public List<List<String>> scanner_get_row_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_row_as_arrays(scanner);
      return recv_scanner_get_row_as_arrays();
    }

    public void send_scanner_get_row_as_arrays(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
      args.setScanner(scanner);
      sendBase("scanner_get_row_as_arrays", args);
    }

    public List<List<String>> recv_scanner_get_row_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
      receiveBase(result, "scanner_get_row_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_row_as_arrays failed: unknown result");
    }

    public List<List<String>> next_row_as_arrays(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_row_as_arrays(scanner);
      return recv_next_row_as_arrays();
    }

    public void send_next_row_as_arrays(long scanner) throws org.apache.thrift.TException
    {
      next_row_as_arrays_args args = new next_row_as_arrays_args();
      args.setScanner(scanner);
      sendBase("next_row_as_arrays", args);
    }

    public List<List<String>> recv_next_row_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      next_row_as_arrays_result result = new next_row_as_arrays_result();
      receiveBase(result, "next_row_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_row_as_arrays failed: unknown result");
    }

    public ByteBuffer scanner_get_row_serialized(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_scanner_get_row_serialized(scanner);
      return recv_scanner_get_row_serialized();
    }

    public void send_scanner_get_row_serialized(long scanner) throws org.apache.thrift.TException
    {
      scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
      args.setScanner(scanner);
      sendBase("scanner_get_row_serialized", args);
    }

    public ByteBuffer recv_scanner_get_row_serialized() throws ClientException, org.apache.thrift.TException
    {
      scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
      receiveBase(result, "scanner_get_row_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "scanner_get_row_serialized failed: unknown result");
    }

    public ByteBuffer next_row_serialized(long scanner) throws ClientException, org.apache.thrift.TException
    {
      send_next_row_serialized(scanner);
      return recv_next_row_serialized();
    }

    public void send_next_row_serialized(long scanner) throws org.apache.thrift.TException
    {
      next_row_serialized_args args = new next_row_serialized_args();
      args.setScanner(scanner);
      sendBase("next_row_serialized", args);
    }

    public ByteBuffer recv_next_row_serialized() throws ClientException, org.apache.thrift.TException
    {
      next_row_serialized_result result = new next_row_serialized_result();
      receiveBase(result, "next_row_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "next_row_serialized failed: unknown result");
    }

    public List<Cell> get_row(long ns, String table_name, String row) throws ClientException, org.apache.thrift.TException
    {
      send_get_row(ns, table_name, row);
      return recv_get_row();
    }

    public void send_get_row(long ns, String table_name, String row) throws org.apache.thrift.TException
    {
      get_row_args args = new get_row_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setRow(row);
      sendBase("get_row", args);
    }

    public List<Cell> recv_get_row() throws ClientException, org.apache.thrift.TException
    {
      get_row_result result = new get_row_result();
      receiveBase(result, "get_row");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_row failed: unknown result");
    }

    public List<List<String>> get_row_as_arrays(long ns, String name, String row) throws ClientException, org.apache.thrift.TException
    {
      send_get_row_as_arrays(ns, name, row);
      return recv_get_row_as_arrays();
    }

    public void send_get_row_as_arrays(long ns, String name, String row) throws org.apache.thrift.TException
    {
      get_row_as_arrays_args args = new get_row_as_arrays_args();
      args.setNs(ns);
      args.setName(name);
      args.setRow(row);
      sendBase("get_row_as_arrays", args);
    }

    public List<List<String>> recv_get_row_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      get_row_as_arrays_result result = new get_row_as_arrays_result();
      receiveBase(result, "get_row_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_row_as_arrays failed: unknown result");
    }

    public ByteBuffer get_row_serialized(long ns, String table_name, String row) throws ClientException, org.apache.thrift.TException
    {
      send_get_row_serialized(ns, table_name, row);
      return recv_get_row_serialized();
    }

    public void send_get_row_serialized(long ns, String table_name, String row) throws org.apache.thrift.TException
    {
      get_row_serialized_args args = new get_row_serialized_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setRow(row);
      sendBase("get_row_serialized", args);
    }

    public ByteBuffer recv_get_row_serialized() throws ClientException, org.apache.thrift.TException
    {
      get_row_serialized_result result = new get_row_serialized_result();
      receiveBase(result, "get_row_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_row_serialized failed: unknown result");
    }

    public ByteBuffer get_cell(long ns, String table_name, String row, String column) throws ClientException, org.apache.thrift.TException
    {
      send_get_cell(ns, table_name, row, column);
      return recv_get_cell();
    }

    public void send_get_cell(long ns, String table_name, String row, String column) throws org.apache.thrift.TException
    {
      get_cell_args args = new get_cell_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setRow(row);
      args.setColumn(column);
      sendBase("get_cell", args);
    }

    public ByteBuffer recv_get_cell() throws ClientException, org.apache.thrift.TException
    {
      get_cell_result result = new get_cell_result();
      receiveBase(result, "get_cell");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cell failed: unknown result");
    }

    public List<Cell> get_cells(long ns, String table_name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_get_cells(ns, table_name, scan_spec);
      return recv_get_cells();
    }

    public void send_get_cells(long ns, String table_name, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      get_cells_args args = new get_cells_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setScan_spec(scan_spec);
      sendBase("get_cells", args);
    }

    public List<Cell> recv_get_cells() throws ClientException, org.apache.thrift.TException
    {
      get_cells_result result = new get_cells_result();
      receiveBase(result, "get_cells");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cells failed: unknown result");
    }

    public List<List<String>> get_cells_as_arrays(long ns, String name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_get_cells_as_arrays(ns, name, scan_spec);
      return recv_get_cells_as_arrays();
    }

    public void send_get_cells_as_arrays(long ns, String name, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      get_cells_as_arrays_args args = new get_cells_as_arrays_args();
      args.setNs(ns);
      args.setName(name);
      args.setScan_spec(scan_spec);
      sendBase("get_cells_as_arrays", args);
    }

    public List<List<String>> recv_get_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      get_cells_as_arrays_result result = new get_cells_as_arrays_result();
      receiveBase(result, "get_cells_as_arrays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cells_as_arrays failed: unknown result");
    }

    public ByteBuffer get_cells_serialized(long ns, String name, ScanSpec scan_spec) throws ClientException, org.apache.thrift.TException
    {
      send_get_cells_serialized(ns, name, scan_spec);
      return recv_get_cells_serialized();
    }

    public void send_get_cells_serialized(long ns, String name, ScanSpec scan_spec) throws org.apache.thrift.TException
    {
      get_cells_serialized_args args = new get_cells_serialized_args();
      args.setNs(ns);
      args.setName(name);
      args.setScan_spec(scan_spec);
      sendBase("get_cells_serialized", args);
    }

    public ByteBuffer recv_get_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      get_cells_serialized_result result = new get_cells_serialized_result();
      receiveBase(result, "get_cells_serialized");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_cells_serialized failed: unknown result");
    }

    public void shared_mutator_refresh(long ns, String table_name, MutateSpec mutate_spec) throws ClientException, org.apache.thrift.TException
    {
      send_shared_mutator_refresh(ns, table_name, mutate_spec);
      recv_shared_mutator_refresh();
    }

    public void send_shared_mutator_refresh(long ns, String table_name, MutateSpec mutate_spec) throws org.apache.thrift.TException
    {
      shared_mutator_refresh_args args = new shared_mutator_refresh_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      sendBase("shared_mutator_refresh", args);
    }

    public void recv_shared_mutator_refresh() throws ClientException, org.apache.thrift.TException
    {
      shared_mutator_refresh_result result = new shared_mutator_refresh_result();
      receiveBase(result, "shared_mutator_refresh");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void refresh_shared_mutator(long ns, String table_name, MutateSpec mutate_spec) throws ClientException, org.apache.thrift.TException
    {
      send_refresh_shared_mutator(ns, table_name, mutate_spec);
      recv_refresh_shared_mutator();
    }

    public void send_refresh_shared_mutator(long ns, String table_name, MutateSpec mutate_spec) throws org.apache.thrift.TException
    {
      refresh_shared_mutator_args args = new refresh_shared_mutator_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      sendBase("refresh_shared_mutator", args);
    }

    public void recv_refresh_shared_mutator() throws ClientException, org.apache.thrift.TException
    {
      refresh_shared_mutator_result result = new refresh_shared_mutator_result();
      receiveBase(result, "refresh_shared_mutator");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void shared_mutator_set_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
      recv_shared_mutator_set_cells();
    }

    public void send_shared_mutator_set_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws org.apache.thrift.TException
    {
      shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCells(cells);
      sendBase("shared_mutator_set_cells", args);
    }

    public void recv_shared_mutator_set_cells() throws ClientException, org.apache.thrift.TException
    {
      shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
      receiveBase(result, "shared_mutator_set_cells");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void offer_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_offer_cells(ns, table_name, mutate_spec, cells);
      recv_offer_cells();
    }

    public void send_offer_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells) throws org.apache.thrift.TException
    {
      offer_cells_args args = new offer_cells_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCells(cells);
      sendBase("offer_cells", args);
    }

    public void recv_offer_cells() throws ClientException, org.apache.thrift.TException
    {
      offer_cells_result result = new offer_cells_result();
      receiveBase(result, "offer_cells");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void shared_mutator_set_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
      recv_shared_mutator_set_cells_as_arrays();
    }

    public void send_shared_mutator_set_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws org.apache.thrift.TException
    {
      shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCells(cells);
      sendBase("shared_mutator_set_cells_as_arrays", args);
    }

    public void recv_shared_mutator_set_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
      receiveBase(result, "shared_mutator_set_cells_as_arrays");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void offer_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
      recv_offer_cells_as_arrays();
    }

    public void send_offer_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells) throws org.apache.thrift.TException
    {
      offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCells(cells);
      sendBase("offer_cells_as_arrays", args);
    }

    public void recv_offer_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
      receiveBase(result, "offer_cells_as_arrays");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void shared_mutator_set_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
      recv_shared_mutator_set_cell();
    }

    public void send_shared_mutator_set_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws org.apache.thrift.TException
    {
      shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCell(cell);
      sendBase("shared_mutator_set_cell", args);
    }

    public void recv_shared_mutator_set_cell() throws ClientException, org.apache.thrift.TException
    {
      shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
      receiveBase(result, "shared_mutator_set_cell");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void offer_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_offer_cell(ns, table_name, mutate_spec, cell);
      recv_offer_cell();
    }

    public void send_offer_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell) throws org.apache.thrift.TException
    {
      offer_cell_args args = new offer_cell_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCell(cell);
      sendBase("offer_cell", args);
    }

    public void recv_offer_cell() throws ClientException, org.apache.thrift.TException
    {
      offer_cell_result result = new offer_cell_result();
      receiveBase(result, "offer_cell");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void shared_mutator_set_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
      recv_shared_mutator_set_cell_as_array();
    }

    public void send_shared_mutator_set_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws org.apache.thrift.TException
    {
      shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCell(cell);
      sendBase("shared_mutator_set_cell_as_array", args);
    }

    public void recv_shared_mutator_set_cell_as_array() throws ClientException, org.apache.thrift.TException
    {
      shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
      receiveBase(result, "shared_mutator_set_cell_as_array");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void offer_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
      recv_offer_cell_as_array();
    }

    public void send_offer_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell) throws org.apache.thrift.TException
    {
      offer_cell_as_array_args args = new offer_cell_as_array_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setMutate_spec(mutate_spec);
      args.setCell(cell);
      sendBase("offer_cell_as_array", args);
    }

    public void recv_offer_cell_as_array() throws ClientException, org.apache.thrift.TException
    {
      offer_cell_as_array_result result = new offer_cell_as_array_result();
      receiveBase(result, "offer_cell_as_array");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public long mutator_open(long ns, String table_name, int flags, int flush_interval) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_open(ns, table_name, flags, flush_interval);
      return recv_mutator_open();
    }

    public void send_mutator_open(long ns, String table_name, int flags, int flush_interval) throws org.apache.thrift.TException
    {
      mutator_open_args args = new mutator_open_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFlags(flags);
      args.setFlush_interval(flush_interval);
      sendBase("mutator_open", args);
    }

    public long recv_mutator_open() throws ClientException, org.apache.thrift.TException
    {
      mutator_open_result result = new mutator_open_result();
      receiveBase(result, "mutator_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mutator_open failed: unknown result");
    }

    public long open_mutator(long ns, String table_name, int flags, int flush_interval) throws ClientException, org.apache.thrift.TException
    {
      send_open_mutator(ns, table_name, flags, flush_interval);
      return recv_open_mutator();
    }

    public void send_open_mutator(long ns, String table_name, int flags, int flush_interval) throws org.apache.thrift.TException
    {
      open_mutator_args args = new open_mutator_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFlags(flags);
      args.setFlush_interval(flush_interval);
      sendBase("open_mutator", args);
    }

    public long recv_open_mutator() throws ClientException, org.apache.thrift.TException
    {
      open_mutator_result result = new open_mutator_result();
      receiveBase(result, "open_mutator");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_mutator failed: unknown result");
    }

    public long async_mutator_open(long ns, String table_name, long future, int flags) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_open(ns, table_name, future, flags);
      return recv_async_mutator_open();
    }

    public void send_async_mutator_open(long ns, String table_name, long future, int flags) throws org.apache.thrift.TException
    {
      async_mutator_open_args args = new async_mutator_open_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFuture(future);
      args.setFlags(flags);
      sendBase("async_mutator_open", args);
    }

    public long recv_async_mutator_open() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_open_result result = new async_mutator_open_result();
      receiveBase(result, "async_mutator_open");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "async_mutator_open failed: unknown result");
    }

    public long open_mutator_async(long ns, String table_name, long future, int flags) throws ClientException, org.apache.thrift.TException
    {
      send_open_mutator_async(ns, table_name, future, flags);
      return recv_open_mutator_async();
    }

    public void send_open_mutator_async(long ns, String table_name, long future, int flags) throws org.apache.thrift.TException
    {
      open_mutator_async_args args = new open_mutator_async_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setFuture(future);
      args.setFlags(flags);
      sendBase("open_mutator_async", args);
    }

    public long recv_open_mutator_async() throws ClientException, org.apache.thrift.TException
    {
      open_mutator_async_result result = new open_mutator_async_result();
      receiveBase(result, "open_mutator_async");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "open_mutator_async failed: unknown result");
    }

    public void mutator_close(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_close(mutator);
      recv_mutator_close();
    }

    public void send_mutator_close(long mutator) throws org.apache.thrift.TException
    {
      mutator_close_args args = new mutator_close_args();
      args.setMutator(mutator);
      sendBase("mutator_close", args);
    }

    public void recv_mutator_close() throws ClientException, org.apache.thrift.TException
    {
      mutator_close_result result = new mutator_close_result();
      receiveBase(result, "mutator_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_mutator(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_close_mutator(mutator);
      recv_close_mutator();
    }

    public void send_close_mutator(long mutator) throws org.apache.thrift.TException
    {
      close_mutator_args args = new close_mutator_args();
      args.setMutator(mutator);
      sendBase("close_mutator", args);
    }

    public void recv_close_mutator() throws ClientException, org.apache.thrift.TException
    {
      close_mutator_result result = new close_mutator_result();
      receiveBase(result, "close_mutator");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_cancel(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_cancel(mutator);
      recv_async_mutator_cancel();
    }

    public void send_async_mutator_cancel(long mutator) throws org.apache.thrift.TException
    {
      async_mutator_cancel_args args = new async_mutator_cancel_args();
      args.setMutator(mutator);
      sendBase("async_mutator_cancel", args);
    }

    public void recv_async_mutator_cancel() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_cancel_result result = new async_mutator_cancel_result();
      receiveBase(result, "async_mutator_cancel");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void cancel_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_cancel_mutator_async(mutator);
      recv_cancel_mutator_async();
    }

    public void send_cancel_mutator_async(long mutator) throws org.apache.thrift.TException
    {
      cancel_mutator_async_args args = new cancel_mutator_async_args();
      args.setMutator(mutator);
      sendBase("cancel_mutator_async", args);
    }

    public void recv_cancel_mutator_async() throws ClientException, org.apache.thrift.TException
    {
      cancel_mutator_async_result result = new cancel_mutator_async_result();
      receiveBase(result, "cancel_mutator_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_close(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_close(mutator);
      recv_async_mutator_close();
    }

    public void send_async_mutator_close(long mutator) throws org.apache.thrift.TException
    {
      async_mutator_close_args args = new async_mutator_close_args();
      args.setMutator(mutator);
      sendBase("async_mutator_close", args);
    }

    public void recv_async_mutator_close() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_close_result result = new async_mutator_close_result();
      receiveBase(result, "async_mutator_close");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void close_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_close_mutator_async(mutator);
      recv_close_mutator_async();
    }

    public void send_close_mutator_async(long mutator) throws org.apache.thrift.TException
    {
      close_mutator_async_args args = new close_mutator_async_args();
      args.setMutator(mutator);
      sendBase("close_mutator_async", args);
    }

    public void recv_close_mutator_async() throws ClientException, org.apache.thrift.TException
    {
      close_mutator_async_result result = new close_mutator_async_result();
      receiveBase(result, "close_mutator_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_set_cell(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_set_cell(mutator, cell);
      recv_mutator_set_cell();
    }

    public void send_mutator_set_cell(long mutator, Cell cell) throws org.apache.thrift.TException
    {
      mutator_set_cell_args args = new mutator_set_cell_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("mutator_set_cell", args);
    }

    public void recv_mutator_set_cell() throws ClientException, org.apache.thrift.TException
    {
      mutator_set_cell_result result = new mutator_set_cell_result();
      receiveBase(result, "mutator_set_cell");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cell(long ns, String table_name, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_set_cell(ns, table_name, cell);
      recv_set_cell();
    }

    public void send_set_cell(long ns, String table_name, Cell cell) throws org.apache.thrift.TException
    {
      set_cell_args args = new set_cell_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setCell(cell);
      sendBase("set_cell", args);
    }

    public void recv_set_cell() throws ClientException, org.apache.thrift.TException
    {
      set_cell_result result = new set_cell_result();
      receiveBase(result, "set_cell");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_set_cell_as_array(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_set_cell_as_array(mutator, cell);
      recv_mutator_set_cell_as_array();
    }

    public void send_mutator_set_cell_as_array(long mutator, List<String> cell) throws org.apache.thrift.TException
    {
      mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("mutator_set_cell_as_array", args);
    }

    public void recv_mutator_set_cell_as_array() throws ClientException, org.apache.thrift.TException
    {
      mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
      receiveBase(result, "mutator_set_cell_as_array");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cell_as_array(long ns, String table_name, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_set_cell_as_array(ns, table_name, cell);
      recv_set_cell_as_array();
    }

    public void send_set_cell_as_array(long ns, String table_name, List<String> cell) throws org.apache.thrift.TException
    {
      set_cell_as_array_args args = new set_cell_as_array_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setCell(cell);
      sendBase("set_cell_as_array", args);
    }

    public void recv_set_cell_as_array() throws ClientException, org.apache.thrift.TException
    {
      set_cell_as_array_result result = new set_cell_as_array_result();
      receiveBase(result, "set_cell_as_array");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_set_cells(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_set_cells(mutator, cells);
      recv_mutator_set_cells();
    }

    public void send_mutator_set_cells(long mutator, List<Cell> cells) throws org.apache.thrift.TException
    {
      mutator_set_cells_args args = new mutator_set_cells_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("mutator_set_cells", args);
    }

    public void recv_mutator_set_cells() throws ClientException, org.apache.thrift.TException
    {
      mutator_set_cells_result result = new mutator_set_cells_result();
      receiveBase(result, "mutator_set_cells");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells(long ns, String table_name, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells(ns, table_name, cells);
      recv_set_cells();
    }

    public void send_set_cells(long ns, String table_name, List<Cell> cells) throws org.apache.thrift.TException
    {
      set_cells_args args = new set_cells_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setCells(cells);
      sendBase("set_cells", args);
    }

    public void recv_set_cells() throws ClientException, org.apache.thrift.TException
    {
      set_cells_result result = new set_cells_result();
      receiveBase(result, "set_cells");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_set_cells_as_arrays(mutator, cells);
      recv_mutator_set_cells_as_arrays();
    }

    public void send_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws org.apache.thrift.TException
    {
      mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("mutator_set_cells_as_arrays", args);
    }

    public void recv_mutator_set_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
      receiveBase(result, "mutator_set_cells_as_arrays");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells_as_arrays(long ns, String table_name, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells_as_arrays(ns, table_name, cells);
      recv_set_cells_as_arrays();
    }

    public void send_set_cells_as_arrays(long ns, String table_name, List<List<String>> cells) throws org.apache.thrift.TException
    {
      set_cells_as_arrays_args args = new set_cells_as_arrays_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setCells(cells);
      sendBase("set_cells_as_arrays", args);
    }

    public void recv_set_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      set_cells_as_arrays_result result = new set_cells_as_arrays_result();
      receiveBase(result, "set_cells_as_arrays");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_set_cells_serialized(mutator, cells, flush);
      recv_mutator_set_cells_serialized();
    }

    public void send_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws org.apache.thrift.TException
    {
      mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
      args.setMutator(mutator);
      args.setCells(cells);
      args.setFlush(flush);
      sendBase("mutator_set_cells_serialized", args);
    }

    public void recv_mutator_set_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
      receiveBase(result, "mutator_set_cells_serialized");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells_serialized(long ns, String table_name, ByteBuffer cells) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells_serialized(ns, table_name, cells);
      recv_set_cells_serialized();
    }

    public void send_set_cells_serialized(long ns, String table_name, ByteBuffer cells) throws org.apache.thrift.TException
    {
      set_cells_serialized_args args = new set_cells_serialized_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setCells(cells);
      sendBase("set_cells_serialized", args);
    }

    public void recv_set_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      set_cells_serialized_result result = new set_cells_serialized_result();
      receiveBase(result, "set_cells_serialized");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void mutator_flush(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_mutator_flush(mutator);
      recv_mutator_flush();
    }

    public void send_mutator_flush(long mutator) throws org.apache.thrift.TException
    {
      mutator_flush_args args = new mutator_flush_args();
      args.setMutator(mutator);
      sendBase("mutator_flush", args);
    }

    public void recv_mutator_flush() throws ClientException, org.apache.thrift.TException
    {
      mutator_flush_result result = new mutator_flush_result();
      receiveBase(result, "mutator_flush");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void flush_mutator(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_flush_mutator(mutator);
      recv_flush_mutator();
    }

    public void send_flush_mutator(long mutator) throws org.apache.thrift.TException
    {
      flush_mutator_args args = new flush_mutator_args();
      args.setMutator(mutator);
      sendBase("flush_mutator", args);
    }

    public void recv_flush_mutator() throws ClientException, org.apache.thrift.TException
    {
      flush_mutator_result result = new flush_mutator_result();
      receiveBase(result, "flush_mutator");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_set_cell(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_set_cell(mutator, cell);
      recv_async_mutator_set_cell();
    }

    public void send_async_mutator_set_cell(long mutator, Cell cell) throws org.apache.thrift.TException
    {
      async_mutator_set_cell_args args = new async_mutator_set_cell_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("async_mutator_set_cell", args);
    }

    public void recv_async_mutator_set_cell() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_set_cell_result result = new async_mutator_set_cell_result();
      receiveBase(result, "async_mutator_set_cell");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cell_async(long mutator, Cell cell) throws ClientException, org.apache.thrift.TException
    {
      send_set_cell_async(mutator, cell);
      recv_set_cell_async();
    }

    public void send_set_cell_async(long mutator, Cell cell) throws org.apache.thrift.TException
    {
      set_cell_async_args args = new set_cell_async_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("set_cell_async", args);
    }

    public void recv_set_cell_async() throws ClientException, org.apache.thrift.TException
    {
      set_cell_async_result result = new set_cell_async_result();
      receiveBase(result, "set_cell_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_set_cell_as_array(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_set_cell_as_array(mutator, cell);
      recv_async_mutator_set_cell_as_array();
    }

    public void send_async_mutator_set_cell_as_array(long mutator, List<String> cell) throws org.apache.thrift.TException
    {
      async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("async_mutator_set_cell_as_array", args);
    }

    public void recv_async_mutator_set_cell_as_array() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
      receiveBase(result, "async_mutator_set_cell_as_array");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cell_as_array_async(long mutator, List<String> cell) throws ClientException, org.apache.thrift.TException
    {
      send_set_cell_as_array_async(mutator, cell);
      recv_set_cell_as_array_async();
    }

    public void send_set_cell_as_array_async(long mutator, List<String> cell) throws org.apache.thrift.TException
    {
      set_cell_as_array_async_args args = new set_cell_as_array_async_args();
      args.setMutator(mutator);
      args.setCell(cell);
      sendBase("set_cell_as_array_async", args);
    }

    public void recv_set_cell_as_array_async() throws ClientException, org.apache.thrift.TException
    {
      set_cell_as_array_async_result result = new set_cell_as_array_async_result();
      receiveBase(result, "set_cell_as_array_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_set_cells(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_set_cells(mutator, cells);
      recv_async_mutator_set_cells();
    }

    public void send_async_mutator_set_cells(long mutator, List<Cell> cells) throws org.apache.thrift.TException
    {
      async_mutator_set_cells_args args = new async_mutator_set_cells_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("async_mutator_set_cells", args);
    }

    public void recv_async_mutator_set_cells() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_set_cells_result result = new async_mutator_set_cells_result();
      receiveBase(result, "async_mutator_set_cells");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells_async(long mutator, List<Cell> cells) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells_async(mutator, cells);
      recv_set_cells_async();
    }

    public void send_set_cells_async(long mutator, List<Cell> cells) throws org.apache.thrift.TException
    {
      set_cells_async_args args = new set_cells_async_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("set_cells_async", args);
    }

    public void recv_set_cells_async() throws ClientException, org.apache.thrift.TException
    {
      set_cells_async_result result = new set_cells_async_result();
      receiveBase(result, "set_cells_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_set_cells_as_arrays(mutator, cells);
      recv_async_mutator_set_cells_as_arrays();
    }

    public void send_async_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells) throws org.apache.thrift.TException
    {
      async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("async_mutator_set_cells_as_arrays", args);
    }

    public void recv_async_mutator_set_cells_as_arrays() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
      receiveBase(result, "async_mutator_set_cells_as_arrays");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells_as_arrays_async(long mutator, List<List<String>> cells) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells_as_arrays_async(mutator, cells);
      recv_set_cells_as_arrays_async();
    }

    public void send_set_cells_as_arrays_async(long mutator, List<List<String>> cells) throws org.apache.thrift.TException
    {
      set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
      args.setMutator(mutator);
      args.setCells(cells);
      sendBase("set_cells_as_arrays_async", args);
    }

    public void recv_set_cells_as_arrays_async() throws ClientException, org.apache.thrift.TException
    {
      set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
      receiveBase(result, "set_cells_as_arrays_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_set_cells_serialized(mutator, cells, flush);
      recv_async_mutator_set_cells_serialized();
    }

    public void send_async_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush) throws org.apache.thrift.TException
    {
      async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
      args.setMutator(mutator);
      args.setCells(cells);
      args.setFlush(flush);
      sendBase("async_mutator_set_cells_serialized", args);
    }

    public void recv_async_mutator_set_cells_serialized() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
      receiveBase(result, "async_mutator_set_cells_serialized");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void set_cells_serialized_async(long mutator, ByteBuffer cells, boolean flush) throws ClientException, org.apache.thrift.TException
    {
      send_set_cells_serialized_async(mutator, cells, flush);
      recv_set_cells_serialized_async();
    }

    public void send_set_cells_serialized_async(long mutator, ByteBuffer cells, boolean flush) throws org.apache.thrift.TException
    {
      set_cells_serialized_async_args args = new set_cells_serialized_async_args();
      args.setMutator(mutator);
      args.setCells(cells);
      args.setFlush(flush);
      sendBase("set_cells_serialized_async", args);
    }

    public void recv_set_cells_serialized_async() throws ClientException, org.apache.thrift.TException
    {
      set_cells_serialized_async_result result = new set_cells_serialized_async_result();
      receiveBase(result, "set_cells_serialized_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void async_mutator_flush(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_async_mutator_flush(mutator);
      recv_async_mutator_flush();
    }

    public void send_async_mutator_flush(long mutator) throws org.apache.thrift.TException
    {
      async_mutator_flush_args args = new async_mutator_flush_args();
      args.setMutator(mutator);
      sendBase("async_mutator_flush", args);
    }

    public void recv_async_mutator_flush() throws ClientException, org.apache.thrift.TException
    {
      async_mutator_flush_result result = new async_mutator_flush_result();
      receiveBase(result, "async_mutator_flush");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void flush_mutator_async(long mutator) throws ClientException, org.apache.thrift.TException
    {
      send_flush_mutator_async(mutator);
      recv_flush_mutator_async();
    }

    public void send_flush_mutator_async(long mutator) throws org.apache.thrift.TException
    {
      flush_mutator_async_args args = new flush_mutator_async_args();
      args.setMutator(mutator);
      sendBase("flush_mutator_async", args);
    }

    public void recv_flush_mutator_async() throws ClientException, org.apache.thrift.TException
    {
      flush_mutator_async_result result = new flush_mutator_async_result();
      receiveBase(result, "flush_mutator_async");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public boolean namespace_exists(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_exists(ns);
      return recv_namespace_exists();
    }

    public void send_namespace_exists(String ns) throws org.apache.thrift.TException
    {
      namespace_exists_args args = new namespace_exists_args();
      args.setNs(ns);
      sendBase("namespace_exists", args);
    }

    public boolean recv_namespace_exists() throws ClientException, org.apache.thrift.TException
    {
      namespace_exists_result result = new namespace_exists_result();
      receiveBase(result, "namespace_exists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "namespace_exists failed: unknown result");
    }

    public boolean exists_namespace(String ns) throws ClientException, org.apache.thrift.TException
    {
      send_exists_namespace(ns);
      return recv_exists_namespace();
    }

    public void send_exists_namespace(String ns) throws org.apache.thrift.TException
    {
      exists_namespace_args args = new exists_namespace_args();
      args.setNs(ns);
      sendBase("exists_namespace", args);
    }

    public boolean recv_exists_namespace() throws ClientException, org.apache.thrift.TException
    {
      exists_namespace_result result = new exists_namespace_result();
      receiveBase(result, "exists_namespace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exists_namespace failed: unknown result");
    }

    public boolean exists_table(long ns, String name) throws ClientException, org.apache.thrift.TException
    {
      send_exists_table(ns, name);
      return recv_exists_table();
    }

    public void send_exists_table(long ns, String name) throws org.apache.thrift.TException
    {
      exists_table_args args = new exists_table_args();
      args.setNs(ns);
      args.setName(name);
      sendBase("exists_table", args);
    }

    public boolean recv_exists_table() throws ClientException, org.apache.thrift.TException
    {
      exists_table_result result = new exists_table_result();
      receiveBase(result, "exists_table");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exists_table failed: unknown result");
    }

    public boolean table_exists(long ns, String name) throws ClientException, org.apache.thrift.TException
    {
      send_table_exists(ns, name);
      return recv_table_exists();
    }

    public void send_table_exists(long ns, String name) throws org.apache.thrift.TException
    {
      table_exists_args args = new table_exists_args();
      args.setNs(ns);
      args.setName(name);
      sendBase("table_exists", args);
    }

    public boolean recv_table_exists() throws ClientException, org.apache.thrift.TException
    {
      table_exists_result result = new table_exists_result();
      receiveBase(result, "table_exists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_exists failed: unknown result");
    }

    public String table_get_id(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_get_id(ns, table_name);
      return recv_table_get_id();
    }

    public void send_table_get_id(long ns, String table_name) throws org.apache.thrift.TException
    {
      table_get_id_args args = new table_get_id_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("table_get_id", args);
    }

    public String recv_table_get_id() throws ClientException, org.apache.thrift.TException
    {
      table_get_id_result result = new table_get_id_result();
      receiveBase(result, "table_get_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_get_id failed: unknown result");
    }

    public String get_table_id(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_get_table_id(ns, table_name);
      return recv_get_table_id();
    }

    public void send_get_table_id(long ns, String table_name) throws org.apache.thrift.TException
    {
      get_table_id_args args = new get_table_id_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("get_table_id", args);
    }

    public String recv_get_table_id() throws ClientException, org.apache.thrift.TException
    {
      get_table_id_result result = new get_table_id_result();
      receiveBase(result, "get_table_id");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_table_id failed: unknown result");
    }

    public String table_get_schema_str(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_get_schema_str(ns, table_name);
      return recv_table_get_schema_str();
    }

    public void send_table_get_schema_str(long ns, String table_name) throws org.apache.thrift.TException
    {
      table_get_schema_str_args args = new table_get_schema_str_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("table_get_schema_str", args);
    }

    public String recv_table_get_schema_str() throws ClientException, org.apache.thrift.TException
    {
      table_get_schema_str_result result = new table_get_schema_str_result();
      receiveBase(result, "table_get_schema_str");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_get_schema_str failed: unknown result");
    }

    public String get_schema_str(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_get_schema_str(ns, table_name);
      return recv_get_schema_str();
    }

    public void send_get_schema_str(long ns, String table_name) throws org.apache.thrift.TException
    {
      get_schema_str_args args = new get_schema_str_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("get_schema_str", args);
    }

    public String recv_get_schema_str() throws ClientException, org.apache.thrift.TException
    {
      get_schema_str_result result = new get_schema_str_result();
      receiveBase(result, "get_schema_str");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_schema_str failed: unknown result");
    }

    public String table_get_schema_str_with_ids(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_get_schema_str_with_ids(ns, table_name);
      return recv_table_get_schema_str_with_ids();
    }

    public void send_table_get_schema_str_with_ids(long ns, String table_name) throws org.apache.thrift.TException
    {
      table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("table_get_schema_str_with_ids", args);
    }

    public String recv_table_get_schema_str_with_ids() throws ClientException, org.apache.thrift.TException
    {
      table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
      receiveBase(result, "table_get_schema_str_with_ids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_get_schema_str_with_ids failed: unknown result");
    }

    public String get_schema_str_with_ids(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_get_schema_str_with_ids(ns, table_name);
      return recv_get_schema_str_with_ids();
    }

    public void send_get_schema_str_with_ids(long ns, String table_name) throws org.apache.thrift.TException
    {
      get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("get_schema_str_with_ids", args);
    }

    public String recv_get_schema_str_with_ids() throws ClientException, org.apache.thrift.TException
    {
      get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
      receiveBase(result, "get_schema_str_with_ids");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_schema_str_with_ids failed: unknown result");
    }

    public Schema table_get_schema(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_get_schema(ns, table_name);
      return recv_table_get_schema();
    }

    public void send_table_get_schema(long ns, String table_name) throws org.apache.thrift.TException
    {
      table_get_schema_args args = new table_get_schema_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("table_get_schema", args);
    }

    public Schema recv_table_get_schema() throws ClientException, org.apache.thrift.TException
    {
      table_get_schema_result result = new table_get_schema_result();
      receiveBase(result, "table_get_schema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_get_schema failed: unknown result");
    }

    public Schema get_schema(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_get_schema(ns, table_name);
      return recv_get_schema();
    }

    public void send_get_schema(long ns, String table_name) throws org.apache.thrift.TException
    {
      get_schema_args args = new get_schema_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("get_schema", args);
    }

    public Schema recv_get_schema() throws ClientException, org.apache.thrift.TException
    {
      get_schema_result result = new get_schema_result();
      receiveBase(result, "get_schema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_schema failed: unknown result");
    }

    public List<String> get_tables(long ns) throws ClientException, org.apache.thrift.TException
    {
      send_get_tables(ns);
      return recv_get_tables();
    }

    public void send_get_tables(long ns) throws org.apache.thrift.TException
    {
      get_tables_args args = new get_tables_args();
      args.setNs(ns);
      sendBase("get_tables", args);
    }

    public List<String> recv_get_tables() throws ClientException, org.apache.thrift.TException
    {
      get_tables_result result = new get_tables_result();
      receiveBase(result, "get_tables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
    }

    public List<NamespaceListing> namespace_get_listing(long ns) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_get_listing(ns);
      return recv_namespace_get_listing();
    }

    public void send_namespace_get_listing(long ns) throws org.apache.thrift.TException
    {
      namespace_get_listing_args args = new namespace_get_listing_args();
      args.setNs(ns);
      sendBase("namespace_get_listing", args);
    }

    public List<NamespaceListing> recv_namespace_get_listing() throws ClientException, org.apache.thrift.TException
    {
      namespace_get_listing_result result = new namespace_get_listing_result();
      receiveBase(result, "namespace_get_listing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "namespace_get_listing failed: unknown result");
    }

    public List<NamespaceListing> get_listing(long ns) throws ClientException, org.apache.thrift.TException
    {
      send_get_listing(ns);
      return recv_get_listing();
    }

    public void send_get_listing(long ns) throws org.apache.thrift.TException
    {
      get_listing_args args = new get_listing_args();
      args.setNs(ns);
      sendBase("get_listing", args);
    }

    public List<NamespaceListing> recv_get_listing() throws ClientException, org.apache.thrift.TException
    {
      get_listing_result result = new get_listing_result();
      receiveBase(result, "get_listing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_listing failed: unknown result");
    }

    public List<TableSplit> table_get_splits(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_get_splits(ns, table_name);
      return recv_table_get_splits();
    }

    public void send_table_get_splits(long ns, String table_name) throws org.apache.thrift.TException
    {
      table_get_splits_args args = new table_get_splits_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("table_get_splits", args);
    }

    public List<TableSplit> recv_table_get_splits() throws ClientException, org.apache.thrift.TException
    {
      table_get_splits_result result = new table_get_splits_result();
      receiveBase(result, "table_get_splits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "table_get_splits failed: unknown result");
    }

    public List<TableSplit> get_table_splits(long ns, String table_name) throws ClientException, org.apache.thrift.TException
    {
      send_get_table_splits(ns, table_name);
      return recv_get_table_splits();
    }

    public void send_get_table_splits(long ns, String table_name) throws org.apache.thrift.TException
    {
      get_table_splits_args args = new get_table_splits_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      sendBase("get_table_splits", args);
    }

    public List<TableSplit> recv_get_table_splits() throws ClientException, org.apache.thrift.TException
    {
      get_table_splits_result result = new get_table_splits_result();
      receiveBase(result, "get_table_splits");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get_table_splits failed: unknown result");
    }

    public void namespace_drop(String ns, boolean if_exists) throws ClientException, org.apache.thrift.TException
    {
      send_namespace_drop(ns, if_exists);
      recv_namespace_drop();
    }

    public void send_namespace_drop(String ns, boolean if_exists) throws org.apache.thrift.TException
    {
      namespace_drop_args args = new namespace_drop_args();
      args.setNs(ns);
      args.setIf_exists(if_exists);
      sendBase("namespace_drop", args);
    }

    public void recv_namespace_drop() throws ClientException, org.apache.thrift.TException
    {
      namespace_drop_result result = new namespace_drop_result();
      receiveBase(result, "namespace_drop");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void drop_namespace(String ns, boolean if_exists) throws ClientException, org.apache.thrift.TException
    {
      send_drop_namespace(ns, if_exists);
      recv_drop_namespace();
    }

    public void send_drop_namespace(String ns, boolean if_exists) throws org.apache.thrift.TException
    {
      drop_namespace_args args = new drop_namespace_args();
      args.setNs(ns);
      args.setIf_exists(if_exists);
      sendBase("drop_namespace", args);
    }

    public void recv_drop_namespace() throws ClientException, org.apache.thrift.TException
    {
      drop_namespace_result result = new drop_namespace_result();
      receiveBase(result, "drop_namespace");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void rename_table(long ns, String name, String new_name) throws ClientException, org.apache.thrift.TException
    {
      send_rename_table(ns, name, new_name);
      recv_rename_table();
    }

    public void send_rename_table(long ns, String name, String new_name) throws org.apache.thrift.TException
    {
      rename_table_args args = new rename_table_args();
      args.setNs(ns);
      args.setName(name);
      args.setNew_name(new_name);
      sendBase("rename_table", args);
    }

    public void recv_rename_table() throws ClientException, org.apache.thrift.TException
    {
      rename_table_result result = new rename_table_result();
      receiveBase(result, "rename_table");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void table_rename(long ns, String name, String new_name) throws ClientException, org.apache.thrift.TException
    {
      send_table_rename(ns, name, new_name);
      recv_table_rename();
    }

    public void send_table_rename(long ns, String name, String new_name) throws org.apache.thrift.TException
    {
      table_rename_args args = new table_rename_args();
      args.setNs(ns);
      args.setName(name);
      args.setNew_name(new_name);
      sendBase("table_rename", args);
    }

    public void recv_table_rename() throws ClientException, org.apache.thrift.TException
    {
      table_rename_result result = new table_rename_result();
      receiveBase(result, "table_rename");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void drop_table(long ns, String name, boolean if_exists) throws ClientException, org.apache.thrift.TException
    {
      send_drop_table(ns, name, if_exists);
      recv_drop_table();
    }

    public void send_drop_table(long ns, String name, boolean if_exists) throws org.apache.thrift.TException
    {
      drop_table_args args = new drop_table_args();
      args.setNs(ns);
      args.setName(name);
      args.setIf_exists(if_exists);
      sendBase("drop_table", args);
    }

    public void recv_drop_table() throws ClientException, org.apache.thrift.TException
    {
      drop_table_result result = new drop_table_result();
      receiveBase(result, "drop_table");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void table_drop(long ns, String name, boolean if_exists) throws ClientException, org.apache.thrift.TException
    {
      send_table_drop(ns, name, if_exists);
      recv_table_drop();
    }

    public void send_table_drop(long ns, String name, boolean if_exists) throws org.apache.thrift.TException
    {
      table_drop_args args = new table_drop_args();
      args.setNs(ns);
      args.setName(name);
      args.setIf_exists(if_exists);
      sendBase("table_drop", args);
    }

    public void recv_table_drop() throws ClientException, org.apache.thrift.TException
    {
      table_drop_result result = new table_drop_result();
      receiveBase(result, "table_drop");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String generate_guid() throws org.apache.thrift.TException
    {
      send_generate_guid();
      return recv_generate_guid();
    }

    public void send_generate_guid() throws org.apache.thrift.TException
    {
      generate_guid_args args = new generate_guid_args();
      sendBase("generate_guid", args);
    }

    public String recv_generate_guid() throws org.apache.thrift.TException
    {
      generate_guid_result result = new generate_guid_result();
      receiveBase(result, "generate_guid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "generate_guid failed: unknown result");
    }

    public String create_cell_unique(long ns, String table_name, Key key, String value) throws ClientException, org.apache.thrift.TException
    {
      send_create_cell_unique(ns, table_name, key, value);
      return recv_create_cell_unique();
    }

    public void send_create_cell_unique(long ns, String table_name, Key key, String value) throws org.apache.thrift.TException
    {
      create_cell_unique_args args = new create_cell_unique_args();
      args.setNs(ns);
      args.setTable_name(table_name);
      args.setKey(key);
      args.setValue(value);
      sendBase("create_cell_unique", args);
    }

    public String recv_create_cell_unique() throws ClientException, org.apache.thrift.TException
    {
      create_cell_unique_result result = new create_cell_unique_result();
      receiveBase(result, "create_cell_unique");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_cell_unique failed: unknown result");
    }

    public String error_get_text(int error_code) throws org.apache.thrift.TException
    {
      send_error_get_text(error_code);
      return recv_error_get_text();
    }

    public void send_error_get_text(int error_code) throws org.apache.thrift.TException
    {
      error_get_text_args args = new error_get_text_args();
      args.setError_code(error_code);
      sendBase("error_get_text", args);
    }

    public String recv_error_get_text() throws org.apache.thrift.TException
    {
      error_get_text_result result = new error_get_text_result();
      receiveBase(result, "error_get_text");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "error_get_text failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void namespace_create(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_create_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_create_call method_call = new namespace_create_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public namespace_create_call(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_create_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_create_args args = new namespace_create_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_namespace_create();
      }
    }

    public void create_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<create_namespace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_namespace_call method_call = new create_namespace_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_namespace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public create_namespace_call(String ns, org.apache.thrift.async.AsyncMethodCallback<create_namespace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_namespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_namespace_args args = new create_namespace_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_create_namespace();
      }
    }

    public void create_table(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<create_table_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_table_call method_call = new create_table_call(ns, table_name, schema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_table_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String schema;
      public create_table_call(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<create_table_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.schema = schema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_table_args args = new create_table_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setSchema(schema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_create_table();
      }
    }

    public void table_create(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<table_create_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_create_call method_call = new table_create_call(ns, table_name, schema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String schema;
      public table_create_call(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<table_create_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.schema = schema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_create_args args = new table_create_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setSchema(schema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_table_create();
      }
    }

    public void alter_table(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<alter_table_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alter_table_call method_call = new alter_table_call(ns, table_name, schema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alter_table_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String schema;
      public alter_table_call(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<alter_table_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.schema = schema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alter_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alter_table_args args = new alter_table_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setSchema(schema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_alter_table();
      }
    }

    public void table_alter(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<table_alter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_alter_call method_call = new table_alter_call(ns, table_name, schema, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_alter_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String schema;
      public table_alter_call(long ns, String table_name, String schema, org.apache.thrift.async.AsyncMethodCallback<table_alter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.schema = schema;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_alter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_alter_args args = new table_alter_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setSchema(schema);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_table_alter();
      }
    }

    public void namespace_open(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_open_call method_call = new namespace_open_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public namespace_open_call(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_open_args args = new namespace_open_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_namespace_open();
      }
    }

    public void open_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<open_namespace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_namespace_call method_call = new open_namespace_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_namespace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public open_namespace_call(String ns, org.apache.thrift.async.AsyncMethodCallback<open_namespace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_namespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_namespace_args args = new open_namespace_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_namespace();
      }
    }

    public void namespace_close(long ns, org.apache.thrift.async.AsyncMethodCallback<namespace_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_close_call method_call = new namespace_close_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      public namespace_close_call(long ns, org.apache.thrift.async.AsyncMethodCallback<namespace_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_close_args args = new namespace_close_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_namespace_close();
      }
    }

    public void close_namespace(long ns, org.apache.thrift.async.AsyncMethodCallback<close_namespace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_namespace_call method_call = new close_namespace_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_namespace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      public close_namespace_call(long ns, org.apache.thrift.async.AsyncMethodCallback<close_namespace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_namespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_namespace_args args = new close_namespace_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_namespace();
      }
    }

    public void future_open(int capacity, org.apache.thrift.async.AsyncMethodCallback<future_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_open_call method_call = new future_open_call(capacity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int capacity;
      public future_open_call(int capacity, org.apache.thrift.async.AsyncMethodCallback<future_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.capacity = capacity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_open_args args = new future_open_args();
        args.setCapacity(capacity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_open();
      }
    }

    public void open_future(int capacity, org.apache.thrift.async.AsyncMethodCallback<open_future_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_future_call method_call = new open_future_call(capacity, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_future_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int capacity;
      public open_future_call(int capacity, org.apache.thrift.async.AsyncMethodCallback<open_future_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.capacity = capacity;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_future", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_future_args args = new open_future_args();
        args.setCapacity(capacity);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_future();
      }
    }

    public void future_cancel(long ff, org.apache.thrift.async.AsyncMethodCallback<future_cancel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_cancel_call method_call = new future_cancel_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_cancel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_cancel_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_cancel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_cancel_args args = new future_cancel_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_future_cancel();
      }
    }

    public void cancel_future(long ff, org.apache.thrift.async.AsyncMethodCallback<cancel_future_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancel_future_call method_call = new cancel_future_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancel_future_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public cancel_future_call(long ff, org.apache.thrift.async.AsyncMethodCallback<cancel_future_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancel_future", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancel_future_args args = new cancel_future_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancel_future();
      }
    }

    public void future_get_result(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_get_result_call method_call = new future_get_result_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_get_result_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public future_get_result_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_get_result", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_get_result_args args = new future_get_result_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_get_result();
      }
    }

    public void get_future_result(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_future_result_call method_call = new get_future_result_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_future_result_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public get_future_result_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_future_result", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_future_result_args args = new get_future_result_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_future_result();
      }
    }

    public void future_get_result_as_arrays(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_get_result_as_arrays_call method_call = new future_get_result_as_arrays_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_get_result_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public future_get_result_as_arrays_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_get_result_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_get_result_as_arrays_args args = new future_get_result_as_arrays_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultAsArrays getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_get_result_as_arrays();
      }
    }

    public void get_future_result_as_arrays(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_future_result_as_arrays_call method_call = new get_future_result_as_arrays_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_future_result_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public get_future_result_as_arrays_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_future_result_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_future_result_as_arrays_args args = new get_future_result_as_arrays_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultAsArrays getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_future_result_as_arrays();
      }
    }

    public void future_get_result_serialized(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_get_result_serialized_call method_call = new future_get_result_serialized_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_get_result_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public future_get_result_serialized_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<future_get_result_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_get_result_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_get_result_serialized_args args = new future_get_result_serialized_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultSerialized getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_get_result_serialized();
      }
    }

    public void get_future_result_serialized(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_future_result_serialized_call method_call = new get_future_result_serialized_call(ff, timeout_millis, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_future_result_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      private int timeout_millis;
      public get_future_result_serialized_call(long ff, int timeout_millis, org.apache.thrift.async.AsyncMethodCallback<get_future_result_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
        this.timeout_millis = timeout_millis;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_future_result_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_future_result_serialized_args args = new get_future_result_serialized_args();
        args.setFf(ff);
        args.setTimeout_millis(timeout_millis);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultSerialized getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_future_result_serialized();
      }
    }

    public void future_is_empty(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_empty_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_is_empty_call method_call = new future_is_empty_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_is_empty_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_is_empty_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_empty_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_is_empty", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_is_empty_args args = new future_is_empty_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_is_empty();
      }
    }

    public void future_is_full(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_full_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_is_full_call method_call = new future_is_full_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_is_full_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_is_full_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_full_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_is_full", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_is_full_args args = new future_is_full_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_is_full();
      }
    }

    public void future_is_cancelled(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_cancelled_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_is_cancelled_call method_call = new future_is_cancelled_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_is_cancelled_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_is_cancelled_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_is_cancelled_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_is_cancelled", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_is_cancelled_args args = new future_is_cancelled_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_is_cancelled();
      }
    }

    public void future_has_outstanding(long ff, org.apache.thrift.async.AsyncMethodCallback<future_has_outstanding_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_has_outstanding_call method_call = new future_has_outstanding_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_has_outstanding_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_has_outstanding_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_has_outstanding_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_has_outstanding", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_has_outstanding_args args = new future_has_outstanding_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_future_has_outstanding();
      }
    }

    public void future_close(long ff, org.apache.thrift.async.AsyncMethodCallback<future_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      future_close_call method_call = new future_close_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class future_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public future_close_call(long ff, org.apache.thrift.async.AsyncMethodCallback<future_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("future_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        future_close_args args = new future_close_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_future_close();
      }
    }

    public void close_future(long ff, org.apache.thrift.async.AsyncMethodCallback<close_future_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_future_call method_call = new close_future_call(ff, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_future_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ff;
      public close_future_call(long ff, org.apache.thrift.async.AsyncMethodCallback<close_future_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ff = ff;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_future", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_future_args args = new close_future_args();
        args.setFf(ff);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_future();
      }
    }

    public void scanner_open(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<scanner_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_open_call method_call = new scanner_open_call(ns, table_name, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private ScanSpec scan_spec;
      public scanner_open_call(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<scanner_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_open_args args = new scanner_open_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_open();
      }
    }

    public void open_scanner(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<open_scanner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_scanner_call method_call = new open_scanner_call(ns, table_name, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_scanner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private ScanSpec scan_spec;
      public open_scanner_call(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<open_scanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_scanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_scanner_args args = new open_scanner_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_scanner();
      }
    }

    public void async_scanner_open(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<async_scanner_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_scanner_open_call method_call = new async_scanner_open_call(ns, table_name, future, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_scanner_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private long future;
      private ScanSpec scan_spec;
      public async_scanner_open_call(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<async_scanner_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.future = future;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_scanner_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_scanner_open_args args = new async_scanner_open_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFuture(future);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_async_scanner_open();
      }
    }

    public void open_scanner_async(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<open_scanner_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_scanner_async_call method_call = new open_scanner_async_call(ns, table_name, future, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_scanner_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private long future;
      private ScanSpec scan_spec;
      public open_scanner_async_call(long ns, String table_name, long future, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<open_scanner_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.future = future;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_scanner_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_scanner_async_args args = new open_scanner_async_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFuture(future);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_scanner_async();
      }
    }

    public void scanner_close(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_close_call method_call = new scanner_close_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_close_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_close_args args = new scanner_close_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_scanner_close();
      }
    }

    public void close_scanner(long scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_scanner_call method_call = new close_scanner_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_scanner_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public close_scanner_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_scanner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_scanner_args args = new close_scanner_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_scanner();
      }
    }

    public void async_scanner_cancel(long scanner, org.apache.thrift.async.AsyncMethodCallback<async_scanner_cancel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_scanner_cancel_call method_call = new async_scanner_cancel_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_scanner_cancel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public async_scanner_cancel_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<async_scanner_cancel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_scanner_cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_scanner_cancel_args args = new async_scanner_cancel_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_scanner_cancel();
      }
    }

    public void cancel_scanner_async(long scanner, org.apache.thrift.async.AsyncMethodCallback<cancel_scanner_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancel_scanner_async_call method_call = new cancel_scanner_async_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancel_scanner_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public cancel_scanner_async_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<cancel_scanner_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancel_scanner_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancel_scanner_async_args args = new cancel_scanner_async_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancel_scanner_async();
      }
    }

    public void async_scanner_close(long scanner, org.apache.thrift.async.AsyncMethodCallback<async_scanner_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_scanner_close_call method_call = new async_scanner_close_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_scanner_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public async_scanner_close_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<async_scanner_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_scanner_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_scanner_close_args args = new async_scanner_close_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_scanner_close();
      }
    }

    public void close_scanner_async(long scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_scanner_async_call method_call = new close_scanner_async_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_scanner_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public close_scanner_async_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<close_scanner_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_scanner_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_scanner_async_args args = new close_scanner_async_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_scanner_async();
      }
    }

    public void scanner_get_cells(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_cells_call method_call = new scanner_get_cells_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_cells_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_cells_args args = new scanner_get_cells_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_cells();
      }
    }

    public void next_cells(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_cells_call method_call = new next_cells_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_cells_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_cells_args args = new next_cells_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_cells();
      }
    }

    public void scanner_get_cells_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_cells_as_arrays_call method_call = new scanner_get_cells_as_arrays_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_cells_as_arrays_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_cells_as_arrays_args args = new scanner_get_cells_as_arrays_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_cells_as_arrays();
      }
    }

    public void next_cells_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_cells_as_arrays_call method_call = new next_cells_as_arrays_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_cells_as_arrays_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_cells_as_arrays_args args = new next_cells_as_arrays_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_cells_as_arrays();
      }
    }

    public void scanner_get_cells_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_cells_serialized_call method_call = new scanner_get_cells_serialized_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_cells_serialized_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_cells_serialized_args args = new scanner_get_cells_serialized_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_cells_serialized();
      }
    }

    public void next_cells_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_cells_serialized_call method_call = new next_cells_serialized_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_cells_serialized_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_cells_serialized_args args = new next_cells_serialized_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_cells_serialized();
      }
    }

    public void scanner_get_row(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_row_call method_call = new scanner_get_row_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_row_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_row_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_row", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_row_args args = new scanner_get_row_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_row();
      }
    }

    public void next_row(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_row_call method_call = new next_row_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_row_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_row_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_row", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_row_args args = new next_row_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_row();
      }
    }

    public void scanner_get_row_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_row_as_arrays_call method_call = new scanner_get_row_as_arrays_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_row_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_row_as_arrays_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_row_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_row_as_arrays_args args = new scanner_get_row_as_arrays_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_row_as_arrays();
      }
    }

    public void next_row_as_arrays(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_row_as_arrays_call method_call = new next_row_as_arrays_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_row_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_row_as_arrays_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_row_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_row_as_arrays_args args = new next_row_as_arrays_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_row_as_arrays();
      }
    }

    public void scanner_get_row_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      scanner_get_row_serialized_call method_call = new scanner_get_row_serialized_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class scanner_get_row_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public scanner_get_row_serialized_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<scanner_get_row_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scanner_get_row_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        scanner_get_row_serialized_args args = new scanner_get_row_serialized_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_scanner_get_row_serialized();
      }
    }

    public void next_row_serialized(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      next_row_serialized_call method_call = new next_row_serialized_call(scanner, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class next_row_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long scanner;
      public next_row_serialized_call(long scanner, org.apache.thrift.async.AsyncMethodCallback<next_row_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.scanner = scanner;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("next_row_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        next_row_serialized_args args = new next_row_serialized_args();
        args.setScanner(scanner);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_next_row_serialized();
      }
    }

    public void get_row(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_row_call method_call = new get_row_call(ns, table_name, row, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_row_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String row;
      public get_row_call(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.row = row;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_row", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_row_args args = new get_row_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setRow(row);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_row();
      }
    }

    public void get_row_as_arrays(long ns, String name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_row_as_arrays_call method_call = new get_row_as_arrays_call(ns, name, row, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_row_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private String row;
      public get_row_as_arrays_call(long ns, String name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.row = row;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_row_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_row_as_arrays_args args = new get_row_as_arrays_args();
        args.setNs(ns);
        args.setName(name);
        args.setRow(row);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_row_as_arrays();
      }
    }

    public void get_row_serialized(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_row_serialized_call method_call = new get_row_serialized_call(ns, table_name, row, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_row_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String row;
      public get_row_serialized_call(long ns, String table_name, String row, org.apache.thrift.async.AsyncMethodCallback<get_row_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.row = row;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_row_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_row_serialized_args args = new get_row_serialized_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setRow(row);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_row_serialized();
      }
    }

    public void get_cell(long ns, String table_name, String row, String column, org.apache.thrift.async.AsyncMethodCallback<get_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cell_call method_call = new get_cell_call(ns, table_name, row, column, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private String row;
      private String column;
      public get_cell_call(long ns, String table_name, String row, String column, org.apache.thrift.async.AsyncMethodCallback<get_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.row = row;
        this.column = column;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cell_args args = new get_cell_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setRow(row);
        args.setColumn(column);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cell();
      }
    }

    public void get_cells(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cells_call method_call = new get_cells_call(ns, table_name, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private ScanSpec scan_spec;
      public get_cells_call(long ns, String table_name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cells_args args = new get_cells_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Cell> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cells();
      }
    }

    public void get_cells_as_arrays(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cells_as_arrays_call method_call = new get_cells_as_arrays_call(ns, name, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private ScanSpec scan_spec;
      public get_cells_as_arrays_call(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cells_as_arrays_args args = new get_cells_as_arrays_args();
        args.setNs(ns);
        args.setName(name);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<List<String>> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cells_as_arrays();
      }
    }

    public void get_cells_serialized(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_cells_serialized_call method_call = new get_cells_serialized_call(ns, name, scan_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private ScanSpec scan_spec;
      public get_cells_serialized_call(long ns, String name, ScanSpec scan_spec, org.apache.thrift.async.AsyncMethodCallback<get_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.scan_spec = scan_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_cells_serialized_args args = new get_cells_serialized_args();
        args.setNs(ns);
        args.setName(name);
        args.setScan_spec(scan_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_cells_serialized();
      }
    }

    public void shared_mutator_refresh(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_refresh_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shared_mutator_refresh_call method_call = new shared_mutator_refresh_call(ns, table_name, mutate_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shared_mutator_refresh_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      public shared_mutator_refresh_call(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_refresh_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shared_mutator_refresh", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shared_mutator_refresh_args args = new shared_mutator_refresh_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shared_mutator_refresh();
      }
    }

    public void refresh_shared_mutator(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<refresh_shared_mutator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refresh_shared_mutator_call method_call = new refresh_shared_mutator_call(ns, table_name, mutate_spec, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refresh_shared_mutator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      public refresh_shared_mutator_call(long ns, String table_name, MutateSpec mutate_spec, org.apache.thrift.async.AsyncMethodCallback<refresh_shared_mutator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refresh_shared_mutator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refresh_shared_mutator_args args = new refresh_shared_mutator_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_refresh_shared_mutator();
      }
    }

    public void shared_mutator_set_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shared_mutator_set_cells_call method_call = new shared_mutator_set_cells_call(ns, table_name, mutate_spec, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shared_mutator_set_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<Cell> cells;
      public shared_mutator_set_cells_call(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shared_mutator_set_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shared_mutator_set_cells_args args = new shared_mutator_set_cells_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shared_mutator_set_cells();
      }
    }

    public void offer_cells(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<offer_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offer_cells_call method_call = new offer_cells_call(ns, table_name, mutate_spec, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offer_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<Cell> cells;
      public offer_cells_call(long ns, String table_name, MutateSpec mutate_spec, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<offer_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offer_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offer_cells_args args = new offer_cells_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offer_cells();
      }
    }

    public void shared_mutator_set_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shared_mutator_set_cells_as_arrays_call method_call = new shared_mutator_set_cells_as_arrays_call(ns, table_name, mutate_spec, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shared_mutator_set_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<List<String>> cells;
      public shared_mutator_set_cells_as_arrays_call(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shared_mutator_set_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shared_mutator_set_cells_as_arrays_args args = new shared_mutator_set_cells_as_arrays_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shared_mutator_set_cells_as_arrays();
      }
    }

    public void offer_cells_as_arrays(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<offer_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offer_cells_as_arrays_call method_call = new offer_cells_as_arrays_call(ns, table_name, mutate_spec, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offer_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<List<String>> cells;
      public offer_cells_as_arrays_call(long ns, String table_name, MutateSpec mutate_spec, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<offer_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offer_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offer_cells_as_arrays_args args = new offer_cells_as_arrays_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offer_cells_as_arrays();
      }
    }

    public void shared_mutator_set_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shared_mutator_set_cell_call method_call = new shared_mutator_set_cell_call(ns, table_name, mutate_spec, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shared_mutator_set_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private Cell cell;
      public shared_mutator_set_cell_call(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shared_mutator_set_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shared_mutator_set_cell_args args = new shared_mutator_set_cell_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shared_mutator_set_cell();
      }
    }

    public void offer_cell(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<offer_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offer_cell_call method_call = new offer_cell_call(ns, table_name, mutate_spec, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offer_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private Cell cell;
      public offer_cell_call(long ns, String table_name, MutateSpec mutate_spec, Cell cell, org.apache.thrift.async.AsyncMethodCallback<offer_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offer_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offer_cell_args args = new offer_cell_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offer_cell();
      }
    }

    public void shared_mutator_set_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shared_mutator_set_cell_as_array_call method_call = new shared_mutator_set_cell_as_array_call(ns, table_name, mutate_spec, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shared_mutator_set_cell_as_array_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<String> cell;
      public shared_mutator_set_cell_as_array_call(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<shared_mutator_set_cell_as_array_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shared_mutator_set_cell_as_array", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shared_mutator_set_cell_as_array_args args = new shared_mutator_set_cell_as_array_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_shared_mutator_set_cell_as_array();
      }
    }

    public void offer_cell_as_array(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<offer_cell_as_array_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      offer_cell_as_array_call method_call = new offer_cell_as_array_call(ns, table_name, mutate_spec, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class offer_cell_as_array_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private MutateSpec mutate_spec;
      private List<String> cell;
      public offer_cell_as_array_call(long ns, String table_name, MutateSpec mutate_spec, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<offer_cell_as_array_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.mutate_spec = mutate_spec;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("offer_cell_as_array", org.apache.thrift.protocol.TMessageType.CALL, 0));
        offer_cell_as_array_args args = new offer_cell_as_array_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setMutate_spec(mutate_spec);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_offer_cell_as_array();
      }
    }

    public void mutator_open(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<mutator_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_open_call method_call = new mutator_open_call(ns, table_name, flags, flush_interval, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private int flags;
      private int flush_interval;
      public mutator_open_call(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<mutator_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.flags = flags;
        this.flush_interval = flush_interval;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_open_args args = new mutator_open_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFlags(flags);
        args.setFlush_interval(flush_interval);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mutator_open();
      }
    }

    public void open_mutator(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<open_mutator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_mutator_call method_call = new open_mutator_call(ns, table_name, flags, flush_interval, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_mutator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private int flags;
      private int flush_interval;
      public open_mutator_call(long ns, String table_name, int flags, int flush_interval, org.apache.thrift.async.AsyncMethodCallback<open_mutator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.flags = flags;
        this.flush_interval = flush_interval;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_mutator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_mutator_args args = new open_mutator_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFlags(flags);
        args.setFlush_interval(flush_interval);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_mutator();
      }
    }

    public void async_mutator_open(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<async_mutator_open_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_open_call method_call = new async_mutator_open_call(ns, table_name, future, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_open_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private long future;
      private int flags;
      public async_mutator_open_call(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<async_mutator_open_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.future = future;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_open", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_open_args args = new async_mutator_open_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFuture(future);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_async_mutator_open();
      }
    }

    public void open_mutator_async(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<open_mutator_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      open_mutator_async_call method_call = new open_mutator_async_call(ns, table_name, future, flags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class open_mutator_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private long future;
      private int flags;
      public open_mutator_async_call(long ns, String table_name, long future, int flags, org.apache.thrift.async.AsyncMethodCallback<open_mutator_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.future = future;
        this.flags = flags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("open_mutator_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        open_mutator_async_args args = new open_mutator_async_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setFuture(future);
        args.setFlags(flags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_open_mutator_async();
      }
    }

    public void mutator_close(long mutator, org.apache.thrift.async.AsyncMethodCallback<mutator_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_close_call method_call = new mutator_close_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public mutator_close_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<mutator_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_close_args args = new mutator_close_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_close();
      }
    }

    public void close_mutator(long mutator, org.apache.thrift.async.AsyncMethodCallback<close_mutator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_mutator_call method_call = new close_mutator_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_mutator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public close_mutator_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<close_mutator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_mutator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_mutator_args args = new close_mutator_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_mutator();
      }
    }

    public void async_mutator_cancel(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_cancel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_cancel_call method_call = new async_mutator_cancel_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_cancel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public async_mutator_cancel_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_cancel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_cancel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_cancel_args args = new async_mutator_cancel_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_cancel();
      }
    }

    public void cancel_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<cancel_mutator_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancel_mutator_async_call method_call = new cancel_mutator_async_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancel_mutator_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public cancel_mutator_async_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<cancel_mutator_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancel_mutator_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancel_mutator_async_args args = new cancel_mutator_async_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_cancel_mutator_async();
      }
    }

    public void async_mutator_close(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_close_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_close_call method_call = new async_mutator_close_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_close_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public async_mutator_close_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_close_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_close", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_close_args args = new async_mutator_close_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_close();
      }
    }

    public void close_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<close_mutator_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      close_mutator_async_call method_call = new close_mutator_async_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class close_mutator_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public close_mutator_async_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<close_mutator_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("close_mutator_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        close_mutator_async_args args = new close_mutator_async_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_close_mutator_async();
      }
    }

    public void mutator_set_cell(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_set_cell_call method_call = new mutator_set_cell_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_set_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private Cell cell;
      public mutator_set_cell_call(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_set_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_set_cell_args args = new mutator_set_cell_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_set_cell();
      }
    }

    public void set_cell(long ns, String table_name, Cell cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cell_call method_call = new set_cell_call(ns, table_name, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private Cell cell;
      public set_cell_call(long ns, String table_name, Cell cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cell_args args = new set_cell_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cell();
      }
    }

    public void mutator_set_cell_as_array(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_set_cell_as_array_call method_call = new mutator_set_cell_as_array_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_set_cell_as_array_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<String> cell;
      public mutator_set_cell_as_array_call(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cell_as_array_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_set_cell_as_array", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_set_cell_as_array_args args = new mutator_set_cell_as_array_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_set_cell_as_array();
      }
    }

    public void set_cell_as_array(long ns, String table_name, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cell_as_array_call method_call = new set_cell_as_array_call(ns, table_name, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cell_as_array_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private List<String> cell;
      public set_cell_as_array_call(long ns, String table_name, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_as_array_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cell_as_array", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cell_as_array_args args = new set_cell_as_array_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cell_as_array();
      }
    }

    public void mutator_set_cells(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_set_cells_call method_call = new mutator_set_cells_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_set_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<Cell> cells;
      public mutator_set_cells_call(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_set_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_set_cells_args args = new mutator_set_cells_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_set_cells();
      }
    }

    public void set_cells(long ns, String table_name, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_call method_call = new set_cells_call(ns, table_name, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private List<Cell> cells;
      public set_cells_call(long ns, String table_name, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_args args = new set_cells_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells();
      }
    }

    public void mutator_set_cells_as_arrays(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_set_cells_as_arrays_call method_call = new mutator_set_cells_as_arrays_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_set_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<List<String>> cells;
      public mutator_set_cells_as_arrays_call(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_set_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_set_cells_as_arrays_args args = new mutator_set_cells_as_arrays_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_set_cells_as_arrays();
      }
    }

    public void set_cells_as_arrays(long ns, String table_name, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_as_arrays_call method_call = new set_cells_as_arrays_call(ns, table_name, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private List<List<String>> cells;
      public set_cells_as_arrays_call(long ns, String table_name, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_as_arrays_args args = new set_cells_as_arrays_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells_as_arrays();
      }
    }

    public void mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_set_cells_serialized_call method_call = new mutator_set_cells_serialized_call(mutator, cells, flush, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_set_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private ByteBuffer cells;
      private boolean flush;
      public mutator_set_cells_serialized_call(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<mutator_set_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
        this.flush = flush;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_set_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_set_cells_serialized_args args = new mutator_set_cells_serialized_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.setFlush(flush);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_set_cells_serialized();
      }
    }

    public void set_cells_serialized(long ns, String table_name, ByteBuffer cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_serialized_call method_call = new set_cells_serialized_call(ns, table_name, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private ByteBuffer cells;
      public set_cells_serialized_call(long ns, String table_name, ByteBuffer cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_serialized_args args = new set_cells_serialized_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells_serialized();
      }
    }

    public void mutator_flush(long mutator, org.apache.thrift.async.AsyncMethodCallback<mutator_flush_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mutator_flush_call method_call = new mutator_flush_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mutator_flush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public mutator_flush_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<mutator_flush_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mutator_flush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mutator_flush_args args = new mutator_flush_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_mutator_flush();
      }
    }

    public void flush_mutator(long mutator, org.apache.thrift.async.AsyncMethodCallback<flush_mutator_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      flush_mutator_call method_call = new flush_mutator_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class flush_mutator_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public flush_mutator_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<flush_mutator_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flush_mutator", org.apache.thrift.protocol.TMessageType.CALL, 0));
        flush_mutator_args args = new flush_mutator_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_flush_mutator();
      }
    }

    public void async_mutator_set_cell(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cell_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_set_cell_call method_call = new async_mutator_set_cell_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_set_cell_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private Cell cell;
      public async_mutator_set_cell_call(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cell_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_set_cell", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_set_cell_args args = new async_mutator_set_cell_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_set_cell();
      }
    }

    public void set_cell_async(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cell_async_call method_call = new set_cell_async_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cell_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private Cell cell;
      public set_cell_async_call(long mutator, Cell cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cell_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cell_async_args args = new set_cell_async_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cell_async();
      }
    }

    public void async_mutator_set_cell_as_array(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cell_as_array_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_set_cell_as_array_call method_call = new async_mutator_set_cell_as_array_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_set_cell_as_array_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<String> cell;
      public async_mutator_set_cell_as_array_call(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cell_as_array_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_set_cell_as_array", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_set_cell_as_array_args args = new async_mutator_set_cell_as_array_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_set_cell_as_array();
      }
    }

    public void set_cell_as_array_async(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_as_array_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cell_as_array_async_call method_call = new set_cell_as_array_async_call(mutator, cell, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cell_as_array_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<String> cell;
      public set_cell_as_array_async_call(long mutator, List<String> cell, org.apache.thrift.async.AsyncMethodCallback<set_cell_as_array_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cell = cell;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cell_as_array_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cell_as_array_async_args args = new set_cell_as_array_async_args();
        args.setMutator(mutator);
        args.setCell(cell);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cell_as_array_async();
      }
    }

    public void async_mutator_set_cells(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_set_cells_call method_call = new async_mutator_set_cells_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_set_cells_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<Cell> cells;
      public async_mutator_set_cells_call(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_set_cells", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_set_cells_args args = new async_mutator_set_cells_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_set_cells();
      }
    }

    public void set_cells_async(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_async_call method_call = new set_cells_async_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<Cell> cells;
      public set_cells_async_call(long mutator, List<Cell> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_async_args args = new set_cells_async_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells_async();
      }
    }

    public void async_mutator_set_cells_as_arrays(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_as_arrays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_set_cells_as_arrays_call method_call = new async_mutator_set_cells_as_arrays_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_set_cells_as_arrays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<List<String>> cells;
      public async_mutator_set_cells_as_arrays_call(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_as_arrays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_set_cells_as_arrays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_set_cells_as_arrays_args args = new async_mutator_set_cells_as_arrays_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_set_cells_as_arrays();
      }
    }

    public void set_cells_as_arrays_async(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_as_arrays_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_as_arrays_async_call method_call = new set_cells_as_arrays_async_call(mutator, cells, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_as_arrays_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private List<List<String>> cells;
      public set_cells_as_arrays_async_call(long mutator, List<List<String>> cells, org.apache.thrift.async.AsyncMethodCallback<set_cells_as_arrays_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells_as_arrays_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_as_arrays_async_args args = new set_cells_as_arrays_async_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells_as_arrays_async();
      }
    }

    public void async_mutator_set_cells_serialized(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_serialized_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_set_cells_serialized_call method_call = new async_mutator_set_cells_serialized_call(mutator, cells, flush, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_set_cells_serialized_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private ByteBuffer cells;
      private boolean flush;
      public async_mutator_set_cells_serialized_call(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<async_mutator_set_cells_serialized_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
        this.flush = flush;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_set_cells_serialized", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_set_cells_serialized_args args = new async_mutator_set_cells_serialized_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.setFlush(flush);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_set_cells_serialized();
      }
    }

    public void set_cells_serialized_async(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<set_cells_serialized_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_cells_serialized_async_call method_call = new set_cells_serialized_async_call(mutator, cells, flush, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class set_cells_serialized_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      private ByteBuffer cells;
      private boolean flush;
      public set_cells_serialized_async_call(long mutator, ByteBuffer cells, boolean flush, org.apache.thrift.async.AsyncMethodCallback<set_cells_serialized_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
        this.cells = cells;
        this.flush = flush;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_cells_serialized_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_cells_serialized_async_args args = new set_cells_serialized_async_args();
        args.setMutator(mutator);
        args.setCells(cells);
        args.setFlush(flush);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_set_cells_serialized_async();
      }
    }

    public void async_mutator_flush(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_flush_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      async_mutator_flush_call method_call = new async_mutator_flush_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class async_mutator_flush_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public async_mutator_flush_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<async_mutator_flush_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("async_mutator_flush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        async_mutator_flush_args args = new async_mutator_flush_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_async_mutator_flush();
      }
    }

    public void flush_mutator_async(long mutator, org.apache.thrift.async.AsyncMethodCallback<flush_mutator_async_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      flush_mutator_async_call method_call = new flush_mutator_async_call(mutator, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class flush_mutator_async_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long mutator;
      public flush_mutator_async_call(long mutator, org.apache.thrift.async.AsyncMethodCallback<flush_mutator_async_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutator = mutator;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("flush_mutator_async", org.apache.thrift.protocol.TMessageType.CALL, 0));
        flush_mutator_async_args args = new flush_mutator_async_args();
        args.setMutator(mutator);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_flush_mutator_async();
      }
    }

    public void namespace_exists(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_exists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_exists_call method_call = new namespace_exists_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_exists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public namespace_exists_call(String ns, org.apache.thrift.async.AsyncMethodCallback<namespace_exists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_exists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_exists_args args = new namespace_exists_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_namespace_exists();
      }
    }

    public void exists_namespace(String ns, org.apache.thrift.async.AsyncMethodCallback<exists_namespace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exists_namespace_call method_call = new exists_namespace_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exists_namespace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      public exists_namespace_call(String ns, org.apache.thrift.async.AsyncMethodCallback<exists_namespace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exists_namespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exists_namespace_args args = new exists_namespace_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exists_namespace();
      }
    }

    public void exists_table(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<exists_table_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exists_table_call method_call = new exists_table_call(ns, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exists_table_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      public exists_table_call(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<exists_table_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exists_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exists_table_args args = new exists_table_args();
        args.setNs(ns);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exists_table();
      }
    }

    public void table_exists(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<table_exists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_exists_call method_call = new table_exists_call(ns, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_exists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      public table_exists_call(long ns, String name, org.apache.thrift.async.AsyncMethodCallback<table_exists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_exists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_exists_args args = new table_exists_args();
        args.setNs(ns);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_exists();
      }
    }

    public void table_get_id(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_id_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_get_id_call method_call = new table_get_id_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_get_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public table_get_id_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_id_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_get_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_get_id_args args = new table_get_id_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_get_id();
      }
    }

    public void get_table_id(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_table_id_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_table_id_call method_call = new get_table_id_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_table_id_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public get_table_id_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_table_id_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_table_id", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_table_id_args args = new get_table_id_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_table_id();
      }
    }

    public void table_get_schema_str(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_str_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_get_schema_str_call method_call = new table_get_schema_str_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_get_schema_str_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public table_get_schema_str_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_str_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_get_schema_str", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_get_schema_str_args args = new table_get_schema_str_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_get_schema_str();
      }
    }

    public void get_schema_str(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_str_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_schema_str_call method_call = new get_schema_str_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_schema_str_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public get_schema_str_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_str_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_schema_str", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_schema_str_args args = new get_schema_str_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_schema_str();
      }
    }

    public void table_get_schema_str_with_ids(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_str_with_ids_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_get_schema_str_with_ids_call method_call = new table_get_schema_str_with_ids_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_get_schema_str_with_ids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public table_get_schema_str_with_ids_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_str_with_ids_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_get_schema_str_with_ids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_get_schema_str_with_ids_args args = new table_get_schema_str_with_ids_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_get_schema_str_with_ids();
      }
    }

    public void get_schema_str_with_ids(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_str_with_ids_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_schema_str_with_ids_call method_call = new get_schema_str_with_ids_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_schema_str_with_ids_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public get_schema_str_with_ids_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_str_with_ids_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_schema_str_with_ids", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_schema_str_with_ids_args args = new get_schema_str_with_ids_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_schema_str_with_ids();
      }
    }

    public void table_get_schema(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_get_schema_call method_call = new table_get_schema_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_get_schema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public table_get_schema_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_schema_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_get_schema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_get_schema_args args = new table_get_schema_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Schema getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_get_schema();
      }
    }

    public void get_schema(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_schema_call method_call = new get_schema_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_schema_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public get_schema_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_schema_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_schema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_schema_args args = new get_schema_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Schema getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_schema();
      }
    }

    public void get_tables(long ns, org.apache.thrift.async.AsyncMethodCallback<get_tables_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_tables_call method_call = new get_tables_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_tables_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      public get_tables_call(long ns, org.apache.thrift.async.AsyncMethodCallback<get_tables_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_tables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_tables_args args = new get_tables_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_tables();
      }
    }

    public void namespace_get_listing(long ns, org.apache.thrift.async.AsyncMethodCallback<namespace_get_listing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_get_listing_call method_call = new namespace_get_listing_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_get_listing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      public namespace_get_listing_call(long ns, org.apache.thrift.async.AsyncMethodCallback<namespace_get_listing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_get_listing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_get_listing_args args = new namespace_get_listing_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NamespaceListing> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_namespace_get_listing();
      }
    }

    public void get_listing(long ns, org.apache.thrift.async.AsyncMethodCallback<get_listing_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_listing_call method_call = new get_listing_call(ns, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_listing_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      public get_listing_call(long ns, org.apache.thrift.async.AsyncMethodCallback<get_listing_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_listing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_listing_args args = new get_listing_args();
        args.setNs(ns);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NamespaceListing> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_listing();
      }
    }

    public void table_get_splits(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_splits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_get_splits_call method_call = new table_get_splits_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_get_splits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public table_get_splits_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<table_get_splits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_get_splits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_get_splits_args args = new table_get_splits_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TableSplit> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_table_get_splits();
      }
    }

    public void get_table_splits(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_table_splits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_table_splits_call method_call = new get_table_splits_call(ns, table_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_table_splits_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      public get_table_splits_call(long ns, String table_name, org.apache.thrift.async.AsyncMethodCallback<get_table_splits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_table_splits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_table_splits_args args = new get_table_splits_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TableSplit> getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get_table_splits();
      }
    }

    public void namespace_drop(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<namespace_drop_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      namespace_drop_call method_call = new namespace_drop_call(ns, if_exists, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class namespace_drop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      private boolean if_exists;
      public namespace_drop_call(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<namespace_drop_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.if_exists = if_exists;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("namespace_drop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        namespace_drop_args args = new namespace_drop_args();
        args.setNs(ns);
        args.setIf_exists(if_exists);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_namespace_drop();
      }
    }

    public void drop_namespace(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<drop_namespace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drop_namespace_call method_call = new drop_namespace_call(ns, if_exists, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_namespace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ns;
      private boolean if_exists;
      public drop_namespace_call(String ns, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<drop_namespace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.if_exists = if_exists;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drop_namespace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drop_namespace_args args = new drop_namespace_args();
        args.setNs(ns);
        args.setIf_exists(if_exists);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_drop_namespace();
      }
    }

    public void rename_table(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<rename_table_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rename_table_call method_call = new rename_table_call(ns, name, new_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rename_table_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private String new_name;
      public rename_table_call(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<rename_table_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.new_name = new_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rename_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rename_table_args args = new rename_table_args();
        args.setNs(ns);
        args.setName(name);
        args.setNew_name(new_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_rename_table();
      }
    }

    public void table_rename(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<table_rename_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_rename_call method_call = new table_rename_call(ns, name, new_name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_rename_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private String new_name;
      public table_rename_call(long ns, String name, String new_name, org.apache.thrift.async.AsyncMethodCallback<table_rename_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.new_name = new_name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_rename", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_rename_args args = new table_rename_args();
        args.setNs(ns);
        args.setName(name);
        args.setNew_name(new_name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_table_rename();
      }
    }

    public void drop_table(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<drop_table_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drop_table_call method_call = new drop_table_call(ns, name, if_exists, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class drop_table_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private boolean if_exists;
      public drop_table_call(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<drop_table_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.if_exists = if_exists;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drop_table", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drop_table_args args = new drop_table_args();
        args.setNs(ns);
        args.setName(name);
        args.setIf_exists(if_exists);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_drop_table();
      }
    }

    public void table_drop(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<table_drop_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      table_drop_call method_call = new table_drop_call(ns, name, if_exists, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class table_drop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String name;
      private boolean if_exists;
      public table_drop_call(long ns, String name, boolean if_exists, org.apache.thrift.async.AsyncMethodCallback<table_drop_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.name = name;
        this.if_exists = if_exists;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("table_drop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        table_drop_args args = new table_drop_args();
        args.setNs(ns);
        args.setName(name);
        args.setIf_exists(if_exists);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_table_drop();
      }
    }

    public void generate_guid(org.apache.thrift.async.AsyncMethodCallback<generate_guid_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      generate_guid_call method_call = new generate_guid_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class generate_guid_call extends org.apache.thrift.async.TAsyncMethodCall {
      public generate_guid_call(org.apache.thrift.async.AsyncMethodCallback<generate_guid_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("generate_guid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        generate_guid_args args = new generate_guid_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_generate_guid();
      }
    }

    public void create_cell_unique(long ns, String table_name, Key key, String value, org.apache.thrift.async.AsyncMethodCallback<create_cell_unique_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_cell_unique_call method_call = new create_cell_unique_call(ns, table_name, key, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_cell_unique_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long ns;
      private String table_name;
      private Key key;
      private String value;
      public create_cell_unique_call(long ns, String table_name, Key key, String value, org.apache.thrift.async.AsyncMethodCallback<create_cell_unique_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ns = ns;
        this.table_name = table_name;
        this.key = key;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_cell_unique", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_cell_unique_args args = new create_cell_unique_args();
        args.setNs(ns);
        args.setTable_name(table_name);
        args.setKey(key);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws ClientException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_cell_unique();
      }
    }

    public void error_get_text(int error_code, org.apache.thrift.async.AsyncMethodCallback<error_get_text_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      error_get_text_call method_call = new error_get_text_call(error_code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class error_get_text_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int error_code;
      public error_get_text_call(int error_code, org.apache.thrift.async.AsyncMethodCallback<error_get_text_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.error_code = error_code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("error_get_text", org.apache.thrift.protocol.TMessageType.CALL, 0));
        error_get_text_args args = new error_get_text_args();
        args.setError_code(error_code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_error_get_text();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("namespace_create", new namespace_create());
      processMap.put("create_namespace", new create_namespace());
      processMap.put("create_table", new create_table());
      processMap.put("table_create", new table_create());
      processMap.put("alter_table", new alter_table());
      processMap.put("table_alter", new table_alter());
      processMap.put("namespace_open", new namespace_open());
      processMap.put("open_namespace", new open_namespace());
      processMap.put("namespace_close", new namespace_close());
      processMap.put("close_namespace", new close_namespace());
      processMap.put("future_open", new future_open());
      processMap.put("open_future", new open_future());
      processMap.put("future_cancel", new future_cancel());
      processMap.put("cancel_future", new cancel_future());
      processMap.put("future_get_result", new future_get_result());
      processMap.put("get_future_result", new get_future_result());
      processMap.put("future_get_result_as_arrays", new future_get_result_as_arrays());
      processMap.put("get_future_result_as_arrays", new get_future_result_as_arrays());
      processMap.put("future_get_result_serialized", new future_get_result_serialized());
      processMap.put("get_future_result_serialized", new get_future_result_serialized());
      processMap.put("future_is_empty", new future_is_empty());
      processMap.put("future_is_full", new future_is_full());
      processMap.put("future_is_cancelled", new future_is_cancelled());
      processMap.put("future_has_outstanding", new future_has_outstanding());
      processMap.put("future_close", new future_close());
      processMap.put("close_future", new close_future());
      processMap.put("scanner_open", new scanner_open());
      processMap.put("open_scanner", new open_scanner());
      processMap.put("async_scanner_open", new async_scanner_open());
      processMap.put("open_scanner_async", new open_scanner_async());
      processMap.put("scanner_close", new scanner_close());
      processMap.put("close_scanner", new close_scanner());
      processMap.put("async_scanner_cancel", new async_scanner_cancel());
      processMap.put("cancel_scanner_async", new cancel_scanner_async());
      processMap.put("async_scanner_close", new async_scanner_close());
      processMap.put("close_scanner_async", new close_scanner_async());
      processMap.put("scanner_get_cells", new scanner_get_cells());
      processMap.put("next_cells", new next_cells());
      processMap.put("scanner_get_cells_as_arrays", new scanner_get_cells_as_arrays());
      processMap.put("next_cells_as_arrays", new next_cells_as_arrays());
      processMap.put("scanner_get_cells_serialized", new scanner_get_cells_serialized());
      processMap.put("next_cells_serialized", new next_cells_serialized());
      processMap.put("scanner_get_row", new scanner_get_row());
      processMap.put("next_row", new next_row());
      processMap.put("scanner_get_row_as_arrays", new scanner_get_row_as_arrays());
      processMap.put("next_row_as_arrays", new next_row_as_arrays());
      processMap.put("scanner_get_row_serialized", new scanner_get_row_serialized());
      processMap.put("next_row_serialized", new next_row_serialized());
      processMap.put("get_row", new get_row());
      processMap.put("get_row_as_arrays", new get_row_as_arrays());
      processMap.put("get_row_serialized", new get_row_serialized());
      processMap.put("get_cell", new get_cell());
      processMap.put("get_cells", new get_cells());
      processMap.put("get_cells_as_arrays", new get_cells_as_arrays());
      processMap.put("get_cells_serialized", new get_cells_serialized());
      processMap.put("shared_mutator_refresh", new shared_mutator_refresh());
      processMap.put("refresh_shared_mutator", new refresh_shared_mutator());
      processMap.put("shared_mutator_set_cells", new shared_mutator_set_cells());
      processMap.put("offer_cells", new offer_cells());
      processMap.put("shared_mutator_set_cells_as_arrays", new shared_mutator_set_cells_as_arrays());
      processMap.put("offer_cells_as_arrays", new offer_cells_as_arrays());
      processMap.put("shared_mutator_set_cell", new shared_mutator_set_cell());
      processMap.put("offer_cell", new offer_cell());
      processMap.put("shared_mutator_set_cell_as_array", new shared_mutator_set_cell_as_array());
      processMap.put("offer_cell_as_array", new offer_cell_as_array());
      processMap.put("mutator_open", new mutator_open());
      processMap.put("open_mutator", new open_mutator());
      processMap.put("async_mutator_open", new async_mutator_open());
      processMap.put("open_mutator_async", new open_mutator_async());
      processMap.put("mutator_close", new mutator_close());
      processMap.put("close_mutator", new close_mutator());
      processMap.put("async_mutator_cancel", new async_mutator_cancel());
      processMap.put("cancel_mutator_async", new cancel_mutator_async());
      processMap.put("async_mutator_close", new async_mutator_close());
      processMap.put("close_mutator_async", new close_mutator_async());
      processMap.put("mutator_set_cell", new mutator_set_cell());
      processMap.put("set_cell", new set_cell());
      processMap.put("mutator_set_cell_as_array", new mutator_set_cell_as_array());
      processMap.put("set_cell_as_array", new set_cell_as_array());
      processMap.put("mutator_set_cells", new mutator_set_cells());
      processMap.put("set_cells", new set_cells());
      processMap.put("mutator_set_cells_as_arrays", new mutator_set_cells_as_arrays());
      processMap.put("set_cells_as_arrays", new set_cells_as_arrays());
      processMap.put("mutator_set_cells_serialized", new mutator_set_cells_serialized());
      processMap.put("set_cells_serialized", new set_cells_serialized());
      processMap.put("mutator_flush", new mutator_flush());
      processMap.put("flush_mutator", new flush_mutator());
      processMap.put("async_mutator_set_cell", new async_mutator_set_cell());
      processMap.put("set_cell_async", new set_cell_async());
      processMap.put("async_mutator_set_cell_as_array", new async_mutator_set_cell_as_array());
      processMap.put("set_cell_as_array_async", new set_cell_as_array_async());
      processMap.put("async_mutator_set_cells", new async_mutator_set_cells());
      processMap.put("set_cells_async", new set_cells_async());
      processMap.put("async_mutator_set_cells_as_arrays", new async_mutator_set_cells_as_arrays());
      processMap.put("set_cells_as_arrays_async", new set_cells_as_arrays_async());
      processMap.put("async_mutator_set_cells_serialized", new async_mutator_set_cells_serialized());
      processMap.put("set_cells_serialized_async", new set_cells_serialized_async());
      processMap.put("async_mutator_flush", new async_mutator_flush());
      processMap.put("flush_mutator_async", new flush_mutator_async());
      processMap.put("namespace_exists", new namespace_exists());
      processMap.put("exists_namespace", new exists_namespace());
      processMap.put("exists_table", new exists_table());
      processMap.put("table_exists", new table_exists());
      processMap.put("table_get_id", new table_get_id());
      processMap.put("get_table_id", new get_table_id());
      processMap.put("table_get_schema_str", new table_get_schema_str());
      processMap.put("get_schema_str", new get_schema_str());
      processMap.put("table_get_schema_str_with_ids", new table_get_schema_str_with_ids());
      processMap.put("get_schema_str_with_ids", new get_schema_str_with_ids());
      processMap.put("table_get_schema", new table_get_schema());
      processMap.put("get_schema", new get_schema());
      processMap.put("get_tables", new get_tables());
      processMap.put("namespace_get_listing", new namespace_get_listing());
      processMap.put("get_listing", new get_listing());
      processMap.put("table_get_splits", new table_get_splits());
      processMap.put("get_table_splits", new get_table_splits());
      processMap.put("namespace_drop", new namespace_drop());
      processMap.put("drop_namespace", new drop_namespace());
      processMap.put("rename_table", new rename_table());
      processMap.put("table_rename", new table_rename());
      processMap.put("drop_table", new drop_table());
      processMap.put("table_drop", new table_drop());
      processMap.put("generate_guid", new generate_guid());
      processMap.put("create_cell_unique", new create_cell_unique());
      processMap.put("error_get_text", new error_get_text());
      return processMap;
    }

    private static class namespace_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_create_args> {
      public namespace_create() {
        super("namespace_create");
      }

      protected namespace_create_args getEmptyArgsInstance() {
        return new namespace_create_args();
      }

      protected namespace_create_result getResult(I iface, namespace_create_args args) throws org.apache.thrift.TException {
        namespace_create_result result = new namespace_create_result();
        try {
          iface.namespace_create(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class create_namespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_namespace_args> {
      public create_namespace() {
        super("create_namespace");
      }

      protected create_namespace_args getEmptyArgsInstance() {
        return new create_namespace_args();
      }

      protected create_namespace_result getResult(I iface, create_namespace_args args) throws org.apache.thrift.TException {
        create_namespace_result result = new create_namespace_result();
        try {
          iface.create_namespace(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class create_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_table_args> {
      public create_table() {
        super("create_table");
      }

      protected create_table_args getEmptyArgsInstance() {
        return new create_table_args();
      }

      protected create_table_result getResult(I iface, create_table_args args) throws org.apache.thrift.TException {
        create_table_result result = new create_table_result();
        try {
          iface.create_table(args.ns, args.table_name, args.schema);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_create_args> {
      public table_create() {
        super("table_create");
      }

      protected table_create_args getEmptyArgsInstance() {
        return new table_create_args();
      }

      protected table_create_result getResult(I iface, table_create_args args) throws org.apache.thrift.TException {
        table_create_result result = new table_create_result();
        try {
          iface.table_create(args.ns, args.table_name, args.schema);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class alter_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alter_table_args> {
      public alter_table() {
        super("alter_table");
      }

      protected alter_table_args getEmptyArgsInstance() {
        return new alter_table_args();
      }

      protected alter_table_result getResult(I iface, alter_table_args args) throws org.apache.thrift.TException {
        alter_table_result result = new alter_table_result();
        try {
          iface.alter_table(args.ns, args.table_name, args.schema);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_alter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_alter_args> {
      public table_alter() {
        super("table_alter");
      }

      protected table_alter_args getEmptyArgsInstance() {
        return new table_alter_args();
      }

      protected table_alter_result getResult(I iface, table_alter_args args) throws org.apache.thrift.TException {
        table_alter_result result = new table_alter_result();
        try {
          iface.table_alter(args.ns, args.table_name, args.schema);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class namespace_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_open_args> {
      public namespace_open() {
        super("namespace_open");
      }

      protected namespace_open_args getEmptyArgsInstance() {
        return new namespace_open_args();
      }

      protected namespace_open_result getResult(I iface, namespace_open_args args) throws org.apache.thrift.TException {
        namespace_open_result result = new namespace_open_result();
        try {
          result.success = iface.namespace_open(args.ns);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_namespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_namespace_args> {
      public open_namespace() {
        super("open_namespace");
      }

      protected open_namespace_args getEmptyArgsInstance() {
        return new open_namespace_args();
      }

      protected open_namespace_result getResult(I iface, open_namespace_args args) throws org.apache.thrift.TException {
        open_namespace_result result = new open_namespace_result();
        try {
          result.success = iface.open_namespace(args.ns);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class namespace_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_close_args> {
      public namespace_close() {
        super("namespace_close");
      }

      protected namespace_close_args getEmptyArgsInstance() {
        return new namespace_close_args();
      }

      protected namespace_close_result getResult(I iface, namespace_close_args args) throws org.apache.thrift.TException {
        namespace_close_result result = new namespace_close_result();
        try {
          iface.namespace_close(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_namespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_namespace_args> {
      public close_namespace() {
        super("close_namespace");
      }

      protected close_namespace_args getEmptyArgsInstance() {
        return new close_namespace_args();
      }

      protected close_namespace_result getResult(I iface, close_namespace_args args) throws org.apache.thrift.TException {
        close_namespace_result result = new close_namespace_result();
        try {
          iface.close_namespace(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_open_args> {
      public future_open() {
        super("future_open");
      }

      protected future_open_args getEmptyArgsInstance() {
        return new future_open_args();
      }

      protected future_open_result getResult(I iface, future_open_args args) throws org.apache.thrift.TException {
        future_open_result result = new future_open_result();
        try {
          result.success = iface.future_open(args.capacity);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_future<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_future_args> {
      public open_future() {
        super("open_future");
      }

      protected open_future_args getEmptyArgsInstance() {
        return new open_future_args();
      }

      protected open_future_result getResult(I iface, open_future_args args) throws org.apache.thrift.TException {
        open_future_result result = new open_future_result();
        try {
          result.success = iface.open_future(args.capacity);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_cancel_args> {
      public future_cancel() {
        super("future_cancel");
      }

      protected future_cancel_args getEmptyArgsInstance() {
        return new future_cancel_args();
      }

      protected future_cancel_result getResult(I iface, future_cancel_args args) throws org.apache.thrift.TException {
        future_cancel_result result = new future_cancel_result();
        try {
          iface.future_cancel(args.ff);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class cancel_future<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancel_future_args> {
      public cancel_future() {
        super("cancel_future");
      }

      protected cancel_future_args getEmptyArgsInstance() {
        return new cancel_future_args();
      }

      protected cancel_future_result getResult(I iface, cancel_future_args args) throws org.apache.thrift.TException {
        cancel_future_result result = new cancel_future_result();
        try {
          iface.cancel_future(args.ff);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_get_result<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_get_result_args> {
      public future_get_result() {
        super("future_get_result");
      }

      protected future_get_result_args getEmptyArgsInstance() {
        return new future_get_result_args();
      }

      protected future_get_result_result getResult(I iface, future_get_result_args args) throws org.apache.thrift.TException {
        future_get_result_result result = new future_get_result_result();
        try {
          result.success = iface.future_get_result(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_future_result<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_future_result_args> {
      public get_future_result() {
        super("get_future_result");
      }

      protected get_future_result_args getEmptyArgsInstance() {
        return new get_future_result_args();
      }

      protected get_future_result_result getResult(I iface, get_future_result_args args) throws org.apache.thrift.TException {
        get_future_result_result result = new get_future_result_result();
        try {
          result.success = iface.get_future_result(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_get_result_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_get_result_as_arrays_args> {
      public future_get_result_as_arrays() {
        super("future_get_result_as_arrays");
      }

      protected future_get_result_as_arrays_args getEmptyArgsInstance() {
        return new future_get_result_as_arrays_args();
      }

      protected future_get_result_as_arrays_result getResult(I iface, future_get_result_as_arrays_args args) throws org.apache.thrift.TException {
        future_get_result_as_arrays_result result = new future_get_result_as_arrays_result();
        try {
          result.success = iface.future_get_result_as_arrays(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_future_result_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_future_result_as_arrays_args> {
      public get_future_result_as_arrays() {
        super("get_future_result_as_arrays");
      }

      protected get_future_result_as_arrays_args getEmptyArgsInstance() {
        return new get_future_result_as_arrays_args();
      }

      protected get_future_result_as_arrays_result getResult(I iface, get_future_result_as_arrays_args args) throws org.apache.thrift.TException {
        get_future_result_as_arrays_result result = new get_future_result_as_arrays_result();
        try {
          result.success = iface.get_future_result_as_arrays(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_get_result_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_get_result_serialized_args> {
      public future_get_result_serialized() {
        super("future_get_result_serialized");
      }

      protected future_get_result_serialized_args getEmptyArgsInstance() {
        return new future_get_result_serialized_args();
      }

      protected future_get_result_serialized_result getResult(I iface, future_get_result_serialized_args args) throws org.apache.thrift.TException {
        future_get_result_serialized_result result = new future_get_result_serialized_result();
        try {
          result.success = iface.future_get_result_serialized(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_future_result_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_future_result_serialized_args> {
      public get_future_result_serialized() {
        super("get_future_result_serialized");
      }

      protected get_future_result_serialized_args getEmptyArgsInstance() {
        return new get_future_result_serialized_args();
      }

      protected get_future_result_serialized_result getResult(I iface, get_future_result_serialized_args args) throws org.apache.thrift.TException {
        get_future_result_serialized_result result = new get_future_result_serialized_result();
        try {
          result.success = iface.get_future_result_serialized(args.ff, args.timeout_millis);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_is_empty<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_is_empty_args> {
      public future_is_empty() {
        super("future_is_empty");
      }

      protected future_is_empty_args getEmptyArgsInstance() {
        return new future_is_empty_args();
      }

      protected future_is_empty_result getResult(I iface, future_is_empty_args args) throws org.apache.thrift.TException {
        future_is_empty_result result = new future_is_empty_result();
        try {
          result.success = iface.future_is_empty(args.ff);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_is_full<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_is_full_args> {
      public future_is_full() {
        super("future_is_full");
      }

      protected future_is_full_args getEmptyArgsInstance() {
        return new future_is_full_args();
      }

      protected future_is_full_result getResult(I iface, future_is_full_args args) throws org.apache.thrift.TException {
        future_is_full_result result = new future_is_full_result();
        try {
          result.success = iface.future_is_full(args.ff);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_is_cancelled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_is_cancelled_args> {
      public future_is_cancelled() {
        super("future_is_cancelled");
      }

      protected future_is_cancelled_args getEmptyArgsInstance() {
        return new future_is_cancelled_args();
      }

      protected future_is_cancelled_result getResult(I iface, future_is_cancelled_args args) throws org.apache.thrift.TException {
        future_is_cancelled_result result = new future_is_cancelled_result();
        try {
          result.success = iface.future_is_cancelled(args.ff);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_has_outstanding<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_has_outstanding_args> {
      public future_has_outstanding() {
        super("future_has_outstanding");
      }

      protected future_has_outstanding_args getEmptyArgsInstance() {
        return new future_has_outstanding_args();
      }

      protected future_has_outstanding_result getResult(I iface, future_has_outstanding_args args) throws org.apache.thrift.TException {
        future_has_outstanding_result result = new future_has_outstanding_result();
        try {
          result.success = iface.future_has_outstanding(args.ff);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class future_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, future_close_args> {
      public future_close() {
        super("future_close");
      }

      protected future_close_args getEmptyArgsInstance() {
        return new future_close_args();
      }

      protected future_close_result getResult(I iface, future_close_args args) throws org.apache.thrift.TException {
        future_close_result result = new future_close_result();
        try {
          iface.future_close(args.ff);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_future<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_future_args> {
      public close_future() {
        super("close_future");
      }

      protected close_future_args getEmptyArgsInstance() {
        return new close_future_args();
      }

      protected close_future_result getResult(I iface, close_future_args args) throws org.apache.thrift.TException {
        close_future_result result = new close_future_result();
        try {
          iface.close_future(args.ff);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_open_args> {
      public scanner_open() {
        super("scanner_open");
      }

      protected scanner_open_args getEmptyArgsInstance() {
        return new scanner_open_args();
      }

      protected scanner_open_result getResult(I iface, scanner_open_args args) throws org.apache.thrift.TException {
        scanner_open_result result = new scanner_open_result();
        try {
          result.success = iface.scanner_open(args.ns, args.table_name, args.scan_spec);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_scanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_scanner_args> {
      public open_scanner() {
        super("open_scanner");
      }

      protected open_scanner_args getEmptyArgsInstance() {
        return new open_scanner_args();
      }

      protected open_scanner_result getResult(I iface, open_scanner_args args) throws org.apache.thrift.TException {
        open_scanner_result result = new open_scanner_result();
        try {
          result.success = iface.open_scanner(args.ns, args.table_name, args.scan_spec);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_scanner_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_scanner_open_args> {
      public async_scanner_open() {
        super("async_scanner_open");
      }

      protected async_scanner_open_args getEmptyArgsInstance() {
        return new async_scanner_open_args();
      }

      protected async_scanner_open_result getResult(I iface, async_scanner_open_args args) throws org.apache.thrift.TException {
        async_scanner_open_result result = new async_scanner_open_result();
        try {
          result.success = iface.async_scanner_open(args.ns, args.table_name, args.future, args.scan_spec);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_scanner_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_scanner_async_args> {
      public open_scanner_async() {
        super("open_scanner_async");
      }

      protected open_scanner_async_args getEmptyArgsInstance() {
        return new open_scanner_async_args();
      }

      protected open_scanner_async_result getResult(I iface, open_scanner_async_args args) throws org.apache.thrift.TException {
        open_scanner_async_result result = new open_scanner_async_result();
        try {
          result.success = iface.open_scanner_async(args.ns, args.table_name, args.future, args.scan_spec);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_close_args> {
      public scanner_close() {
        super("scanner_close");
      }

      protected scanner_close_args getEmptyArgsInstance() {
        return new scanner_close_args();
      }

      protected scanner_close_result getResult(I iface, scanner_close_args args) throws org.apache.thrift.TException {
        scanner_close_result result = new scanner_close_result();
        try {
          iface.scanner_close(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_scanner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_scanner_args> {
      public close_scanner() {
        super("close_scanner");
      }

      protected close_scanner_args getEmptyArgsInstance() {
        return new close_scanner_args();
      }

      protected close_scanner_result getResult(I iface, close_scanner_args args) throws org.apache.thrift.TException {
        close_scanner_result result = new close_scanner_result();
        try {
          iface.close_scanner(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_scanner_cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_scanner_cancel_args> {
      public async_scanner_cancel() {
        super("async_scanner_cancel");
      }

      protected async_scanner_cancel_args getEmptyArgsInstance() {
        return new async_scanner_cancel_args();
      }

      protected async_scanner_cancel_result getResult(I iface, async_scanner_cancel_args args) throws org.apache.thrift.TException {
        async_scanner_cancel_result result = new async_scanner_cancel_result();
        try {
          iface.async_scanner_cancel(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class cancel_scanner_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancel_scanner_async_args> {
      public cancel_scanner_async() {
        super("cancel_scanner_async");
      }

      protected cancel_scanner_async_args getEmptyArgsInstance() {
        return new cancel_scanner_async_args();
      }

      protected cancel_scanner_async_result getResult(I iface, cancel_scanner_async_args args) throws org.apache.thrift.TException {
        cancel_scanner_async_result result = new cancel_scanner_async_result();
        try {
          iface.cancel_scanner_async(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_scanner_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_scanner_close_args> {
      public async_scanner_close() {
        super("async_scanner_close");
      }

      protected async_scanner_close_args getEmptyArgsInstance() {
        return new async_scanner_close_args();
      }

      protected async_scanner_close_result getResult(I iface, async_scanner_close_args args) throws org.apache.thrift.TException {
        async_scanner_close_result result = new async_scanner_close_result();
        try {
          iface.async_scanner_close(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_scanner_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_scanner_async_args> {
      public close_scanner_async() {
        super("close_scanner_async");
      }

      protected close_scanner_async_args getEmptyArgsInstance() {
        return new close_scanner_async_args();
      }

      protected close_scanner_async_result getResult(I iface, close_scanner_async_args args) throws org.apache.thrift.TException {
        close_scanner_async_result result = new close_scanner_async_result();
        try {
          iface.close_scanner_async(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_cells_args> {
      public scanner_get_cells() {
        super("scanner_get_cells");
      }

      protected scanner_get_cells_args getEmptyArgsInstance() {
        return new scanner_get_cells_args();
      }

      protected scanner_get_cells_result getResult(I iface, scanner_get_cells_args args) throws org.apache.thrift.TException {
        scanner_get_cells_result result = new scanner_get_cells_result();
        try {
          result.success = iface.scanner_get_cells(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_cells_args> {
      public next_cells() {
        super("next_cells");
      }

      protected next_cells_args getEmptyArgsInstance() {
        return new next_cells_args();
      }

      protected next_cells_result getResult(I iface, next_cells_args args) throws org.apache.thrift.TException {
        next_cells_result result = new next_cells_result();
        try {
          result.success = iface.next_cells(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_cells_as_arrays_args> {
      public scanner_get_cells_as_arrays() {
        super("scanner_get_cells_as_arrays");
      }

      protected scanner_get_cells_as_arrays_args getEmptyArgsInstance() {
        return new scanner_get_cells_as_arrays_args();
      }

      protected scanner_get_cells_as_arrays_result getResult(I iface, scanner_get_cells_as_arrays_args args) throws org.apache.thrift.TException {
        scanner_get_cells_as_arrays_result result = new scanner_get_cells_as_arrays_result();
        try {
          result.success = iface.scanner_get_cells_as_arrays(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_cells_as_arrays_args> {
      public next_cells_as_arrays() {
        super("next_cells_as_arrays");
      }

      protected next_cells_as_arrays_args getEmptyArgsInstance() {
        return new next_cells_as_arrays_args();
      }

      protected next_cells_as_arrays_result getResult(I iface, next_cells_as_arrays_args args) throws org.apache.thrift.TException {
        next_cells_as_arrays_result result = new next_cells_as_arrays_result();
        try {
          result.success = iface.next_cells_as_arrays(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_cells_serialized_args> {
      public scanner_get_cells_serialized() {
        super("scanner_get_cells_serialized");
      }

      protected scanner_get_cells_serialized_args getEmptyArgsInstance() {
        return new scanner_get_cells_serialized_args();
      }

      protected scanner_get_cells_serialized_result getResult(I iface, scanner_get_cells_serialized_args args) throws org.apache.thrift.TException {
        scanner_get_cells_serialized_result result = new scanner_get_cells_serialized_result();
        try {
          result.success = iface.scanner_get_cells_serialized(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_cells_serialized_args> {
      public next_cells_serialized() {
        super("next_cells_serialized");
      }

      protected next_cells_serialized_args getEmptyArgsInstance() {
        return new next_cells_serialized_args();
      }

      protected next_cells_serialized_result getResult(I iface, next_cells_serialized_args args) throws org.apache.thrift.TException {
        next_cells_serialized_result result = new next_cells_serialized_result();
        try {
          result.success = iface.next_cells_serialized(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_row<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_row_args> {
      public scanner_get_row() {
        super("scanner_get_row");
      }

      protected scanner_get_row_args getEmptyArgsInstance() {
        return new scanner_get_row_args();
      }

      protected scanner_get_row_result getResult(I iface, scanner_get_row_args args) throws org.apache.thrift.TException {
        scanner_get_row_result result = new scanner_get_row_result();
        try {
          result.success = iface.scanner_get_row(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_row<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_row_args> {
      public next_row() {
        super("next_row");
      }

      protected next_row_args getEmptyArgsInstance() {
        return new next_row_args();
      }

      protected next_row_result getResult(I iface, next_row_args args) throws org.apache.thrift.TException {
        next_row_result result = new next_row_result();
        try {
          result.success = iface.next_row(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_row_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_row_as_arrays_args> {
      public scanner_get_row_as_arrays() {
        super("scanner_get_row_as_arrays");
      }

      protected scanner_get_row_as_arrays_args getEmptyArgsInstance() {
        return new scanner_get_row_as_arrays_args();
      }

      protected scanner_get_row_as_arrays_result getResult(I iface, scanner_get_row_as_arrays_args args) throws org.apache.thrift.TException {
        scanner_get_row_as_arrays_result result = new scanner_get_row_as_arrays_result();
        try {
          result.success = iface.scanner_get_row_as_arrays(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_row_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_row_as_arrays_args> {
      public next_row_as_arrays() {
        super("next_row_as_arrays");
      }

      protected next_row_as_arrays_args getEmptyArgsInstance() {
        return new next_row_as_arrays_args();
      }

      protected next_row_as_arrays_result getResult(I iface, next_row_as_arrays_args args) throws org.apache.thrift.TException {
        next_row_as_arrays_result result = new next_row_as_arrays_result();
        try {
          result.success = iface.next_row_as_arrays(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class scanner_get_row_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, scanner_get_row_serialized_args> {
      public scanner_get_row_serialized() {
        super("scanner_get_row_serialized");
      }

      protected scanner_get_row_serialized_args getEmptyArgsInstance() {
        return new scanner_get_row_serialized_args();
      }

      protected scanner_get_row_serialized_result getResult(I iface, scanner_get_row_serialized_args args) throws org.apache.thrift.TException {
        scanner_get_row_serialized_result result = new scanner_get_row_serialized_result();
        try {
          result.success = iface.scanner_get_row_serialized(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class next_row_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, next_row_serialized_args> {
      public next_row_serialized() {
        super("next_row_serialized");
      }

      protected next_row_serialized_args getEmptyArgsInstance() {
        return new next_row_serialized_args();
      }

      protected next_row_serialized_result getResult(I iface, next_row_serialized_args args) throws org.apache.thrift.TException {
        next_row_serialized_result result = new next_row_serialized_result();
        try {
          result.success = iface.next_row_serialized(args.scanner);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_row<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_row_args> {
      public get_row() {
        super("get_row");
      }

      protected get_row_args getEmptyArgsInstance() {
        return new get_row_args();
      }

      protected get_row_result getResult(I iface, get_row_args args) throws org.apache.thrift.TException {
        get_row_result result = new get_row_result();
        try {
          result.success = iface.get_row(args.ns, args.table_name, args.row);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_row_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_row_as_arrays_args> {
      public get_row_as_arrays() {
        super("get_row_as_arrays");
      }

      protected get_row_as_arrays_args getEmptyArgsInstance() {
        return new get_row_as_arrays_args();
      }

      protected get_row_as_arrays_result getResult(I iface, get_row_as_arrays_args args) throws org.apache.thrift.TException {
        get_row_as_arrays_result result = new get_row_as_arrays_result();
        try {
          result.success = iface.get_row_as_arrays(args.ns, args.name, args.row);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_row_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_row_serialized_args> {
      public get_row_serialized() {
        super("get_row_serialized");
      }

      protected get_row_serialized_args getEmptyArgsInstance() {
        return new get_row_serialized_args();
      }

      protected get_row_serialized_result getResult(I iface, get_row_serialized_args args) throws org.apache.thrift.TException {
        get_row_serialized_result result = new get_row_serialized_result();
        try {
          result.success = iface.get_row_serialized(args.ns, args.table_name, args.row);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cell_args> {
      public get_cell() {
        super("get_cell");
      }

      protected get_cell_args getEmptyArgsInstance() {
        return new get_cell_args();
      }

      protected get_cell_result getResult(I iface, get_cell_args args) throws org.apache.thrift.TException {
        get_cell_result result = new get_cell_result();
        try {
          result.success = iface.get_cell(args.ns, args.table_name, args.row, args.column);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cells_args> {
      public get_cells() {
        super("get_cells");
      }

      protected get_cells_args getEmptyArgsInstance() {
        return new get_cells_args();
      }

      protected get_cells_result getResult(I iface, get_cells_args args) throws org.apache.thrift.TException {
        get_cells_result result = new get_cells_result();
        try {
          result.success = iface.get_cells(args.ns, args.table_name, args.scan_spec);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cells_as_arrays_args> {
      public get_cells_as_arrays() {
        super("get_cells_as_arrays");
      }

      protected get_cells_as_arrays_args getEmptyArgsInstance() {
        return new get_cells_as_arrays_args();
      }

      protected get_cells_as_arrays_result getResult(I iface, get_cells_as_arrays_args args) throws org.apache.thrift.TException {
        get_cells_as_arrays_result result = new get_cells_as_arrays_result();
        try {
          result.success = iface.get_cells_as_arrays(args.ns, args.name, args.scan_spec);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_cells_serialized_args> {
      public get_cells_serialized() {
        super("get_cells_serialized");
      }

      protected get_cells_serialized_args getEmptyArgsInstance() {
        return new get_cells_serialized_args();
      }

      protected get_cells_serialized_result getResult(I iface, get_cells_serialized_args args) throws org.apache.thrift.TException {
        get_cells_serialized_result result = new get_cells_serialized_result();
        try {
          result.success = iface.get_cells_serialized(args.ns, args.name, args.scan_spec);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class shared_mutator_refresh<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shared_mutator_refresh_args> {
      public shared_mutator_refresh() {
        super("shared_mutator_refresh");
      }

      protected shared_mutator_refresh_args getEmptyArgsInstance() {
        return new shared_mutator_refresh_args();
      }

      protected shared_mutator_refresh_result getResult(I iface, shared_mutator_refresh_args args) throws org.apache.thrift.TException {
        shared_mutator_refresh_result result = new shared_mutator_refresh_result();
        try {
          iface.shared_mutator_refresh(args.ns, args.table_name, args.mutate_spec);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class refresh_shared_mutator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refresh_shared_mutator_args> {
      public refresh_shared_mutator() {
        super("refresh_shared_mutator");
      }

      protected refresh_shared_mutator_args getEmptyArgsInstance() {
        return new refresh_shared_mutator_args();
      }

      protected refresh_shared_mutator_result getResult(I iface, refresh_shared_mutator_args args) throws org.apache.thrift.TException {
        refresh_shared_mutator_result result = new refresh_shared_mutator_result();
        try {
          iface.refresh_shared_mutator(args.ns, args.table_name, args.mutate_spec);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class shared_mutator_set_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shared_mutator_set_cells_args> {
      public shared_mutator_set_cells() {
        super("shared_mutator_set_cells");
      }

      protected shared_mutator_set_cells_args getEmptyArgsInstance() {
        return new shared_mutator_set_cells_args();
      }

      protected shared_mutator_set_cells_result getResult(I iface, shared_mutator_set_cells_args args) throws org.apache.thrift.TException {
        shared_mutator_set_cells_result result = new shared_mutator_set_cells_result();
        try {
          iface.shared_mutator_set_cells(args.ns, args.table_name, args.mutate_spec, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class offer_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offer_cells_args> {
      public offer_cells() {
        super("offer_cells");
      }

      protected offer_cells_args getEmptyArgsInstance() {
        return new offer_cells_args();
      }

      protected offer_cells_result getResult(I iface, offer_cells_args args) throws org.apache.thrift.TException {
        offer_cells_result result = new offer_cells_result();
        try {
          iface.offer_cells(args.ns, args.table_name, args.mutate_spec, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class shared_mutator_set_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shared_mutator_set_cells_as_arrays_args> {
      public shared_mutator_set_cells_as_arrays() {
        super("shared_mutator_set_cells_as_arrays");
      }

      protected shared_mutator_set_cells_as_arrays_args getEmptyArgsInstance() {
        return new shared_mutator_set_cells_as_arrays_args();
      }

      protected shared_mutator_set_cells_as_arrays_result getResult(I iface, shared_mutator_set_cells_as_arrays_args args) throws org.apache.thrift.TException {
        shared_mutator_set_cells_as_arrays_result result = new shared_mutator_set_cells_as_arrays_result();
        try {
          iface.shared_mutator_set_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class offer_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offer_cells_as_arrays_args> {
      public offer_cells_as_arrays() {
        super("offer_cells_as_arrays");
      }

      protected offer_cells_as_arrays_args getEmptyArgsInstance() {
        return new offer_cells_as_arrays_args();
      }

      protected offer_cells_as_arrays_result getResult(I iface, offer_cells_as_arrays_args args) throws org.apache.thrift.TException {
        offer_cells_as_arrays_result result = new offer_cells_as_arrays_result();
        try {
          iface.offer_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class shared_mutator_set_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shared_mutator_set_cell_args> {
      public shared_mutator_set_cell() {
        super("shared_mutator_set_cell");
      }

      protected shared_mutator_set_cell_args getEmptyArgsInstance() {
        return new shared_mutator_set_cell_args();
      }

      protected shared_mutator_set_cell_result getResult(I iface, shared_mutator_set_cell_args args) throws org.apache.thrift.TException {
        shared_mutator_set_cell_result result = new shared_mutator_set_cell_result();
        try {
          iface.shared_mutator_set_cell(args.ns, args.table_name, args.mutate_spec, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class offer_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offer_cell_args> {
      public offer_cell() {
        super("offer_cell");
      }

      protected offer_cell_args getEmptyArgsInstance() {
        return new offer_cell_args();
      }

      protected offer_cell_result getResult(I iface, offer_cell_args args) throws org.apache.thrift.TException {
        offer_cell_result result = new offer_cell_result();
        try {
          iface.offer_cell(args.ns, args.table_name, args.mutate_spec, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class shared_mutator_set_cell_as_array<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shared_mutator_set_cell_as_array_args> {
      public shared_mutator_set_cell_as_array() {
        super("shared_mutator_set_cell_as_array");
      }

      protected shared_mutator_set_cell_as_array_args getEmptyArgsInstance() {
        return new shared_mutator_set_cell_as_array_args();
      }

      protected shared_mutator_set_cell_as_array_result getResult(I iface, shared_mutator_set_cell_as_array_args args) throws org.apache.thrift.TException {
        shared_mutator_set_cell_as_array_result result = new shared_mutator_set_cell_as_array_result();
        try {
          iface.shared_mutator_set_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class offer_cell_as_array<I extends Iface> extends org.apache.thrift.ProcessFunction<I, offer_cell_as_array_args> {
      public offer_cell_as_array() {
        super("offer_cell_as_array");
      }

      protected offer_cell_as_array_args getEmptyArgsInstance() {
        return new offer_cell_as_array_args();
      }

      protected offer_cell_as_array_result getResult(I iface, offer_cell_as_array_args args) throws org.apache.thrift.TException {
        offer_cell_as_array_result result = new offer_cell_as_array_result();
        try {
          iface.offer_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_open_args> {
      public mutator_open() {
        super("mutator_open");
      }

      protected mutator_open_args getEmptyArgsInstance() {
        return new mutator_open_args();
      }

      protected mutator_open_result getResult(I iface, mutator_open_args args) throws org.apache.thrift.TException {
        mutator_open_result result = new mutator_open_result();
        try {
          result.success = iface.mutator_open(args.ns, args.table_name, args.flags, args.flush_interval);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_mutator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_mutator_args> {
      public open_mutator() {
        super("open_mutator");
      }

      protected open_mutator_args getEmptyArgsInstance() {
        return new open_mutator_args();
      }

      protected open_mutator_result getResult(I iface, open_mutator_args args) throws org.apache.thrift.TException {
        open_mutator_result result = new open_mutator_result();
        try {
          result.success = iface.open_mutator(args.ns, args.table_name, args.flags, args.flush_interval);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_open<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_open_args> {
      public async_mutator_open() {
        super("async_mutator_open");
      }

      protected async_mutator_open_args getEmptyArgsInstance() {
        return new async_mutator_open_args();
      }

      protected async_mutator_open_result getResult(I iface, async_mutator_open_args args) throws org.apache.thrift.TException {
        async_mutator_open_result result = new async_mutator_open_result();
        try {
          result.success = iface.async_mutator_open(args.ns, args.table_name, args.future, args.flags);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class open_mutator_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, open_mutator_async_args> {
      public open_mutator_async() {
        super("open_mutator_async");
      }

      protected open_mutator_async_args getEmptyArgsInstance() {
        return new open_mutator_async_args();
      }

      protected open_mutator_async_result getResult(I iface, open_mutator_async_args args) throws org.apache.thrift.TException {
        open_mutator_async_result result = new open_mutator_async_result();
        try {
          result.success = iface.open_mutator_async(args.ns, args.table_name, args.future, args.flags);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_close_args> {
      public mutator_close() {
        super("mutator_close");
      }

      protected mutator_close_args getEmptyArgsInstance() {
        return new mutator_close_args();
      }

      protected mutator_close_result getResult(I iface, mutator_close_args args) throws org.apache.thrift.TException {
        mutator_close_result result = new mutator_close_result();
        try {
          iface.mutator_close(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_mutator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_mutator_args> {
      public close_mutator() {
        super("close_mutator");
      }

      protected close_mutator_args getEmptyArgsInstance() {
        return new close_mutator_args();
      }

      protected close_mutator_result getResult(I iface, close_mutator_args args) throws org.apache.thrift.TException {
        close_mutator_result result = new close_mutator_result();
        try {
          iface.close_mutator(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_cancel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_cancel_args> {
      public async_mutator_cancel() {
        super("async_mutator_cancel");
      }

      protected async_mutator_cancel_args getEmptyArgsInstance() {
        return new async_mutator_cancel_args();
      }

      protected async_mutator_cancel_result getResult(I iface, async_mutator_cancel_args args) throws org.apache.thrift.TException {
        async_mutator_cancel_result result = new async_mutator_cancel_result();
        try {
          iface.async_mutator_cancel(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class cancel_mutator_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancel_mutator_async_args> {
      public cancel_mutator_async() {
        super("cancel_mutator_async");
      }

      protected cancel_mutator_async_args getEmptyArgsInstance() {
        return new cancel_mutator_async_args();
      }

      protected cancel_mutator_async_result getResult(I iface, cancel_mutator_async_args args) throws org.apache.thrift.TException {
        cancel_mutator_async_result result = new cancel_mutator_async_result();
        try {
          iface.cancel_mutator_async(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_close<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_close_args> {
      public async_mutator_close() {
        super("async_mutator_close");
      }

      protected async_mutator_close_args getEmptyArgsInstance() {
        return new async_mutator_close_args();
      }

      protected async_mutator_close_result getResult(I iface, async_mutator_close_args args) throws org.apache.thrift.TException {
        async_mutator_close_result result = new async_mutator_close_result();
        try {
          iface.async_mutator_close(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class close_mutator_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, close_mutator_async_args> {
      public close_mutator_async() {
        super("close_mutator_async");
      }

      protected close_mutator_async_args getEmptyArgsInstance() {
        return new close_mutator_async_args();
      }

      protected close_mutator_async_result getResult(I iface, close_mutator_async_args args) throws org.apache.thrift.TException {
        close_mutator_async_result result = new close_mutator_async_result();
        try {
          iface.close_mutator_async(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_set_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_set_cell_args> {
      public mutator_set_cell() {
        super("mutator_set_cell");
      }

      protected mutator_set_cell_args getEmptyArgsInstance() {
        return new mutator_set_cell_args();
      }

      protected mutator_set_cell_result getResult(I iface, mutator_set_cell_args args) throws org.apache.thrift.TException {
        mutator_set_cell_result result = new mutator_set_cell_result();
        try {
          iface.mutator_set_cell(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cell_args> {
      public set_cell() {
        super("set_cell");
      }

      protected set_cell_args getEmptyArgsInstance() {
        return new set_cell_args();
      }

      protected set_cell_result getResult(I iface, set_cell_args args) throws org.apache.thrift.TException {
        set_cell_result result = new set_cell_result();
        try {
          iface.set_cell(args.ns, args.table_name, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_set_cell_as_array<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_set_cell_as_array_args> {
      public mutator_set_cell_as_array() {
        super("mutator_set_cell_as_array");
      }

      protected mutator_set_cell_as_array_args getEmptyArgsInstance() {
        return new mutator_set_cell_as_array_args();
      }

      protected mutator_set_cell_as_array_result getResult(I iface, mutator_set_cell_as_array_args args) throws org.apache.thrift.TException {
        mutator_set_cell_as_array_result result = new mutator_set_cell_as_array_result();
        try {
          iface.mutator_set_cell_as_array(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cell_as_array<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cell_as_array_args> {
      public set_cell_as_array() {
        super("set_cell_as_array");
      }

      protected set_cell_as_array_args getEmptyArgsInstance() {
        return new set_cell_as_array_args();
      }

      protected set_cell_as_array_result getResult(I iface, set_cell_as_array_args args) throws org.apache.thrift.TException {
        set_cell_as_array_result result = new set_cell_as_array_result();
        try {
          iface.set_cell_as_array(args.ns, args.table_name, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_set_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_set_cells_args> {
      public mutator_set_cells() {
        super("mutator_set_cells");
      }

      protected mutator_set_cells_args getEmptyArgsInstance() {
        return new mutator_set_cells_args();
      }

      protected mutator_set_cells_result getResult(I iface, mutator_set_cells_args args) throws org.apache.thrift.TException {
        mutator_set_cells_result result = new mutator_set_cells_result();
        try {
          iface.mutator_set_cells(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_args> {
      public set_cells() {
        super("set_cells");
      }

      protected set_cells_args getEmptyArgsInstance() {
        return new set_cells_args();
      }

      protected set_cells_result getResult(I iface, set_cells_args args) throws org.apache.thrift.TException {
        set_cells_result result = new set_cells_result();
        try {
          iface.set_cells(args.ns, args.table_name, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_set_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_set_cells_as_arrays_args> {
      public mutator_set_cells_as_arrays() {
        super("mutator_set_cells_as_arrays");
      }

      protected mutator_set_cells_as_arrays_args getEmptyArgsInstance() {
        return new mutator_set_cells_as_arrays_args();
      }

      protected mutator_set_cells_as_arrays_result getResult(I iface, mutator_set_cells_as_arrays_args args) throws org.apache.thrift.TException {
        mutator_set_cells_as_arrays_result result = new mutator_set_cells_as_arrays_result();
        try {
          iface.mutator_set_cells_as_arrays(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_as_arrays_args> {
      public set_cells_as_arrays() {
        super("set_cells_as_arrays");
      }

      protected set_cells_as_arrays_args getEmptyArgsInstance() {
        return new set_cells_as_arrays_args();
      }

      protected set_cells_as_arrays_result getResult(I iface, set_cells_as_arrays_args args) throws org.apache.thrift.TException {
        set_cells_as_arrays_result result = new set_cells_as_arrays_result();
        try {
          iface.set_cells_as_arrays(args.ns, args.table_name, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_set_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_set_cells_serialized_args> {
      public mutator_set_cells_serialized() {
        super("mutator_set_cells_serialized");
      }

      protected mutator_set_cells_serialized_args getEmptyArgsInstance() {
        return new mutator_set_cells_serialized_args();
      }

      protected mutator_set_cells_serialized_result getResult(I iface, mutator_set_cells_serialized_args args) throws org.apache.thrift.TException {
        mutator_set_cells_serialized_result result = new mutator_set_cells_serialized_result();
        try {
          iface.mutator_set_cells_serialized(args.mutator, args.cells, args.flush);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_serialized_args> {
      public set_cells_serialized() {
        super("set_cells_serialized");
      }

      protected set_cells_serialized_args getEmptyArgsInstance() {
        return new set_cells_serialized_args();
      }

      protected set_cells_serialized_result getResult(I iface, set_cells_serialized_args args) throws org.apache.thrift.TException {
        set_cells_serialized_result result = new set_cells_serialized_result();
        try {
          iface.set_cells_serialized(args.ns, args.table_name, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class mutator_flush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mutator_flush_args> {
      public mutator_flush() {
        super("mutator_flush");
      }

      protected mutator_flush_args getEmptyArgsInstance() {
        return new mutator_flush_args();
      }

      protected mutator_flush_result getResult(I iface, mutator_flush_args args) throws org.apache.thrift.TException {
        mutator_flush_result result = new mutator_flush_result();
        try {
          iface.mutator_flush(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class flush_mutator<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flush_mutator_args> {
      public flush_mutator() {
        super("flush_mutator");
      }

      protected flush_mutator_args getEmptyArgsInstance() {
        return new flush_mutator_args();
      }

      protected flush_mutator_result getResult(I iface, flush_mutator_args args) throws org.apache.thrift.TException {
        flush_mutator_result result = new flush_mutator_result();
        try {
          iface.flush_mutator(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_set_cell<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_set_cell_args> {
      public async_mutator_set_cell() {
        super("async_mutator_set_cell");
      }

      protected async_mutator_set_cell_args getEmptyArgsInstance() {
        return new async_mutator_set_cell_args();
      }

      protected async_mutator_set_cell_result getResult(I iface, async_mutator_set_cell_args args) throws org.apache.thrift.TException {
        async_mutator_set_cell_result result = new async_mutator_set_cell_result();
        try {
          iface.async_mutator_set_cell(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cell_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cell_async_args> {
      public set_cell_async() {
        super("set_cell_async");
      }

      protected set_cell_async_args getEmptyArgsInstance() {
        return new set_cell_async_args();
      }

      protected set_cell_async_result getResult(I iface, set_cell_async_args args) throws org.apache.thrift.TException {
        set_cell_async_result result = new set_cell_async_result();
        try {
          iface.set_cell_async(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_set_cell_as_array<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_set_cell_as_array_args> {
      public async_mutator_set_cell_as_array() {
        super("async_mutator_set_cell_as_array");
      }

      protected async_mutator_set_cell_as_array_args getEmptyArgsInstance() {
        return new async_mutator_set_cell_as_array_args();
      }

      protected async_mutator_set_cell_as_array_result getResult(I iface, async_mutator_set_cell_as_array_args args) throws org.apache.thrift.TException {
        async_mutator_set_cell_as_array_result result = new async_mutator_set_cell_as_array_result();
        try {
          iface.async_mutator_set_cell_as_array(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cell_as_array_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cell_as_array_async_args> {
      public set_cell_as_array_async() {
        super("set_cell_as_array_async");
      }

      protected set_cell_as_array_async_args getEmptyArgsInstance() {
        return new set_cell_as_array_async_args();
      }

      protected set_cell_as_array_async_result getResult(I iface, set_cell_as_array_async_args args) throws org.apache.thrift.TException {
        set_cell_as_array_async_result result = new set_cell_as_array_async_result();
        try {
          iface.set_cell_as_array_async(args.mutator, args.cell);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_set_cells<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_set_cells_args> {
      public async_mutator_set_cells() {
        super("async_mutator_set_cells");
      }

      protected async_mutator_set_cells_args getEmptyArgsInstance() {
        return new async_mutator_set_cells_args();
      }

      protected async_mutator_set_cells_result getResult(I iface, async_mutator_set_cells_args args) throws org.apache.thrift.TException {
        async_mutator_set_cells_result result = new async_mutator_set_cells_result();
        try {
          iface.async_mutator_set_cells(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_async_args> {
      public set_cells_async() {
        super("set_cells_async");
      }

      protected set_cells_async_args getEmptyArgsInstance() {
        return new set_cells_async_args();
      }

      protected set_cells_async_result getResult(I iface, set_cells_async_args args) throws org.apache.thrift.TException {
        set_cells_async_result result = new set_cells_async_result();
        try {
          iface.set_cells_async(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_set_cells_as_arrays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_set_cells_as_arrays_args> {
      public async_mutator_set_cells_as_arrays() {
        super("async_mutator_set_cells_as_arrays");
      }

      protected async_mutator_set_cells_as_arrays_args getEmptyArgsInstance() {
        return new async_mutator_set_cells_as_arrays_args();
      }

      protected async_mutator_set_cells_as_arrays_result getResult(I iface, async_mutator_set_cells_as_arrays_args args) throws org.apache.thrift.TException {
        async_mutator_set_cells_as_arrays_result result = new async_mutator_set_cells_as_arrays_result();
        try {
          iface.async_mutator_set_cells_as_arrays(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells_as_arrays_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_as_arrays_async_args> {
      public set_cells_as_arrays_async() {
        super("set_cells_as_arrays_async");
      }

      protected set_cells_as_arrays_async_args getEmptyArgsInstance() {
        return new set_cells_as_arrays_async_args();
      }

      protected set_cells_as_arrays_async_result getResult(I iface, set_cells_as_arrays_async_args args) throws org.apache.thrift.TException {
        set_cells_as_arrays_async_result result = new set_cells_as_arrays_async_result();
        try {
          iface.set_cells_as_arrays_async(args.mutator, args.cells);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_set_cells_serialized<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_set_cells_serialized_args> {
      public async_mutator_set_cells_serialized() {
        super("async_mutator_set_cells_serialized");
      }

      protected async_mutator_set_cells_serialized_args getEmptyArgsInstance() {
        return new async_mutator_set_cells_serialized_args();
      }

      protected async_mutator_set_cells_serialized_result getResult(I iface, async_mutator_set_cells_serialized_args args) throws org.apache.thrift.TException {
        async_mutator_set_cells_serialized_result result = new async_mutator_set_cells_serialized_result();
        try {
          iface.async_mutator_set_cells_serialized(args.mutator, args.cells, args.flush);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class set_cells_serialized_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, set_cells_serialized_async_args> {
      public set_cells_serialized_async() {
        super("set_cells_serialized_async");
      }

      protected set_cells_serialized_async_args getEmptyArgsInstance() {
        return new set_cells_serialized_async_args();
      }

      protected set_cells_serialized_async_result getResult(I iface, set_cells_serialized_async_args args) throws org.apache.thrift.TException {
        set_cells_serialized_async_result result = new set_cells_serialized_async_result();
        try {
          iface.set_cells_serialized_async(args.mutator, args.cells, args.flush);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class async_mutator_flush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, async_mutator_flush_args> {
      public async_mutator_flush() {
        super("async_mutator_flush");
      }

      protected async_mutator_flush_args getEmptyArgsInstance() {
        return new async_mutator_flush_args();
      }

      protected async_mutator_flush_result getResult(I iface, async_mutator_flush_args args) throws org.apache.thrift.TException {
        async_mutator_flush_result result = new async_mutator_flush_result();
        try {
          iface.async_mutator_flush(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class flush_mutator_async<I extends Iface> extends org.apache.thrift.ProcessFunction<I, flush_mutator_async_args> {
      public flush_mutator_async() {
        super("flush_mutator_async");
      }

      protected flush_mutator_async_args getEmptyArgsInstance() {
        return new flush_mutator_async_args();
      }

      protected flush_mutator_async_result getResult(I iface, flush_mutator_async_args args) throws org.apache.thrift.TException {
        flush_mutator_async_result result = new flush_mutator_async_result();
        try {
          iface.flush_mutator_async(args.mutator);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class namespace_exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_exists_args> {
      public namespace_exists() {
        super("namespace_exists");
      }

      protected namespace_exists_args getEmptyArgsInstance() {
        return new namespace_exists_args();
      }

      protected namespace_exists_result getResult(I iface, namespace_exists_args args) throws org.apache.thrift.TException {
        namespace_exists_result result = new namespace_exists_result();
        try {
          result.success = iface.namespace_exists(args.ns);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class exists_namespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_namespace_args> {
      public exists_namespace() {
        super("exists_namespace");
      }

      protected exists_namespace_args getEmptyArgsInstance() {
        return new exists_namespace_args();
      }

      protected exists_namespace_result getResult(I iface, exists_namespace_args args) throws org.apache.thrift.TException {
        exists_namespace_result result = new exists_namespace_result();
        try {
          result.success = iface.exists_namespace(args.ns);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class exists_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exists_table_args> {
      public exists_table() {
        super("exists_table");
      }

      protected exists_table_args getEmptyArgsInstance() {
        return new exists_table_args();
      }

      protected exists_table_result getResult(I iface, exists_table_args args) throws org.apache.thrift.TException {
        exists_table_result result = new exists_table_result();
        try {
          result.success = iface.exists_table(args.ns, args.name);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_exists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_exists_args> {
      public table_exists() {
        super("table_exists");
      }

      protected table_exists_args getEmptyArgsInstance() {
        return new table_exists_args();
      }

      protected table_exists_result getResult(I iface, table_exists_args args) throws org.apache.thrift.TException {
        table_exists_result result = new table_exists_result();
        try {
          result.success = iface.table_exists(args.ns, args.name);
          result.setSuccessIsSet(true);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_get_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_get_id_args> {
      public table_get_id() {
        super("table_get_id");
      }

      protected table_get_id_args getEmptyArgsInstance() {
        return new table_get_id_args();
      }

      protected table_get_id_result getResult(I iface, table_get_id_args args) throws org.apache.thrift.TException {
        table_get_id_result result = new table_get_id_result();
        try {
          result.success = iface.table_get_id(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_table_id<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_table_id_args> {
      public get_table_id() {
        super("get_table_id");
      }

      protected get_table_id_args getEmptyArgsInstance() {
        return new get_table_id_args();
      }

      protected get_table_id_result getResult(I iface, get_table_id_args args) throws org.apache.thrift.TException {
        get_table_id_result result = new get_table_id_result();
        try {
          result.success = iface.get_table_id(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_get_schema_str<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_get_schema_str_args> {
      public table_get_schema_str() {
        super("table_get_schema_str");
      }

      protected table_get_schema_str_args getEmptyArgsInstance() {
        return new table_get_schema_str_args();
      }

      protected table_get_schema_str_result getResult(I iface, table_get_schema_str_args args) throws org.apache.thrift.TException {
        table_get_schema_str_result result = new table_get_schema_str_result();
        try {
          result.success = iface.table_get_schema_str(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_schema_str<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_schema_str_args> {
      public get_schema_str() {
        super("get_schema_str");
      }

      protected get_schema_str_args getEmptyArgsInstance() {
        return new get_schema_str_args();
      }

      protected get_schema_str_result getResult(I iface, get_schema_str_args args) throws org.apache.thrift.TException {
        get_schema_str_result result = new get_schema_str_result();
        try {
          result.success = iface.get_schema_str(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_get_schema_str_with_ids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_get_schema_str_with_ids_args> {
      public table_get_schema_str_with_ids() {
        super("table_get_schema_str_with_ids");
      }

      protected table_get_schema_str_with_ids_args getEmptyArgsInstance() {
        return new table_get_schema_str_with_ids_args();
      }

      protected table_get_schema_str_with_ids_result getResult(I iface, table_get_schema_str_with_ids_args args) throws org.apache.thrift.TException {
        table_get_schema_str_with_ids_result result = new table_get_schema_str_with_ids_result();
        try {
          result.success = iface.table_get_schema_str_with_ids(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_schema_str_with_ids<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_schema_str_with_ids_args> {
      public get_schema_str_with_ids() {
        super("get_schema_str_with_ids");
      }

      protected get_schema_str_with_ids_args getEmptyArgsInstance() {
        return new get_schema_str_with_ids_args();
      }

      protected get_schema_str_with_ids_result getResult(I iface, get_schema_str_with_ids_args args) throws org.apache.thrift.TException {
        get_schema_str_with_ids_result result = new get_schema_str_with_ids_result();
        try {
          result.success = iface.get_schema_str_with_ids(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_get_schema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_get_schema_args> {
      public table_get_schema() {
        super("table_get_schema");
      }

      protected table_get_schema_args getEmptyArgsInstance() {
        return new table_get_schema_args();
      }

      protected table_get_schema_result getResult(I iface, table_get_schema_args args) throws org.apache.thrift.TException {
        table_get_schema_result result = new table_get_schema_result();
        try {
          result.success = iface.table_get_schema(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_schema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_schema_args> {
      public get_schema() {
        super("get_schema");
      }

      protected get_schema_args getEmptyArgsInstance() {
        return new get_schema_args();
      }

      protected get_schema_result getResult(I iface, get_schema_args args) throws org.apache.thrift.TException {
        get_schema_result result = new get_schema_result();
        try {
          result.success = iface.get_schema(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_tables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_tables_args> {
      public get_tables() {
        super("get_tables");
      }

      protected get_tables_args getEmptyArgsInstance() {
        return new get_tables_args();
      }

      protected get_tables_result getResult(I iface, get_tables_args args) throws org.apache.thrift.TException {
        get_tables_result result = new get_tables_result();
        try {
          result.success = iface.get_tables(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class namespace_get_listing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_get_listing_args> {
      public namespace_get_listing() {
        super("namespace_get_listing");
      }

      protected namespace_get_listing_args getEmptyArgsInstance() {
        return new namespace_get_listing_args();
      }

      protected namespace_get_listing_result getResult(I iface, namespace_get_listing_args args) throws org.apache.thrift.TException {
        namespace_get_listing_result result = new namespace_get_listing_result();
        try {
          result.success = iface.namespace_get_listing(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_listing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_listing_args> {
      public get_listing() {
        super("get_listing");
      }

      protected get_listing_args getEmptyArgsInstance() {
        return new get_listing_args();
      }

      protected get_listing_result getResult(I iface, get_listing_args args) throws org.apache.thrift.TException {
        get_listing_result result = new get_listing_result();
        try {
          result.success = iface.get_listing(args.ns);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_get_splits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_get_splits_args> {
      public table_get_splits() {
        super("table_get_splits");
      }

      protected table_get_splits_args getEmptyArgsInstance() {
        return new table_get_splits_args();
      }

      protected table_get_splits_result getResult(I iface, table_get_splits_args args) throws org.apache.thrift.TException {
        table_get_splits_result result = new table_get_splits_result();
        try {
          result.success = iface.table_get_splits(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class get_table_splits<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_table_splits_args> {
      public get_table_splits() {
        super("get_table_splits");
      }

      protected get_table_splits_args getEmptyArgsInstance() {
        return new get_table_splits_args();
      }

      protected get_table_splits_result getResult(I iface, get_table_splits_args args) throws org.apache.thrift.TException {
        get_table_splits_result result = new get_table_splits_result();
        try {
          result.success = iface.get_table_splits(args.ns, args.table_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class namespace_drop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, namespace_drop_args> {
      public namespace_drop() {
        super("namespace_drop");
      }

      protected namespace_drop_args getEmptyArgsInstance() {
        return new namespace_drop_args();
      }

      protected namespace_drop_result getResult(I iface, namespace_drop_args args) throws org.apache.thrift.TException {
        namespace_drop_result result = new namespace_drop_result();
        try {
          iface.namespace_drop(args.ns, args.if_exists);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class drop_namespace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drop_namespace_args> {
      public drop_namespace() {
        super("drop_namespace");
      }

      protected drop_namespace_args getEmptyArgsInstance() {
        return new drop_namespace_args();
      }

      protected drop_namespace_result getResult(I iface, drop_namespace_args args) throws org.apache.thrift.TException {
        drop_namespace_result result = new drop_namespace_result();
        try {
          iface.drop_namespace(args.ns, args.if_exists);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class rename_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rename_table_args> {
      public rename_table() {
        super("rename_table");
      }

      protected rename_table_args getEmptyArgsInstance() {
        return new rename_table_args();
      }

      protected rename_table_result getResult(I iface, rename_table_args args) throws org.apache.thrift.TException {
        rename_table_result result = new rename_table_result();
        try {
          iface.rename_table(args.ns, args.name, args.new_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_rename<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_rename_args> {
      public table_rename() {
        super("table_rename");
      }

      protected table_rename_args getEmptyArgsInstance() {
        return new table_rename_args();
      }

      protected table_rename_result getResult(I iface, table_rename_args args) throws org.apache.thrift.TException {
        table_rename_result result = new table_rename_result();
        try {
          iface.table_rename(args.ns, args.name, args.new_name);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class drop_table<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drop_table_args> {
      public drop_table() {
        super("drop_table");
      }

      protected drop_table_args getEmptyArgsInstance() {
        return new drop_table_args();
      }

      protected drop_table_result getResult(I iface, drop_table_args args) throws org.apache.thrift.TException {
        drop_table_result result = new drop_table_result();
        try {
          iface.drop_table(args.ns, args.name, args.if_exists);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class table_drop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, table_drop_args> {
      public table_drop() {
        super("table_drop");
      }

      protected table_drop_args getEmptyArgsInstance() {
        return new table_drop_args();
      }

      protected table_drop_result getResult(I iface, table_drop_args args) throws org.apache.thrift.TException {
        table_drop_result result = new table_drop_result();
        try {
          iface.table_drop(args.ns, args.name, args.if_exists);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class generate_guid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, generate_guid_args> {
      public generate_guid() {
        super("generate_guid");
      }

      protected generate_guid_args getEmptyArgsInstance() {
        return new generate_guid_args();
      }

      protected generate_guid_result getResult(I iface, generate_guid_args args) throws org.apache.thrift.TException {
        generate_guid_result result = new generate_guid_result();
        result.success = iface.generate_guid();
        return result;
      }
    }

    private static class create_cell_unique<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_cell_unique_args> {
      public create_cell_unique() {
        super("create_cell_unique");
      }

      protected create_cell_unique_args getEmptyArgsInstance() {
        return new create_cell_unique_args();
      }

      protected create_cell_unique_result getResult(I iface, create_cell_unique_args args) throws org.apache.thrift.TException {
        create_cell_unique_result result = new create_cell_unique_result();
        try {
          result.success = iface.create_cell_unique(args.ns, args.table_name, args.key, args.value);
        } catch (ClientException e) {
          result.e = e;
        }
        return result;
      }
    }

    private static class error_get_text<I extends Iface> extends org.apache.thrift.ProcessFunction<I, error_get_text_args> {
      public error_get_text() {
        super("error_get_text");
      }

      protected error_get_text_args getEmptyArgsInstance() {
        return new error_get_text_args();
      }

      protected error_get_text_result getResult(I iface, error_get_text_args args) throws org.apache.thrift.TException {
        error_get_text_result result = new error_get_text_result();
        result.success = iface.error_get_text(args.error_code);
        return result;
      }
    }

  }

  public static class namespace_create_args implements org.apache.thrift.TBase<namespace_create_args, namespace_create_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_create_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_create_args.class, metaDataMap);
    }

    public namespace_create_args() {
    }

    public namespace_create_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_create_args(namespace_create_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public namespace_create_args deepCopy() {
      return new namespace_create_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public namespace_create_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_create_args)
        return this.equals((namespace_create_args)that);
      return false;
    }

    public boolean equals(namespace_create_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_create_args typedOther = (namespace_create_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_create_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_create_result implements org.apache.thrift.TBase<namespace_create_result, namespace_create_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_create_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_create_result.class, metaDataMap);
    }

    public namespace_create_result() {
    }

    public namespace_create_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_create_result(namespace_create_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_create_result deepCopy() {
      return new namespace_create_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_create_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_create_result)
        return this.equals((namespace_create_result)that);
      return false;
    }

    public boolean equals(namespace_create_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_create_result typedOther = (namespace_create_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_create_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_namespace_args implements org.apache.thrift.TBase<create_namespace_args, create_namespace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_namespace_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_namespace_args.class, metaDataMap);
    }

    public create_namespace_args() {
    }

    public create_namespace_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_namespace_args(create_namespace_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public create_namespace_args deepCopy() {
      return new create_namespace_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public create_namespace_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_namespace_args)
        return this.equals((create_namespace_args)that);
      return false;
    }

    public boolean equals(create_namespace_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_namespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_namespace_args typedOther = (create_namespace_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_namespace_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_namespace_result implements org.apache.thrift.TBase<create_namespace_result, create_namespace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_namespace_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_namespace_result.class, metaDataMap);
    }

    public create_namespace_result() {
    }

    public create_namespace_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_namespace_result(create_namespace_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public create_namespace_result deepCopy() {
      return new create_namespace_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public create_namespace_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_namespace_result)
        return this.equals((create_namespace_result)that);
      return false;
    }

    public boolean equals(create_namespace_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_namespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_namespace_result typedOther = (create_namespace_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_namespace_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_table_args implements org.apache.thrift.TBase<create_table_args, create_table_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String schema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCHEMA((short)3, "schema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCHEMA
            return SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_args.class, metaDataMap);
    }

    public create_table_args() {
    }

    public create_table_args(
      long ns,
      String table_name,
      String schema)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.schema = schema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_args(create_table_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
    }

    public create_table_args deepCopy() {
      return new create_table_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.schema = null;
    }

    public long getNs() {
      return this.ns;
    }

    public create_table_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public create_table_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public create_table_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCHEMA:
        return getSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCHEMA:
        return isSetSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_args)
        return this.equals((create_table_args)that);
      return false;
    }

    public boolean equals(create_table_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_table_args typedOther = (create_table_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(typedOther.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, typedOther.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCHEMA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.schema = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_table_result implements org.apache.thrift.TBase<create_table_result, create_table_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_table_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_table_result.class, metaDataMap);
    }

    public create_table_result() {
    }

    public create_table_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_table_result(create_table_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public create_table_result deepCopy() {
      return new create_table_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public create_table_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_table_result)
        return this.equals((create_table_result)that);
      return false;
    }

    public boolean equals(create_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_table_result typedOther = (create_table_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_table_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_create_args implements org.apache.thrift.TBase<table_create_args, table_create_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_create_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String schema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCHEMA((short)3, "schema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCHEMA
            return SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_create_args.class, metaDataMap);
    }

    public table_create_args() {
    }

    public table_create_args(
      long ns,
      String table_name,
      String schema)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.schema = schema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_create_args(table_create_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
    }

    public table_create_args deepCopy() {
      return new table_create_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.schema = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_create_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_create_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public table_create_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCHEMA:
        return getSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCHEMA:
        return isSetSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_create_args)
        return this.equals((table_create_args)that);
      return false;
    }

    public boolean equals(table_create_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_create_args typedOther = (table_create_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(typedOther.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, typedOther.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCHEMA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.schema = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_create_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_create_result implements org.apache.thrift.TBase<table_create_result, table_create_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_create_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_create_result.class, metaDataMap);
    }

    public table_create_result() {
    }

    public table_create_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_create_result(table_create_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_create_result deepCopy() {
      return new table_create_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public table_create_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_create_result)
        return this.equals((table_create_result)that);
      return false;
    }

    public boolean equals(table_create_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_create_result typedOther = (table_create_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_create_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class alter_table_args implements org.apache.thrift.TBase<alter_table_args, alter_table_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alter_table_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String schema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCHEMA((short)3, "schema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCHEMA
            return SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alter_table_args.class, metaDataMap);
    }

    public alter_table_args() {
    }

    public alter_table_args(
      long ns,
      String table_name,
      String schema)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.schema = schema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_args(alter_table_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
    }

    public alter_table_args deepCopy() {
      return new alter_table_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.schema = null;
    }

    public long getNs() {
      return this.ns;
    }

    public alter_table_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public alter_table_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public alter_table_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCHEMA:
        return getSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCHEMA:
        return isSetSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_args)
        return this.equals((alter_table_args)that);
      return false;
    }

    public boolean equals(alter_table_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alter_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alter_table_args typedOther = (alter_table_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(typedOther.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, typedOther.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCHEMA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.schema = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class alter_table_result implements org.apache.thrift.TBase<alter_table_result, alter_table_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alter_table_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alter_table_result.class, metaDataMap);
    }

    public alter_table_result() {
    }

    public alter_table_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alter_table_result(alter_table_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public alter_table_result deepCopy() {
      return new alter_table_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public alter_table_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof alter_table_result)
        return this.equals((alter_table_result)that);
      return false;
    }

    public boolean equals(alter_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(alter_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      alter_table_result typedOther = (alter_table_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("alter_table_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_alter_args implements org.apache.thrift.TBase<table_alter_args, table_alter_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_alter_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String schema; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCHEMA((short)3, "schema");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCHEMA
            return SCHEMA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_alter_args.class, metaDataMap);
    }

    public table_alter_args() {
    }

    public table_alter_args(
      long ns,
      String table_name,
      String schema)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.schema = schema;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_alter_args(table_alter_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetSchema()) {
        this.schema = other.schema;
      }
    }

    public table_alter_args deepCopy() {
      return new table_alter_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.schema = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_alter_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_alter_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getSchema() {
      return this.schema;
    }

    public table_alter_args setSchema(String schema) {
      this.schema = schema;
      return this;
    }

    public void unsetSchema() {
      this.schema = null;
    }

    /** Returns true if field schema is set (has been assigned a value) and false otherwise */
    public boolean isSetSchema() {
      return this.schema != null;
    }

    public void setSchemaIsSet(boolean value) {
      if (!value) {
        this.schema = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCHEMA:
        if (value == null) {
          unsetSchema();
        } else {
          setSchema((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCHEMA:
        return getSchema();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCHEMA:
        return isSetSchema();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_alter_args)
        return this.equals((table_alter_args)that);
      return false;
    }

    public boolean equals(table_alter_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_schema = true && this.isSetSchema();
      boolean that_present_schema = true && that.isSetSchema();
      if (this_present_schema || that_present_schema) {
        if (!(this_present_schema && that_present_schema))
          return false;
        if (!this.schema.equals(that.schema))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_alter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_alter_args typedOther = (table_alter_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchema()).compareTo(typedOther.isSetSchema());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchema()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, typedOther.schema);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCHEMA
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.schema = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        oprot.writeString(this.schema);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_alter_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schema:");
      if (this.schema == null) {
        sb.append("null");
      } else {
        sb.append(this.schema);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_alter_result implements org.apache.thrift.TBase<table_alter_result, table_alter_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_alter_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_alter_result.class, metaDataMap);
    }

    public table_alter_result() {
    }

    public table_alter_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_alter_result(table_alter_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_alter_result deepCopy() {
      return new table_alter_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public table_alter_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_alter_result)
        return this.equals((table_alter_result)that);
      return false;
    }

    public boolean equals(table_alter_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_alter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_alter_result typedOther = (table_alter_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_alter_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_open_args implements org.apache.thrift.TBase<namespace_open_args, namespace_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_open_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_open_args.class, metaDataMap);
    }

    public namespace_open_args() {
    }

    public namespace_open_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_open_args(namespace_open_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public namespace_open_args deepCopy() {
      return new namespace_open_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public namespace_open_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_open_args)
        return this.equals((namespace_open_args)that);
      return false;
    }

    public boolean equals(namespace_open_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_open_args typedOther = (namespace_open_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_open_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_open_result implements org.apache.thrift.TBase<namespace_open_result, namespace_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_open_result.class, metaDataMap);
    }

    public namespace_open_result() {
    }

    public namespace_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_open_result(namespace_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_open_result deepCopy() {
      return new namespace_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public namespace_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_open_result)
        return this.equals((namespace_open_result)that);
      return false;
    }

    public boolean equals(namespace_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_open_result typedOther = (namespace_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_namespace_args implements org.apache.thrift.TBase<open_namespace_args, open_namespace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_namespace_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_namespace_args.class, metaDataMap);
    }

    public open_namespace_args() {
    }

    public open_namespace_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_namespace_args(open_namespace_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public open_namespace_args deepCopy() {
      return new open_namespace_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public open_namespace_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_namespace_args)
        return this.equals((open_namespace_args)that);
      return false;
    }

    public boolean equals(open_namespace_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_namespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_namespace_args typedOther = (open_namespace_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_namespace_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_namespace_result implements org.apache.thrift.TBase<open_namespace_result, open_namespace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_namespace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_namespace_result.class, metaDataMap);
    }

    public open_namespace_result() {
    }

    public open_namespace_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_namespace_result(open_namespace_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_namespace_result deepCopy() {
      return new open_namespace_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_namespace_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_namespace_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_namespace_result)
        return this.equals((open_namespace_result)that);
      return false;
    }

    public boolean equals(open_namespace_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_namespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_namespace_result typedOther = (open_namespace_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_namespace_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_close_args implements org.apache.thrift.TBase<namespace_close_args, namespace_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_close_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_close_args.class, metaDataMap);
    }

    public namespace_close_args() {
    }

    public namespace_close_args(
      long ns)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_close_args(namespace_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
    }

    public namespace_close_args deepCopy() {
      return new namespace_close_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
    }

    public long getNs() {
      return this.ns;
    }

    public namespace_close_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_close_args)
        return this.equals((namespace_close_args)that);
      return false;
    }

    public boolean equals(namespace_close_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_close_args typedOther = (namespace_close_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_close_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_close_result implements org.apache.thrift.TBase<namespace_close_result, namespace_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_close_result.class, metaDataMap);
    }

    public namespace_close_result() {
    }

    public namespace_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_close_result(namespace_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_close_result deepCopy() {
      return new namespace_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_close_result)
        return this.equals((namespace_close_result)that);
      return false;
    }

    public boolean equals(namespace_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_close_result typedOther = (namespace_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_namespace_args implements org.apache.thrift.TBase<close_namespace_args, close_namespace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_namespace_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_namespace_args.class, metaDataMap);
    }

    public close_namespace_args() {
    }

    public close_namespace_args(
      long ns)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_namespace_args(close_namespace_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
    }

    public close_namespace_args deepCopy() {
      return new close_namespace_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
    }

    public long getNs() {
      return this.ns;
    }

    public close_namespace_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_namespace_args)
        return this.equals((close_namespace_args)that);
      return false;
    }

    public boolean equals(close_namespace_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_namespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_namespace_args typedOther = (close_namespace_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_namespace_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_namespace_result implements org.apache.thrift.TBase<close_namespace_result, close_namespace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_namespace_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_namespace_result.class, metaDataMap);
    }

    public close_namespace_result() {
    }

    public close_namespace_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_namespace_result(close_namespace_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_namespace_result deepCopy() {
      return new close_namespace_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_namespace_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_namespace_result)
        return this.equals((close_namespace_result)that);
      return false;
    }

    public boolean equals(close_namespace_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_namespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_namespace_result typedOther = (close_namespace_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_namespace_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_open_args implements org.apache.thrift.TBase<future_open_args, future_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_open_args");

    private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.I32, (short)1);

    public int capacity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAPACITY((short)1, "capacity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAPACITY
            return CAPACITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CAPACITY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_open_args.class, metaDataMap);
    }

    public future_open_args() {
      this.capacity = 0;

    }

    public future_open_args(
      int capacity)
    {
      this();
      this.capacity = capacity;
      setCapacityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_open_args(future_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.capacity = other.capacity;
    }

    public future_open_args deepCopy() {
      return new future_open_args(this);
    }

    @Override
    public void clear() {
      this.capacity = 0;

    }

    public int getCapacity() {
      return this.capacity;
    }

    public future_open_args setCapacity(int capacity) {
      this.capacity = capacity;
      setCapacityIsSet(true);
      return this;
    }

    public void unsetCapacity() {
      __isset_bit_vector.clear(__CAPACITY_ISSET_ID);
    }

    /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
    public boolean isSetCapacity() {
      return __isset_bit_vector.get(__CAPACITY_ISSET_ID);
    }

    public void setCapacityIsSet(boolean value) {
      __isset_bit_vector.set(__CAPACITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAPACITY:
        if (value == null) {
          unsetCapacity();
        } else {
          setCapacity((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAPACITY:
        return Integer.valueOf(getCapacity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAPACITY:
        return isSetCapacity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_open_args)
        return this.equals((future_open_args)that);
      return false;
    }

    public boolean equals(future_open_args that) {
      if (that == null)
        return false;

      boolean this_present_capacity = true;
      boolean that_present_capacity = true;
      if (this_present_capacity || that_present_capacity) {
        if (!(this_present_capacity && that_present_capacity))
          return false;
        if (this.capacity != that.capacity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_open_args typedOther = (future_open_args)other;

      lastComparison = Boolean.valueOf(isSetCapacity()).compareTo(typedOther.isSetCapacity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCapacity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, typedOther.capacity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CAPACITY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.capacity = iprot.readI32();
              setCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
      oprot.writeI32(this.capacity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_open_args(");
      boolean first = true;

      sb.append("capacity:");
      sb.append(this.capacity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_open_result implements org.apache.thrift.TBase<future_open_result, future_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_open_result.class, metaDataMap);
    }

    public future_open_result() {
    }

    public future_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_open_result(future_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_open_result deepCopy() {
      return new future_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public future_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public future_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_open_result)
        return this.equals((future_open_result)that);
      return false;
    }

    public boolean equals(future_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_open_result typedOther = (future_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_future_args implements org.apache.thrift.TBase<open_future_args, open_future_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_future_args");

    private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("capacity", org.apache.thrift.protocol.TType.I32, (short)1);

    public int capacity; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CAPACITY((short)1, "capacity");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CAPACITY
            return CAPACITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CAPACITY_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("capacity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_future_args.class, metaDataMap);
    }

    public open_future_args() {
      this.capacity = 0;

    }

    public open_future_args(
      int capacity)
    {
      this();
      this.capacity = capacity;
      setCapacityIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_future_args(open_future_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.capacity = other.capacity;
    }

    public open_future_args deepCopy() {
      return new open_future_args(this);
    }

    @Override
    public void clear() {
      this.capacity = 0;

    }

    public int getCapacity() {
      return this.capacity;
    }

    public open_future_args setCapacity(int capacity) {
      this.capacity = capacity;
      setCapacityIsSet(true);
      return this;
    }

    public void unsetCapacity() {
      __isset_bit_vector.clear(__CAPACITY_ISSET_ID);
    }

    /** Returns true if field capacity is set (has been assigned a value) and false otherwise */
    public boolean isSetCapacity() {
      return __isset_bit_vector.get(__CAPACITY_ISSET_ID);
    }

    public void setCapacityIsSet(boolean value) {
      __isset_bit_vector.set(__CAPACITY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CAPACITY:
        if (value == null) {
          unsetCapacity();
        } else {
          setCapacity((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CAPACITY:
        return Integer.valueOf(getCapacity());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CAPACITY:
        return isSetCapacity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_future_args)
        return this.equals((open_future_args)that);
      return false;
    }

    public boolean equals(open_future_args that) {
      if (that == null)
        return false;

      boolean this_present_capacity = true;
      boolean that_present_capacity = true;
      if (this_present_capacity || that_present_capacity) {
        if (!(this_present_capacity && that_present_capacity))
          return false;
        if (this.capacity != that.capacity)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_future_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_future_args typedOther = (open_future_args)other;

      lastComparison = Boolean.valueOf(isSetCapacity()).compareTo(typedOther.isSetCapacity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCapacity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, typedOther.capacity);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CAPACITY
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.capacity = iprot.readI32();
              setCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
      oprot.writeI32(this.capacity);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_future_args(");
      boolean first = true;

      sb.append("capacity:");
      sb.append(this.capacity);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_future_result implements org.apache.thrift.TBase<open_future_result, open_future_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_future_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_future_result.class, metaDataMap);
    }

    public open_future_result() {
    }

    public open_future_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_future_result(open_future_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_future_result deepCopy() {
      return new open_future_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_future_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_future_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_future_result)
        return this.equals((open_future_result)that);
      return false;
    }

    public boolean equals(open_future_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_future_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_future_result typedOther = (open_future_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_future_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_cancel_args implements org.apache.thrift.TBase<future_cancel_args, future_cancel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_cancel_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_cancel_args.class, metaDataMap);
    }

    public future_cancel_args() {
    }

    public future_cancel_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_cancel_args(future_cancel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_cancel_args deepCopy() {
      return new future_cancel_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_cancel_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_cancel_args)
        return this.equals((future_cancel_args)that);
      return false;
    }

    public boolean equals(future_cancel_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_cancel_args typedOther = (future_cancel_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_cancel_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_cancel_result implements org.apache.thrift.TBase<future_cancel_result, future_cancel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_cancel_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_cancel_result.class, metaDataMap);
    }

    public future_cancel_result() {
    }

    public future_cancel_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_cancel_result(future_cancel_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_cancel_result deepCopy() {
      return new future_cancel_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public future_cancel_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_cancel_result)
        return this.equals((future_cancel_result)that);
      return false;
    }

    public boolean equals(future_cancel_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_cancel_result typedOther = (future_cancel_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_cancel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_future_args implements org.apache.thrift.TBase<cancel_future_args, cancel_future_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_future_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_future_args.class, metaDataMap);
    }

    public cancel_future_args() {
    }

    public cancel_future_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_future_args(cancel_future_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public cancel_future_args deepCopy() {
      return new cancel_future_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public cancel_future_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_future_args)
        return this.equals((cancel_future_args)that);
      return false;
    }

    public boolean equals(cancel_future_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_future_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_future_args typedOther = (cancel_future_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_future_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_future_result implements org.apache.thrift.TBase<cancel_future_result, cancel_future_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_future_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_future_result.class, metaDataMap);
    }

    public cancel_future_result() {
    }

    public cancel_future_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_future_result(cancel_future_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public cancel_future_result deepCopy() {
      return new cancel_future_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public cancel_future_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_future_result)
        return this.equals((cancel_future_result)that);
      return false;
    }

    public boolean equals(cancel_future_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_future_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_future_result typedOther = (cancel_future_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_future_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_args implements org.apache.thrift.TBase<future_get_result_args, future_get_result_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_args.class, metaDataMap);
    }

    public future_get_result_args() {
      this.timeout_millis = 0;

    }

    public future_get_result_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_args(future_get_result_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public future_get_result_args deepCopy() {
      return new future_get_result_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public future_get_result_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public future_get_result_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_args)
        return this.equals((future_get_result_args)that);
      return false;
    }

    public boolean equals(future_get_result_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_args typedOther = (future_get_result_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_result implements org.apache.thrift.TBase<future_get_result_result, future_get_result_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public Result success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_result.class, metaDataMap);
    }

    public future_get_result_result() {
    }

    public future_get_result_result(
      Result success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_result(future_get_result_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_get_result_result deepCopy() {
      return new future_get_result_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public future_get_result_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public future_get_result_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_result)
        return this.equals((future_get_result_result)that);
      return false;
    }

    public boolean equals(future_get_result_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_result typedOther = (future_get_result_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new Result();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_args implements org.apache.thrift.TBase<get_future_result_args, get_future_result_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_args.class, metaDataMap);
    }

    public get_future_result_args() {
      this.timeout_millis = 0;

    }

    public get_future_result_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_args(get_future_result_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public get_future_result_args deepCopy() {
      return new get_future_result_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public get_future_result_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public get_future_result_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_args)
        return this.equals((get_future_result_args)that);
      return false;
    }

    public boolean equals(get_future_result_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_args typedOther = (get_future_result_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_result implements org.apache.thrift.TBase<get_future_result_result, get_future_result_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public Result success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_result.class, metaDataMap);
    }

    public get_future_result_result() {
    }

    public get_future_result_result(
      Result success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_result(get_future_result_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_future_result_result deepCopy() {
      return new get_future_result_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public get_future_result_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_future_result_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_result)
        return this.equals((get_future_result_result)that);
      return false;
    }

    public boolean equals(get_future_result_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_result typedOther = (get_future_result_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new Result();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_as_arrays_args implements org.apache.thrift.TBase<future_get_result_as_arrays_args, future_get_result_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_as_arrays_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_as_arrays_args.class, metaDataMap);
    }

    public future_get_result_as_arrays_args() {
      this.timeout_millis = 0;

    }

    public future_get_result_as_arrays_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_as_arrays_args(future_get_result_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public future_get_result_as_arrays_args deepCopy() {
      return new future_get_result_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public future_get_result_as_arrays_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public future_get_result_as_arrays_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_as_arrays_args)
        return this.equals((future_get_result_as_arrays_args)that);
      return false;
    }

    public boolean equals(future_get_result_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_as_arrays_args typedOther = (future_get_result_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_as_arrays_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_as_arrays_result implements org.apache.thrift.TBase<future_get_result_as_arrays_result, future_get_result_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ResultAsArrays success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultAsArrays.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_as_arrays_result.class, metaDataMap);
    }

    public future_get_result_as_arrays_result() {
    }

    public future_get_result_as_arrays_result(
      ResultAsArrays success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_as_arrays_result(future_get_result_as_arrays_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultAsArrays(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_get_result_as_arrays_result deepCopy() {
      return new future_get_result_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ResultAsArrays getSuccess() {
      return this.success;
    }

    public future_get_result_as_arrays_result setSuccess(ResultAsArrays success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public future_get_result_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultAsArrays)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_as_arrays_result)
        return this.equals((future_get_result_as_arrays_result)that);
      return false;
    }

    public boolean equals(future_get_result_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_as_arrays_result typedOther = (future_get_result_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new ResultAsArrays();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_as_arrays_args implements org.apache.thrift.TBase<get_future_result_as_arrays_args, get_future_result_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_as_arrays_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_as_arrays_args.class, metaDataMap);
    }

    public get_future_result_as_arrays_args() {
      this.timeout_millis = 0;

    }

    public get_future_result_as_arrays_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_as_arrays_args(get_future_result_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public get_future_result_as_arrays_args deepCopy() {
      return new get_future_result_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public get_future_result_as_arrays_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public get_future_result_as_arrays_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_as_arrays_args)
        return this.equals((get_future_result_as_arrays_args)that);
      return false;
    }

    public boolean equals(get_future_result_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_as_arrays_args typedOther = (get_future_result_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_as_arrays_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_as_arrays_result implements org.apache.thrift.TBase<get_future_result_as_arrays_result, get_future_result_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ResultAsArrays success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultAsArrays.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_as_arrays_result.class, metaDataMap);
    }

    public get_future_result_as_arrays_result() {
    }

    public get_future_result_as_arrays_result(
      ResultAsArrays success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_as_arrays_result(get_future_result_as_arrays_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultAsArrays(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_future_result_as_arrays_result deepCopy() {
      return new get_future_result_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ResultAsArrays getSuccess() {
      return this.success;
    }

    public get_future_result_as_arrays_result setSuccess(ResultAsArrays success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_future_result_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultAsArrays)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_as_arrays_result)
        return this.equals((get_future_result_as_arrays_result)that);
      return false;
    }

    public boolean equals(get_future_result_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_as_arrays_result typedOther = (get_future_result_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new ResultAsArrays();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_serialized_args implements org.apache.thrift.TBase<future_get_result_serialized_args, future_get_result_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_serialized_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_serialized_args.class, metaDataMap);
    }

    public future_get_result_serialized_args() {
      this.timeout_millis = 0;

    }

    public future_get_result_serialized_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_serialized_args(future_get_result_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public future_get_result_serialized_args deepCopy() {
      return new future_get_result_serialized_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public future_get_result_serialized_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public future_get_result_serialized_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_serialized_args)
        return this.equals((future_get_result_serialized_args)that);
      return false;
    }

    public boolean equals(future_get_result_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_serialized_args typedOther = (future_get_result_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_serialized_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_get_result_serialized_result implements org.apache.thrift.TBase<future_get_result_serialized_result, future_get_result_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_get_result_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ResultSerialized success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultSerialized.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_get_result_serialized_result.class, metaDataMap);
    }

    public future_get_result_serialized_result() {
    }

    public future_get_result_serialized_result(
      ResultSerialized success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_get_result_serialized_result(future_get_result_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultSerialized(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_get_result_serialized_result deepCopy() {
      return new future_get_result_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ResultSerialized getSuccess() {
      return this.success;
    }

    public future_get_result_serialized_result setSuccess(ResultSerialized success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public future_get_result_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultSerialized)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_get_result_serialized_result)
        return this.equals((future_get_result_serialized_result)that);
      return false;
    }

    public boolean equals(future_get_result_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_get_result_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_get_result_serialized_result typedOther = (future_get_result_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new ResultSerialized();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_get_result_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_serialized_args implements org.apache.thrift.TBase<get_future_result_serialized_args, get_future_result_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_serialized_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TIMEOUT_MILLIS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeout_millis", org.apache.thrift.protocol.TType.I32, (short)2);

    public long ff; // required
    public int timeout_millis; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff"),
      TIMEOUT_MILLIS((short)2, "timeout_millis");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          case 2: // TIMEOUT_MILLIS
            return TIMEOUT_MILLIS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private static final int __TIMEOUT_MILLIS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.TIMEOUT_MILLIS, new org.apache.thrift.meta_data.FieldMetaData("timeout_millis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_serialized_args.class, metaDataMap);
    }

    public get_future_result_serialized_args() {
      this.timeout_millis = 0;

    }

    public get_future_result_serialized_args(
      long ff,
      int timeout_millis)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_serialized_args(get_future_result_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
      this.timeout_millis = other.timeout_millis;
    }

    public get_future_result_serialized_args deepCopy() {
      return new get_future_result_serialized_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
      this.timeout_millis = 0;

    }

    public long getFf() {
      return this.ff;
    }

    public get_future_result_serialized_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public int getTimeout_millis() {
      return this.timeout_millis;
    }

    public get_future_result_serialized_args setTimeout_millis(int timeout_millis) {
      this.timeout_millis = timeout_millis;
      setTimeout_millisIsSet(true);
      return this;
    }

    public void unsetTimeout_millis() {
      __isset_bit_vector.clear(__TIMEOUT_MILLIS_ISSET_ID);
    }

    /** Returns true if field timeout_millis is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeout_millis() {
      return __isset_bit_vector.get(__TIMEOUT_MILLIS_ISSET_ID);
    }

    public void setTimeout_millisIsSet(boolean value) {
      __isset_bit_vector.set(__TIMEOUT_MILLIS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      case TIMEOUT_MILLIS:
        if (value == null) {
          unsetTimeout_millis();
        } else {
          setTimeout_millis((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      case TIMEOUT_MILLIS:
        return Integer.valueOf(getTimeout_millis());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      case TIMEOUT_MILLIS:
        return isSetTimeout_millis();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_serialized_args)
        return this.equals((get_future_result_serialized_args)that);
      return false;
    }

    public boolean equals(get_future_result_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      boolean this_present_timeout_millis = true;
      boolean that_present_timeout_millis = true;
      if (this_present_timeout_millis || that_present_timeout_millis) {
        if (!(this_present_timeout_millis && that_present_timeout_millis))
          return false;
        if (this.timeout_millis != that.timeout_millis)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_serialized_args typedOther = (get_future_result_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimeout_millis()).compareTo(typedOther.isSetTimeout_millis());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeout_millis()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeout_millis, typedOther.timeout_millis);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TIMEOUT_MILLIS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.timeout_millis = iprot.readI32();
              setTimeout_millisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMEOUT_MILLIS_FIELD_DESC);
      oprot.writeI32(this.timeout_millis);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_serialized_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeout_millis:");
      sb.append(this.timeout_millis);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_future_result_serialized_result implements org.apache.thrift.TBase<get_future_result_serialized_result, get_future_result_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_future_result_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ResultSerialized success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultSerialized.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_future_result_serialized_result.class, metaDataMap);
    }

    public get_future_result_serialized_result() {
    }

    public get_future_result_serialized_result(
      ResultSerialized success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_future_result_serialized_result(get_future_result_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultSerialized(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_future_result_serialized_result deepCopy() {
      return new get_future_result_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ResultSerialized getSuccess() {
      return this.success;
    }

    public get_future_result_serialized_result setSuccess(ResultSerialized success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_future_result_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultSerialized)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_future_result_serialized_result)
        return this.equals((get_future_result_serialized_result)that);
      return false;
    }

    public boolean equals(get_future_result_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_future_result_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_future_result_serialized_result typedOther = (get_future_result_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new ResultSerialized();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_future_result_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_empty_args implements org.apache.thrift.TBase<future_is_empty_args, future_is_empty_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_empty_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_empty_args.class, metaDataMap);
    }

    public future_is_empty_args() {
    }

    public future_is_empty_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_empty_args(future_is_empty_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_is_empty_args deepCopy() {
      return new future_is_empty_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_is_empty_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_empty_args)
        return this.equals((future_is_empty_args)that);
      return false;
    }

    public boolean equals(future_is_empty_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_empty_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_empty_args typedOther = (future_is_empty_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_empty_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_empty_result implements org.apache.thrift.TBase<future_is_empty_result, future_is_empty_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_empty_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_empty_result.class, metaDataMap);
    }

    public future_is_empty_result() {
    }

    public future_is_empty_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_empty_result(future_is_empty_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_is_empty_result deepCopy() {
      return new future_is_empty_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public future_is_empty_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public future_is_empty_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_empty_result)
        return this.equals((future_is_empty_result)that);
      return false;
    }

    public boolean equals(future_is_empty_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_empty_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_empty_result typedOther = (future_is_empty_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_empty_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_full_args implements org.apache.thrift.TBase<future_is_full_args, future_is_full_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_full_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_full_args.class, metaDataMap);
    }

    public future_is_full_args() {
    }

    public future_is_full_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_full_args(future_is_full_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_is_full_args deepCopy() {
      return new future_is_full_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_is_full_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_full_args)
        return this.equals((future_is_full_args)that);
      return false;
    }

    public boolean equals(future_is_full_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_full_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_full_args typedOther = (future_is_full_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_full_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_full_result implements org.apache.thrift.TBase<future_is_full_result, future_is_full_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_full_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_full_result.class, metaDataMap);
    }

    public future_is_full_result() {
    }

    public future_is_full_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_full_result(future_is_full_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_is_full_result deepCopy() {
      return new future_is_full_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public future_is_full_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public future_is_full_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_full_result)
        return this.equals((future_is_full_result)that);
      return false;
    }

    public boolean equals(future_is_full_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_full_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_full_result typedOther = (future_is_full_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_full_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_cancelled_args implements org.apache.thrift.TBase<future_is_cancelled_args, future_is_cancelled_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_cancelled_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_cancelled_args.class, metaDataMap);
    }

    public future_is_cancelled_args() {
    }

    public future_is_cancelled_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_cancelled_args(future_is_cancelled_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_is_cancelled_args deepCopy() {
      return new future_is_cancelled_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_is_cancelled_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_cancelled_args)
        return this.equals((future_is_cancelled_args)that);
      return false;
    }

    public boolean equals(future_is_cancelled_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_cancelled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_cancelled_args typedOther = (future_is_cancelled_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_cancelled_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_is_cancelled_result implements org.apache.thrift.TBase<future_is_cancelled_result, future_is_cancelled_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_is_cancelled_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_is_cancelled_result.class, metaDataMap);
    }

    public future_is_cancelled_result() {
    }

    public future_is_cancelled_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_is_cancelled_result(future_is_cancelled_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_is_cancelled_result deepCopy() {
      return new future_is_cancelled_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public future_is_cancelled_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public future_is_cancelled_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_is_cancelled_result)
        return this.equals((future_is_cancelled_result)that);
      return false;
    }

    public boolean equals(future_is_cancelled_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_is_cancelled_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_is_cancelled_result typedOther = (future_is_cancelled_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_is_cancelled_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_has_outstanding_args implements org.apache.thrift.TBase<future_has_outstanding_args, future_has_outstanding_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_has_outstanding_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_has_outstanding_args.class, metaDataMap);
    }

    public future_has_outstanding_args() {
    }

    public future_has_outstanding_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_has_outstanding_args(future_has_outstanding_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_has_outstanding_args deepCopy() {
      return new future_has_outstanding_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_has_outstanding_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_has_outstanding_args)
        return this.equals((future_has_outstanding_args)that);
      return false;
    }

    public boolean equals(future_has_outstanding_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_has_outstanding_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_has_outstanding_args typedOther = (future_has_outstanding_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_has_outstanding_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_has_outstanding_result implements org.apache.thrift.TBase<future_has_outstanding_result, future_has_outstanding_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_has_outstanding_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_has_outstanding_result.class, metaDataMap);
    }

    public future_has_outstanding_result() {
    }

    public future_has_outstanding_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_has_outstanding_result(future_has_outstanding_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_has_outstanding_result deepCopy() {
      return new future_has_outstanding_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public future_has_outstanding_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public future_has_outstanding_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_has_outstanding_result)
        return this.equals((future_has_outstanding_result)that);
      return false;
    }

    public boolean equals(future_has_outstanding_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_has_outstanding_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_has_outstanding_result typedOther = (future_has_outstanding_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_has_outstanding_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_close_args implements org.apache.thrift.TBase<future_close_args, future_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_close_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_close_args.class, metaDataMap);
    }

    public future_close_args() {
    }

    public future_close_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_close_args(future_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public future_close_args deepCopy() {
      return new future_close_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public future_close_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_close_args)
        return this.equals((future_close_args)that);
      return false;
    }

    public boolean equals(future_close_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_close_args typedOther = (future_close_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_close_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class future_close_result implements org.apache.thrift.TBase<future_close_result, future_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("future_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(future_close_result.class, metaDataMap);
    }

    public future_close_result() {
    }

    public future_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public future_close_result(future_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public future_close_result deepCopy() {
      return new future_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public future_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof future_close_result)
        return this.equals((future_close_result)that);
      return false;
    }

    public boolean equals(future_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(future_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      future_close_result typedOther = (future_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("future_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_future_args implements org.apache.thrift.TBase<close_future_args, close_future_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_future_args");

    private static final org.apache.thrift.protocol.TField FF_FIELD_DESC = new org.apache.thrift.protocol.TField("ff", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ff; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FF((short)1, "ff");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FF
            return FF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FF_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FF, new org.apache.thrift.meta_data.FieldMetaData("ff", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_future_args.class, metaDataMap);
    }

    public close_future_args() {
    }

    public close_future_args(
      long ff)
    {
      this();
      this.ff = ff;
      setFfIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_future_args(close_future_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ff = other.ff;
    }

    public close_future_args deepCopy() {
      return new close_future_args(this);
    }

    @Override
    public void clear() {
      setFfIsSet(false);
      this.ff = 0;
    }

    public long getFf() {
      return this.ff;
    }

    public close_future_args setFf(long ff) {
      this.ff = ff;
      setFfIsSet(true);
      return this;
    }

    public void unsetFf() {
      __isset_bit_vector.clear(__FF_ISSET_ID);
    }

    /** Returns true if field ff is set (has been assigned a value) and false otherwise */
    public boolean isSetFf() {
      return __isset_bit_vector.get(__FF_ISSET_ID);
    }

    public void setFfIsSet(boolean value) {
      __isset_bit_vector.set(__FF_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FF:
        if (value == null) {
          unsetFf();
        } else {
          setFf((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FF:
        return Long.valueOf(getFf());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FF:
        return isSetFf();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_future_args)
        return this.equals((close_future_args)that);
      return false;
    }

    public boolean equals(close_future_args that) {
      if (that == null)
        return false;

      boolean this_present_ff = true;
      boolean that_present_ff = true;
      if (this_present_ff || that_present_ff) {
        if (!(this_present_ff && that_present_ff))
          return false;
        if (this.ff != that.ff)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_future_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_future_args typedOther = (close_future_args)other;

      lastComparison = Boolean.valueOf(isSetFf()).compareTo(typedOther.isSetFf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ff, typedOther.ff);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // FF
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ff = iprot.readI64();
              setFfIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FF_FIELD_DESC);
      oprot.writeI64(this.ff);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_future_args(");
      boolean first = true;

      sb.append("ff:");
      sb.append(this.ff);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_future_result implements org.apache.thrift.TBase<close_future_result, close_future_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_future_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_future_result.class, metaDataMap);
    }

    public close_future_result() {
    }

    public close_future_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_future_result(close_future_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_future_result deepCopy() {
      return new close_future_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_future_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_future_result)
        return this.equals((close_future_result)that);
      return false;
    }

    public boolean equals(close_future_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_future_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_future_result typedOther = (close_future_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_future_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_open_args implements org.apache.thrift.TBase<scanner_open_args, scanner_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_open_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCAN_SPEC((short)3, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_open_args.class, metaDataMap);
    }

    public scanner_open_args() {
    }

    public scanner_open_args(
      long ns,
      String table_name,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_open_args(scanner_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public scanner_open_args deepCopy() {
      return new scanner_open_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public scanner_open_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public scanner_open_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public scanner_open_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_open_args)
        return this.equals((scanner_open_args)that);
      return false;
    }

    public boolean equals(scanner_open_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_open_args typedOther = (scanner_open_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_open_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_open_result implements org.apache.thrift.TBase<scanner_open_result, scanner_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_open_result.class, metaDataMap);
    }

    public scanner_open_result() {
    }

    public scanner_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_open_result(scanner_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_open_result deepCopy() {
      return new scanner_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public scanner_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_open_result)
        return this.equals((scanner_open_result)that);
      return false;
    }

    public boolean equals(scanner_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_open_result typedOther = (scanner_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_scanner_args implements org.apache.thrift.TBase<open_scanner_args, open_scanner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_scanner_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCAN_SPEC((short)3, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_scanner_args.class, metaDataMap);
    }

    public open_scanner_args() {
    }

    public open_scanner_args(
      long ns,
      String table_name,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_args(open_scanner_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public open_scanner_args deepCopy() {
      return new open_scanner_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public open_scanner_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public open_scanner_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public open_scanner_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_args)
        return this.equals((open_scanner_args)that);
      return false;
    }

    public boolean equals(open_scanner_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_scanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_scanner_args typedOther = (open_scanner_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_scanner_result implements org.apache.thrift.TBase<open_scanner_result, open_scanner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_scanner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_scanner_result.class, metaDataMap);
    }

    public open_scanner_result() {
    }

    public open_scanner_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_result(open_scanner_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_scanner_result deepCopy() {
      return new open_scanner_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_scanner_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_scanner_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_result)
        return this.equals((open_scanner_result)that);
      return false;
    }

    public boolean equals(open_scanner_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_scanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_scanner_result typedOther = (open_scanner_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_open_args implements org.apache.thrift.TBase<async_scanner_open_args, async_scanner_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_open_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("future", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public long ns; // required
    public String table_name; // required
    public long future; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FUTURE((short)3, "future"),
      SCAN_SPEC((short)4, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FUTURE
            return FUTURE;
          case 4: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FUTURE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FUTURE, new org.apache.thrift.meta_data.FieldMetaData("future", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_open_args.class, metaDataMap);
    }

    public async_scanner_open_args() {
    }

    public async_scanner_open_args(
      long ns,
      String table_name,
      long future,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.future = future;
      setFutureIsSet(true);
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_open_args(async_scanner_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.future = other.future;
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public async_scanner_open_args deepCopy() {
      return new async_scanner_open_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      setFutureIsSet(false);
      this.future = 0;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public async_scanner_open_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public async_scanner_open_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getFuture() {
      return this.future;
    }

    public async_scanner_open_args setFuture(long future) {
      this.future = future;
      setFutureIsSet(true);
      return this;
    }

    public void unsetFuture() {
      __isset_bit_vector.clear(__FUTURE_ISSET_ID);
    }

    /** Returns true if field future is set (has been assigned a value) and false otherwise */
    public boolean isSetFuture() {
      return __isset_bit_vector.get(__FUTURE_ISSET_ID);
    }

    public void setFutureIsSet(boolean value) {
      __isset_bit_vector.set(__FUTURE_ISSET_ID, value);
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public async_scanner_open_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FUTURE:
        if (value == null) {
          unsetFuture();
        } else {
          setFuture((Long)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FUTURE:
        return Long.valueOf(getFuture());

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FUTURE:
        return isSetFuture();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_open_args)
        return this.equals((async_scanner_open_args)that);
      return false;
    }

    public boolean equals(async_scanner_open_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_future = true;
      boolean that_present_future = true;
      if (this_present_future || that_present_future) {
        if (!(this_present_future && that_present_future))
          return false;
        if (this.future != that.future)
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_open_args typedOther = (async_scanner_open_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFuture()).compareTo(typedOther.isSetFuture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.future, typedOther.future);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FUTURE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.future = iprot.readI64();
              setFutureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_FIELD_DESC);
      oprot.writeI64(this.future);
      oprot.writeFieldEnd();
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_open_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("future:");
      sb.append(this.future);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_open_result implements org.apache.thrift.TBase<async_scanner_open_result, async_scanner_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_open_result.class, metaDataMap);
    }

    public async_scanner_open_result() {
    }

    public async_scanner_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_open_result(async_scanner_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_scanner_open_result deepCopy() {
      return new async_scanner_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public async_scanner_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public async_scanner_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_open_result)
        return this.equals((async_scanner_open_result)that);
      return false;
    }

    public boolean equals(async_scanner_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_open_result typedOther = (async_scanner_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_scanner_async_args implements org.apache.thrift.TBase<open_scanner_async_args, open_scanner_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_scanner_async_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("future", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public long ns; // required
    public String table_name; // required
    public long future; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FUTURE((short)3, "future"),
      SCAN_SPEC((short)4, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FUTURE
            return FUTURE;
          case 4: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FUTURE_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FUTURE, new org.apache.thrift.meta_data.FieldMetaData("future", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_scanner_async_args.class, metaDataMap);
    }

    public open_scanner_async_args() {
    }

    public open_scanner_async_args(
      long ns,
      String table_name,
      long future,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.future = future;
      setFutureIsSet(true);
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_async_args(open_scanner_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.future = other.future;
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public open_scanner_async_args deepCopy() {
      return new open_scanner_async_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      setFutureIsSet(false);
      this.future = 0;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public open_scanner_async_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public open_scanner_async_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getFuture() {
      return this.future;
    }

    public open_scanner_async_args setFuture(long future) {
      this.future = future;
      setFutureIsSet(true);
      return this;
    }

    public void unsetFuture() {
      __isset_bit_vector.clear(__FUTURE_ISSET_ID);
    }

    /** Returns true if field future is set (has been assigned a value) and false otherwise */
    public boolean isSetFuture() {
      return __isset_bit_vector.get(__FUTURE_ISSET_ID);
    }

    public void setFutureIsSet(boolean value) {
      __isset_bit_vector.set(__FUTURE_ISSET_ID, value);
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public open_scanner_async_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FUTURE:
        if (value == null) {
          unsetFuture();
        } else {
          setFuture((Long)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FUTURE:
        return Long.valueOf(getFuture());

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FUTURE:
        return isSetFuture();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_async_args)
        return this.equals((open_scanner_async_args)that);
      return false;
    }

    public boolean equals(open_scanner_async_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_future = true;
      boolean that_present_future = true;
      if (this_present_future || that_present_future) {
        if (!(this_present_future && that_present_future))
          return false;
        if (this.future != that.future)
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_scanner_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_scanner_async_args typedOther = (open_scanner_async_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFuture()).compareTo(typedOther.isSetFuture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.future, typedOther.future);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FUTURE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.future = iprot.readI64();
              setFutureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_FIELD_DESC);
      oprot.writeI64(this.future);
      oprot.writeFieldEnd();
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_async_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("future:");
      sb.append(this.future);
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_scanner_async_result implements org.apache.thrift.TBase<open_scanner_async_result, open_scanner_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_scanner_async_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_scanner_async_result.class, metaDataMap);
    }

    public open_scanner_async_result() {
    }

    public open_scanner_async_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_scanner_async_result(open_scanner_async_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_scanner_async_result deepCopy() {
      return new open_scanner_async_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_scanner_async_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_scanner_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_scanner_async_result)
        return this.equals((open_scanner_async_result)that);
      return false;
    }

    public boolean equals(open_scanner_async_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_scanner_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_scanner_async_result typedOther = (open_scanner_async_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_scanner_async_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_close_args implements org.apache.thrift.TBase<scanner_close_args, scanner_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_close_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_close_args.class, metaDataMap);
    }

    public scanner_close_args() {
    }

    public scanner_close_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_close_args(scanner_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_close_args deepCopy() {
      return new scanner_close_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_close_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_close_args)
        return this.equals((scanner_close_args)that);
      return false;
    }

    public boolean equals(scanner_close_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_close_args typedOther = (scanner_close_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_close_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_close_result implements org.apache.thrift.TBase<scanner_close_result, scanner_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_close_result.class, metaDataMap);
    }

    public scanner_close_result() {
    }

    public scanner_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_close_result(scanner_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_close_result deepCopy() {
      return new scanner_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_close_result)
        return this.equals((scanner_close_result)that);
      return false;
    }

    public boolean equals(scanner_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_close_result typedOther = (scanner_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_scanner_args implements org.apache.thrift.TBase<close_scanner_args, close_scanner_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_args.class, metaDataMap);
    }

    public close_scanner_args() {
    }

    public close_scanner_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_args(close_scanner_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public close_scanner_args deepCopy() {
      return new close_scanner_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public close_scanner_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_args)
        return this.equals((close_scanner_args)that);
      return false;
    }

    public boolean equals(close_scanner_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_args typedOther = (close_scanner_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_scanner_result implements org.apache.thrift.TBase<close_scanner_result, close_scanner_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_result.class, metaDataMap);
    }

    public close_scanner_result() {
    }

    public close_scanner_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_result(close_scanner_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_scanner_result deepCopy() {
      return new close_scanner_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_scanner_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_result)
        return this.equals((close_scanner_result)that);
      return false;
    }

    public boolean equals(close_scanner_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_result typedOther = (close_scanner_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_cancel_args implements org.apache.thrift.TBase<async_scanner_cancel_args, async_scanner_cancel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_cancel_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_cancel_args.class, metaDataMap);
    }

    public async_scanner_cancel_args() {
    }

    public async_scanner_cancel_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_cancel_args(async_scanner_cancel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public async_scanner_cancel_args deepCopy() {
      return new async_scanner_cancel_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public async_scanner_cancel_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_cancel_args)
        return this.equals((async_scanner_cancel_args)that);
      return false;
    }

    public boolean equals(async_scanner_cancel_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_cancel_args typedOther = (async_scanner_cancel_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_cancel_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_cancel_result implements org.apache.thrift.TBase<async_scanner_cancel_result, async_scanner_cancel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_cancel_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_cancel_result.class, metaDataMap);
    }

    public async_scanner_cancel_result() {
    }

    public async_scanner_cancel_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_cancel_result(async_scanner_cancel_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_scanner_cancel_result deepCopy() {
      return new async_scanner_cancel_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_scanner_cancel_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_cancel_result)
        return this.equals((async_scanner_cancel_result)that);
      return false;
    }

    public boolean equals(async_scanner_cancel_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_cancel_result typedOther = (async_scanner_cancel_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_cancel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_scanner_async_args implements org.apache.thrift.TBase<cancel_scanner_async_args, cancel_scanner_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_scanner_async_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_scanner_async_args.class, metaDataMap);
    }

    public cancel_scanner_async_args() {
    }

    public cancel_scanner_async_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_scanner_async_args(cancel_scanner_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public cancel_scanner_async_args deepCopy() {
      return new cancel_scanner_async_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public cancel_scanner_async_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_scanner_async_args)
        return this.equals((cancel_scanner_async_args)that);
      return false;
    }

    public boolean equals(cancel_scanner_async_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_scanner_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_scanner_async_args typedOther = (cancel_scanner_async_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_scanner_async_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_scanner_async_result implements org.apache.thrift.TBase<cancel_scanner_async_result, cancel_scanner_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_scanner_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_scanner_async_result.class, metaDataMap);
    }

    public cancel_scanner_async_result() {
    }

    public cancel_scanner_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_scanner_async_result(cancel_scanner_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public cancel_scanner_async_result deepCopy() {
      return new cancel_scanner_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public cancel_scanner_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_scanner_async_result)
        return this.equals((cancel_scanner_async_result)that);
      return false;
    }

    public boolean equals(cancel_scanner_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_scanner_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_scanner_async_result typedOther = (cancel_scanner_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_scanner_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_close_args implements org.apache.thrift.TBase<async_scanner_close_args, async_scanner_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_close_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_close_args.class, metaDataMap);
    }

    public async_scanner_close_args() {
    }

    public async_scanner_close_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_close_args(async_scanner_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public async_scanner_close_args deepCopy() {
      return new async_scanner_close_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public async_scanner_close_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_close_args)
        return this.equals((async_scanner_close_args)that);
      return false;
    }

    public boolean equals(async_scanner_close_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_close_args typedOther = (async_scanner_close_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_close_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_scanner_close_result implements org.apache.thrift.TBase<async_scanner_close_result, async_scanner_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_scanner_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_scanner_close_result.class, metaDataMap);
    }

    public async_scanner_close_result() {
    }

    public async_scanner_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_scanner_close_result(async_scanner_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_scanner_close_result deepCopy() {
      return new async_scanner_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_scanner_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_scanner_close_result)
        return this.equals((async_scanner_close_result)that);
      return false;
    }

    public boolean equals(async_scanner_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_scanner_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_scanner_close_result typedOther = (async_scanner_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_scanner_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_scanner_async_args implements org.apache.thrift.TBase<close_scanner_async_args, close_scanner_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_async_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "ScannerAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_async_args.class, metaDataMap);
    }

    public close_scanner_async_args() {
    }

    public close_scanner_async_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_async_args(close_scanner_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public close_scanner_async_args deepCopy() {
      return new close_scanner_async_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public close_scanner_async_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_async_args)
        return this.equals((close_scanner_async_args)that);
      return false;
    }

    public boolean equals(close_scanner_async_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_async_args typedOther = (close_scanner_async_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_async_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_scanner_async_result implements org.apache.thrift.TBase<close_scanner_async_result, close_scanner_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_scanner_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_scanner_async_result.class, metaDataMap);
    }

    public close_scanner_async_result() {
    }

    public close_scanner_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_scanner_async_result(close_scanner_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_scanner_async_result deepCopy() {
      return new close_scanner_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_scanner_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_scanner_async_result)
        return this.equals((close_scanner_async_result)that);
      return false;
    }

    public boolean equals(close_scanner_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_scanner_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_scanner_async_result typedOther = (close_scanner_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_scanner_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_args implements org.apache.thrift.TBase<scanner_get_cells_args, scanner_get_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_args.class, metaDataMap);
    }

    public scanner_get_cells_args() {
    }

    public scanner_get_cells_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_args(scanner_get_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_cells_args deepCopy() {
      return new scanner_get_cells_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_cells_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_args)
        return this.equals((scanner_get_cells_args)that);
      return false;
    }

    public boolean equals(scanner_get_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_args typedOther = (scanner_get_cells_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_result implements org.apache.thrift.TBase<scanner_get_cells_result, scanner_get_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_result.class, metaDataMap);
    }

    public scanner_get_cells_result() {
    }

    public scanner_get_cells_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_result(scanner_get_cells_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_cells_result deepCopy() {
      return new scanner_get_cells_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public scanner_get_cells_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_result)
        return this.equals((scanner_get_cells_result)that);
      return false;
    }

    public boolean equals(scanner_get_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_result typedOther = (scanner_get_cells_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  Cell _elem44; // required
                  _elem44 = new Cell();
                  _elem44.read(iprot);
                  this.success.add(_elem44);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter45 : this.success)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_args implements org.apache.thrift.TBase<next_cells_args, next_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_args.class, metaDataMap);
    }

    public next_cells_args() {
    }

    public next_cells_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_args(next_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_cells_args deepCopy() {
      return new next_cells_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_cells_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_args)
        return this.equals((next_cells_args)that);
      return false;
    }

    public boolean equals(next_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_args typedOther = (next_cells_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_result implements org.apache.thrift.TBase<next_cells_result, next_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_result.class, metaDataMap);
    }

    public next_cells_result() {
    }

    public next_cells_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_result(next_cells_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_cells_result deepCopy() {
      return new next_cells_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public next_cells_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_result)
        return this.equals((next_cells_result)that);
      return false;
    }

    public boolean equals(next_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_result typedOther = (next_cells_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list46.size);
                for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                {
                  Cell _elem48; // required
                  _elem48 = new Cell();
                  _elem48.read(iprot);
                  this.success.add(_elem48);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter49 : this.success)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_as_arrays_args implements org.apache.thrift.TBase<scanner_get_cells_as_arrays_args, scanner_get_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_as_arrays_args.class, metaDataMap);
    }

    public scanner_get_cells_as_arrays_args() {
    }

    public scanner_get_cells_as_arrays_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_as_arrays_args(scanner_get_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_cells_as_arrays_args deepCopy() {
      return new scanner_get_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_cells_as_arrays_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_as_arrays_args)
        return this.equals((scanner_get_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(scanner_get_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_as_arrays_args typedOther = (scanner_get_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_as_arrays_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_as_arrays_result implements org.apache.thrift.TBase<scanner_get_cells_as_arrays_result, scanner_get_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_as_arrays_result.class, metaDataMap);
    }

    public scanner_get_cells_as_arrays_result() {
    }

    public scanner_get_cells_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_as_arrays_result(scanner_get_cells_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_cells_as_arrays_result deepCopy() {
      return new scanner_get_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public scanner_get_cells_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_as_arrays_result)
        return this.equals((scanner_get_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(scanner_get_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_as_arrays_result typedOther = (scanner_get_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list50.size);
                for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                {
                  List<String> _elem52; // required
                  {
                    org.apache.thrift.protocol.TList _list53 = iprot.readListBegin();
                    _elem52 = new ArrayList<String>(_list53.size);
                    for (int _i54 = 0; _i54 < _list53.size; ++_i54)
                    {
                      String _elem55; // required
                      _elem55 = iprot.readString();
                      _elem52.add(_elem55);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem52);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter56 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter56.size()));
              for (String _iter57 : _iter56)
              {
                oprot.writeString(_iter57);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_as_arrays_args implements org.apache.thrift.TBase<next_cells_as_arrays_args, next_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_as_arrays_args.class, metaDataMap);
    }

    public next_cells_as_arrays_args() {
    }

    public next_cells_as_arrays_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_as_arrays_args(next_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_cells_as_arrays_args deepCopy() {
      return new next_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_cells_as_arrays_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_as_arrays_args)
        return this.equals((next_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(next_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_as_arrays_args typedOther = (next_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_as_arrays_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_as_arrays_result implements org.apache.thrift.TBase<next_cells_as_arrays_result, next_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_as_arrays_result.class, metaDataMap);
    }

    public next_cells_as_arrays_result() {
    }

    public next_cells_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_as_arrays_result(next_cells_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_cells_as_arrays_result deepCopy() {
      return new next_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public next_cells_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_as_arrays_result)
        return this.equals((next_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(next_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_as_arrays_result typedOther = (next_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list58.size);
                for (int _i59 = 0; _i59 < _list58.size; ++_i59)
                {
                  List<String> _elem60; // required
                  {
                    org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                    _elem60 = new ArrayList<String>(_list61.size);
                    for (int _i62 = 0; _i62 < _list61.size; ++_i62)
                    {
                      String _elem63; // required
                      _elem63 = iprot.readString();
                      _elem60.add(_elem63);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem60);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter64 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter64.size()));
              for (String _iter65 : _iter64)
              {
                oprot.writeString(_iter65);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_serialized_args implements org.apache.thrift.TBase<scanner_get_cells_serialized_args, scanner_get_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_serialized_args.class, metaDataMap);
    }

    public scanner_get_cells_serialized_args() {
    }

    public scanner_get_cells_serialized_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_serialized_args(scanner_get_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_cells_serialized_args deepCopy() {
      return new scanner_get_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_cells_serialized_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_serialized_args)
        return this.equals((scanner_get_cells_serialized_args)that);
      return false;
    }

    public boolean equals(scanner_get_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_serialized_args typedOther = (scanner_get_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_serialized_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_cells_serialized_result implements org.apache.thrift.TBase<scanner_get_cells_serialized_result, scanner_get_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_cells_serialized_result.class, metaDataMap);
    }

    public scanner_get_cells_serialized_result() {
    }

    public scanner_get_cells_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_cells_serialized_result(scanner_get_cells_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_cells_serialized_result deepCopy() {
      return new scanner_get_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public scanner_get_cells_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public scanner_get_cells_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_cells_serialized_result)
        return this.equals((scanner_get_cells_serialized_result)that);
      return false;
    }

    public boolean equals(scanner_get_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_cells_serialized_result typedOther = (scanner_get_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_cells_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_serialized_args implements org.apache.thrift.TBase<next_cells_serialized_args, next_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_serialized_args.class, metaDataMap);
    }

    public next_cells_serialized_args() {
    }

    public next_cells_serialized_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_serialized_args(next_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_cells_serialized_args deepCopy() {
      return new next_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_cells_serialized_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_serialized_args)
        return this.equals((next_cells_serialized_args)that);
      return false;
    }

    public boolean equals(next_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_serialized_args typedOther = (next_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_serialized_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_cells_serialized_result implements org.apache.thrift.TBase<next_cells_serialized_result, next_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_cells_serialized_result.class, metaDataMap);
    }

    public next_cells_serialized_result() {
    }

    public next_cells_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_cells_serialized_result(next_cells_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_cells_serialized_result deepCopy() {
      return new next_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public next_cells_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public next_cells_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_cells_serialized_result)
        return this.equals((next_cells_serialized_result)that);
      return false;
    }

    public boolean equals(next_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_cells_serialized_result typedOther = (next_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_cells_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_args implements org.apache.thrift.TBase<scanner_get_row_args, scanner_get_row_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_args.class, metaDataMap);
    }

    public scanner_get_row_args() {
    }

    public scanner_get_row_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_args(scanner_get_row_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_row_args deepCopy() {
      return new scanner_get_row_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_row_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_args)
        return this.equals((scanner_get_row_args)that);
      return false;
    }

    public boolean equals(scanner_get_row_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_args typedOther = (scanner_get_row_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_result implements org.apache.thrift.TBase<scanner_get_row_result, scanner_get_row_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_result.class, metaDataMap);
    }

    public scanner_get_row_result() {
    }

    public scanner_get_row_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_result(scanner_get_row_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_row_result deepCopy() {
      return new scanner_get_row_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public scanner_get_row_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_row_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_result)
        return this.equals((scanner_get_row_result)that);
      return false;
    }

    public boolean equals(scanner_get_row_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_result typedOther = (scanner_get_row_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list66.size);
                for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                {
                  Cell _elem68; // required
                  _elem68 = new Cell();
                  _elem68.read(iprot);
                  this.success.add(_elem68);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter69 : this.success)
          {
            _iter69.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_args implements org.apache.thrift.TBase<next_row_args, next_row_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_args.class, metaDataMap);
    }

    public next_row_args() {
    }

    public next_row_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_args(next_row_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_row_args deepCopy() {
      return new next_row_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_row_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_args)
        return this.equals((next_row_args)that);
      return false;
    }

    public boolean equals(next_row_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_args typedOther = (next_row_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_result implements org.apache.thrift.TBase<next_row_result, next_row_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_result.class, metaDataMap);
    }

    public next_row_result() {
    }

    public next_row_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_result(next_row_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_row_result deepCopy() {
      return new next_row_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public next_row_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_row_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_result)
        return this.equals((next_row_result)that);
      return false;
    }

    public boolean equals(next_row_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_result typedOther = (next_row_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list70.size);
                for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                {
                  Cell _elem72; // required
                  _elem72 = new Cell();
                  _elem72.read(iprot);
                  this.success.add(_elem72);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter73 : this.success)
          {
            _iter73.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_as_arrays_args implements org.apache.thrift.TBase<scanner_get_row_as_arrays_args, scanner_get_row_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_as_arrays_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_as_arrays_args.class, metaDataMap);
    }

    public scanner_get_row_as_arrays_args() {
    }

    public scanner_get_row_as_arrays_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_as_arrays_args(scanner_get_row_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_row_as_arrays_args deepCopy() {
      return new scanner_get_row_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_row_as_arrays_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_as_arrays_args)
        return this.equals((scanner_get_row_as_arrays_args)that);
      return false;
    }

    public boolean equals(scanner_get_row_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_as_arrays_args typedOther = (scanner_get_row_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_as_arrays_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_as_arrays_result implements org.apache.thrift.TBase<scanner_get_row_as_arrays_result, scanner_get_row_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_as_arrays_result.class, metaDataMap);
    }

    public scanner_get_row_as_arrays_result() {
    }

    public scanner_get_row_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_as_arrays_result(scanner_get_row_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_row_as_arrays_result deepCopy() {
      return new scanner_get_row_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public scanner_get_row_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_row_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_as_arrays_result)
        return this.equals((scanner_get_row_as_arrays_result)that);
      return false;
    }

    public boolean equals(scanner_get_row_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_as_arrays_result typedOther = (scanner_get_row_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  List<String> _elem76; // required
                  {
                    org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                    _elem76 = new ArrayList<String>(_list77.size);
                    for (int _i78 = 0; _i78 < _list77.size; ++_i78)
                    {
                      String _elem79; // required
                      _elem79 = iprot.readString();
                      _elem76.add(_elem79);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem76);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter80 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter80.size()));
              for (String _iter81 : _iter80)
              {
                oprot.writeString(_iter81);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_as_arrays_args implements org.apache.thrift.TBase<next_row_as_arrays_args, next_row_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_as_arrays_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_as_arrays_args.class, metaDataMap);
    }

    public next_row_as_arrays_args() {
    }

    public next_row_as_arrays_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_as_arrays_args(next_row_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_row_as_arrays_args deepCopy() {
      return new next_row_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_row_as_arrays_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_as_arrays_args)
        return this.equals((next_row_as_arrays_args)that);
      return false;
    }

    public boolean equals(next_row_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_as_arrays_args typedOther = (next_row_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_as_arrays_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_as_arrays_result implements org.apache.thrift.TBase<next_row_as_arrays_result, next_row_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_as_arrays_result.class, metaDataMap);
    }

    public next_row_as_arrays_result() {
    }

    public next_row_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_as_arrays_result(next_row_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_row_as_arrays_result deepCopy() {
      return new next_row_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public next_row_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_row_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_as_arrays_result)
        return this.equals((next_row_as_arrays_result)that);
      return false;
    }

    public boolean equals(next_row_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_as_arrays_result typedOther = (next_row_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list82.size);
                for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                {
                  List<String> _elem84; // required
                  {
                    org.apache.thrift.protocol.TList _list85 = iprot.readListBegin();
                    _elem84 = new ArrayList<String>(_list85.size);
                    for (int _i86 = 0; _i86 < _list85.size; ++_i86)
                    {
                      String _elem87; // required
                      _elem87 = iprot.readString();
                      _elem84.add(_elem87);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem84);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter88 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter88.size()));
              for (String _iter89 : _iter88)
              {
                oprot.writeString(_iter89);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_serialized_args implements org.apache.thrift.TBase<scanner_get_row_serialized_args, scanner_get_row_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_serialized_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_serialized_args.class, metaDataMap);
    }

    public scanner_get_row_serialized_args() {
    }

    public scanner_get_row_serialized_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_serialized_args(scanner_get_row_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public scanner_get_row_serialized_args deepCopy() {
      return new scanner_get_row_serialized_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public scanner_get_row_serialized_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_serialized_args)
        return this.equals((scanner_get_row_serialized_args)that);
      return false;
    }

    public boolean equals(scanner_get_row_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_serialized_args typedOther = (scanner_get_row_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_serialized_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class scanner_get_row_serialized_result implements org.apache.thrift.TBase<scanner_get_row_serialized_result, scanner_get_row_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("scanner_get_row_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(scanner_get_row_serialized_result.class, metaDataMap);
    }

    public scanner_get_row_serialized_result() {
    }

    public scanner_get_row_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public scanner_get_row_serialized_result(scanner_get_row_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public scanner_get_row_serialized_result deepCopy() {
      return new scanner_get_row_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public scanner_get_row_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public scanner_get_row_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public scanner_get_row_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof scanner_get_row_serialized_result)
        return this.equals((scanner_get_row_serialized_result)that);
      return false;
    }

    public boolean equals(scanner_get_row_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(scanner_get_row_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      scanner_get_row_serialized_result typedOther = (scanner_get_row_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("scanner_get_row_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_serialized_args implements org.apache.thrift.TBase<next_row_serialized_args, next_row_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_serialized_args");

    private static final org.apache.thrift.protocol.TField SCANNER_FIELD_DESC = new org.apache.thrift.protocol.TField("scanner", org.apache.thrift.protocol.TType.I64, (short)1);

    public long scanner; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SCANNER((short)1, "scanner");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SCANNER
            return SCANNER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SCANNER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SCANNER, new org.apache.thrift.meta_data.FieldMetaData("scanner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Scanner")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_serialized_args.class, metaDataMap);
    }

    public next_row_serialized_args() {
    }

    public next_row_serialized_args(
      long scanner)
    {
      this();
      this.scanner = scanner;
      setScannerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_serialized_args(next_row_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.scanner = other.scanner;
    }

    public next_row_serialized_args deepCopy() {
      return new next_row_serialized_args(this);
    }

    @Override
    public void clear() {
      setScannerIsSet(false);
      this.scanner = 0;
    }

    public long getScanner() {
      return this.scanner;
    }

    public next_row_serialized_args setScanner(long scanner) {
      this.scanner = scanner;
      setScannerIsSet(true);
      return this;
    }

    public void unsetScanner() {
      __isset_bit_vector.clear(__SCANNER_ISSET_ID);
    }

    /** Returns true if field scanner is set (has been assigned a value) and false otherwise */
    public boolean isSetScanner() {
      return __isset_bit_vector.get(__SCANNER_ISSET_ID);
    }

    public void setScannerIsSet(boolean value) {
      __isset_bit_vector.set(__SCANNER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SCANNER:
        if (value == null) {
          unsetScanner();
        } else {
          setScanner((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCANNER:
        return Long.valueOf(getScanner());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SCANNER:
        return isSetScanner();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_serialized_args)
        return this.equals((next_row_serialized_args)that);
      return false;
    }

    public boolean equals(next_row_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_scanner = true;
      boolean that_present_scanner = true;
      if (this_present_scanner || that_present_scanner) {
        if (!(this_present_scanner && that_present_scanner))
          return false;
        if (this.scanner != that.scanner)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_serialized_args typedOther = (next_row_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetScanner()).compareTo(typedOther.isSetScanner());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScanner()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanner, typedOther.scanner);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SCANNER
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.scanner = iprot.readI64();
              setScannerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SCANNER_FIELD_DESC);
      oprot.writeI64(this.scanner);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_serialized_args(");
      boolean first = true;

      sb.append("scanner:");
      sb.append(this.scanner);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class next_row_serialized_result implements org.apache.thrift.TBase<next_row_serialized_result, next_row_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("next_row_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(next_row_serialized_result.class, metaDataMap);
    }

    public next_row_serialized_result() {
    }

    public next_row_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public next_row_serialized_result(next_row_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public next_row_serialized_result deepCopy() {
      return new next_row_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public next_row_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public next_row_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public next_row_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof next_row_serialized_result)
        return this.equals((next_row_serialized_result)that);
      return false;
    }

    public boolean equals(next_row_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(next_row_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      next_row_serialized_result typedOther = (next_row_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("next_row_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_args implements org.apache.thrift.TBase<get_row_args, get_row_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String row; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      ROW((short)3, "row");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ROW
            return ROW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_args.class, metaDataMap);
    }

    public get_row_args() {
    }

    public get_row_args(
      long ns,
      String table_name,
      String row)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.row = row;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_args(get_row_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetRow()) {
        this.row = other.row;
      }
    }

    public get_row_args deepCopy() {
      return new get_row_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.row = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_row_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_row_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getRow() {
      return this.row;
    }

    public get_row_args setRow(String row) {
      this.row = row;
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          setRow((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case ROW:
        return getRow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case ROW:
        return isSetRow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_args)
        return this.equals((get_row_args)that);
      return false;
    }

    public boolean equals(get_row_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_args typedOther = (get_row_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ROW
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.row = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        oprot.writeFieldBegin(ROW_FIELD_DESC);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        sb.append(this.row);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_result implements org.apache.thrift.TBase<get_row_result, get_row_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_result.class, metaDataMap);
    }

    public get_row_result() {
    }

    public get_row_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_result(get_row_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_row_result deepCopy() {
      return new get_row_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public get_row_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_row_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_result)
        return this.equals((get_row_result)that);
      return false;
    }

    public boolean equals(get_row_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_result typedOther = (get_row_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list90.size);
                for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                {
                  Cell _elem92; // required
                  _elem92 = new Cell();
                  _elem92.read(iprot);
                  this.success.add(_elem92);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter93 : this.success)
          {
            _iter93.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_as_arrays_args implements org.apache.thrift.TBase<get_row_as_arrays_args, get_row_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String name; // required
    public String row; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      ROW((short)3, "row");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // ROW
            return ROW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_as_arrays_args.class, metaDataMap);
    }

    public get_row_as_arrays_args() {
    }

    public get_row_as_arrays_args(
      long ns,
      String name,
      String row)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.row = row;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_as_arrays_args(get_row_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetRow()) {
        this.row = other.row;
      }
    }

    public get_row_as_arrays_args deepCopy() {
      return new get_row_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.row = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_row_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public get_row_as_arrays_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getRow() {
      return this.row;
    }

    public get_row_as_arrays_args setRow(String row) {
      this.row = row;
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          setRow((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case ROW:
        return getRow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case ROW:
        return isSetRow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_as_arrays_args)
        return this.equals((get_row_as_arrays_args)that);
      return false;
    }

    public boolean equals(get_row_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_as_arrays_args typedOther = (get_row_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ROW
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.row = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        oprot.writeFieldBegin(ROW_FIELD_DESC);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        sb.append(this.row);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_as_arrays_result implements org.apache.thrift.TBase<get_row_as_arrays_result, get_row_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_as_arrays_result.class, metaDataMap);
    }

    public get_row_as_arrays_result() {
    }

    public get_row_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_as_arrays_result(get_row_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_row_as_arrays_result deepCopy() {
      return new get_row_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public get_row_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_row_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_as_arrays_result)
        return this.equals((get_row_as_arrays_result)that);
      return false;
    }

    public boolean equals(get_row_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_as_arrays_result typedOther = (get_row_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list94.size);
                for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                {
                  List<String> _elem96; // required
                  {
                    org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                    _elem96 = new ArrayList<String>(_list97.size);
                    for (int _i98 = 0; _i98 < _list97.size; ++_i98)
                    {
                      String _elem99; // required
                      _elem99 = iprot.readString();
                      _elem96.add(_elem99);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem96);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter100 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter100.size()));
              for (String _iter101 : _iter100)
              {
                oprot.writeString(_iter101);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_serialized_args implements org.apache.thrift.TBase<get_row_serialized_args, get_row_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_serialized_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public String row; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      ROW((short)3, "row");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ROW
            return ROW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_serialized_args.class, metaDataMap);
    }

    public get_row_serialized_args() {
    }

    public get_row_serialized_args(
      long ns,
      String table_name,
      String row)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.row = row;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_serialized_args(get_row_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetRow()) {
        this.row = other.row;
      }
    }

    public get_row_serialized_args deepCopy() {
      return new get_row_serialized_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.row = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_row_serialized_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_row_serialized_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getRow() {
      return this.row;
    }

    public get_row_serialized_args setRow(String row) {
      this.row = row;
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          setRow((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case ROW:
        return getRow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case ROW:
        return isSetRow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_serialized_args)
        return this.equals((get_row_serialized_args)that);
      return false;
    }

    public boolean equals(get_row_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_serialized_args typedOther = (get_row_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ROW
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.row = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        oprot.writeFieldBegin(ROW_FIELD_DESC);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_serialized_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        sb.append(this.row);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_row_serialized_result implements org.apache.thrift.TBase<get_row_serialized_result, get_row_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_row_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_row_serialized_result.class, metaDataMap);
    }

    public get_row_serialized_result() {
    }

    public get_row_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_row_serialized_result(get_row_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_row_serialized_result deepCopy() {
      return new get_row_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public get_row_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public get_row_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_row_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_row_serialized_result)
        return this.equals((get_row_serialized_result)that);
      return false;
    }

    public boolean equals(get_row_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_row_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_row_serialized_result typedOther = (get_row_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_row_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cell_args implements org.apache.thrift.TBase<get_cell_args, get_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cell_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("row", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("column", org.apache.thrift.protocol.TType.STRING, (short)4);

    public long ns; // required
    public String table_name; // required
    public String row; // required
    public String column; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      ROW((short)3, "row"),
      COLUMN((short)4, "column");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // ROW
            return ROW;
          case 4: // COLUMN
            return COLUMN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ROW, new org.apache.thrift.meta_data.FieldMetaData("row", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COLUMN, new org.apache.thrift.meta_data.FieldMetaData("column", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cell_args.class, metaDataMap);
    }

    public get_cell_args() {
    }

    public get_cell_args(
      long ns,
      String table_name,
      String row,
      String column)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.row = row;
      this.column = column;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cell_args(get_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetRow()) {
        this.row = other.row;
      }
      if (other.isSetColumn()) {
        this.column = other.column;
      }
    }

    public get_cell_args deepCopy() {
      return new get_cell_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.row = null;
      this.column = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_cell_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_cell_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public String getRow() {
      return this.row;
    }

    public get_cell_args setRow(String row) {
      this.row = row;
      return this;
    }

    public void unsetRow() {
      this.row = null;
    }

    /** Returns true if field row is set (has been assigned a value) and false otherwise */
    public boolean isSetRow() {
      return this.row != null;
    }

    public void setRowIsSet(boolean value) {
      if (!value) {
        this.row = null;
      }
    }

    public String getColumn() {
      return this.column;
    }

    public get_cell_args setColumn(String column) {
      this.column = column;
      return this;
    }

    public void unsetColumn() {
      this.column = null;
    }

    /** Returns true if field column is set (has been assigned a value) and false otherwise */
    public boolean isSetColumn() {
      return this.column != null;
    }

    public void setColumnIsSet(boolean value) {
      if (!value) {
        this.column = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case ROW:
        if (value == null) {
          unsetRow();
        } else {
          setRow((String)value);
        }
        break;

      case COLUMN:
        if (value == null) {
          unsetColumn();
        } else {
          setColumn((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case ROW:
        return getRow();

      case COLUMN:
        return getColumn();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case ROW:
        return isSetRow();
      case COLUMN:
        return isSetColumn();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cell_args)
        return this.equals((get_cell_args)that);
      return false;
    }

    public boolean equals(get_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_row = true && this.isSetRow();
      boolean that_present_row = true && that.isSetRow();
      if (this_present_row || that_present_row) {
        if (!(this_present_row && that_present_row))
          return false;
        if (!this.row.equals(that.row))
          return false;
      }

      boolean this_present_column = true && this.isSetColumn();
      boolean that_present_column = true && that.isSetColumn();
      if (this_present_column || that_present_column) {
        if (!(this_present_column && that_present_column))
          return false;
        if (!this.column.equals(that.column))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cell_args typedOther = (get_cell_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRow()).compareTo(typedOther.isSetRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.row, typedOther.row);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ROW
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.row = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COLUMN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.column = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.row != null) {
        oprot.writeFieldBegin(ROW_FIELD_DESC);
        oprot.writeString(this.row);
        oprot.writeFieldEnd();
      }
      if (this.column != null) {
        oprot.writeFieldBegin(COLUMN_FIELD_DESC);
        oprot.writeString(this.column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cell_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("row:");
      if (this.row == null) {
        sb.append("null");
      } else {
        sb.append(this.row);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column:");
      if (this.column == null) {
        sb.append("null");
      } else {
        sb.append(this.column);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cell_result implements org.apache.thrift.TBase<get_cell_result, get_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cell_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Value")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cell_result.class, metaDataMap);
    }

    public get_cell_result() {
    }

    public get_cell_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cell_result(get_cell_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cell_result deepCopy() {
      return new get_cell_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public get_cell_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public get_cell_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cell_result)
        return this.equals((get_cell_result)that);
      return false;
    }

    public boolean equals(get_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cell_result typedOther = (get_cell_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cell_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_args implements org.apache.thrift.TBase<get_cells_args, get_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      SCAN_SPEC((short)3, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_args.class, metaDataMap);
    }

    public get_cells_args() {
    }

    public get_cells_args(
      long ns,
      String table_name,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_args(get_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public get_cells_args deepCopy() {
      return new get_cells_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_cells_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_cells_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public get_cells_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_args)
        return this.equals((get_cells_args)that);
      return false;
    }

    public boolean equals(get_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_args typedOther = (get_cells_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_result implements org.apache.thrift.TBase<get_cells_result, get_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<Cell> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_result.class, metaDataMap);
    }

    public get_cells_result() {
    }

    public get_cells_result(
      List<Cell> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_result(get_cells_result other) {
      if (other.isSetSuccess()) {
        List<Cell> __this__success = new ArrayList<Cell>();
        for (Cell other_element : other.success) {
          __this__success.add(new Cell(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cells_result deepCopy() {
      return new get_cells_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Cell> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Cell elem) {
      if (this.success == null) {
        this.success = new ArrayList<Cell>();
      }
      this.success.add(elem);
    }

    public List<Cell> getSuccess() {
      return this.success;
    }

    public get_cells_result setSuccess(List<Cell> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Cell>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_result)
        return this.equals((get_cells_result)that);
      return false;
    }

    public boolean equals(get_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_result typedOther = (get_cells_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                this.success = new ArrayList<Cell>(_list102.size);
                for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                {
                  Cell _elem104; // required
                  _elem104 = new Cell();
                  _elem104.read(iprot);
                  this.success.add(_elem104);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Cell _iter105 : this.success)
          {
            _iter105.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_as_arrays_args implements org.apache.thrift.TBase<get_cells_as_arrays_args, get_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String name; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      SCAN_SPEC((short)3, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_as_arrays_args.class, metaDataMap);
    }

    public get_cells_as_arrays_args() {
    }

    public get_cells_as_arrays_args(
      long ns,
      String name,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_as_arrays_args(get_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public get_cells_as_arrays_args deepCopy() {
      return new get_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_cells_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public get_cells_as_arrays_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public get_cells_as_arrays_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_as_arrays_args)
        return this.equals((get_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(get_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_as_arrays_args typedOther = (get_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_as_arrays_result implements org.apache.thrift.TBase<get_cells_as_arrays_result, get_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<List<String>> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_as_arrays_result.class, metaDataMap);
    }

    public get_cells_as_arrays_result() {
    }

    public get_cells_as_arrays_result(
      List<List<String>> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_as_arrays_result(get_cells_as_arrays_result other) {
      if (other.isSetSuccess()) {
        List<List<String>> __this__success = new ArrayList<List<String>>();
        for (List<String> other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cells_as_arrays_result deepCopy() {
      return new get_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<List<String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(List<String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<List<String>>();
      }
      this.success.add(elem);
    }

    public List<List<String>> getSuccess() {
      return this.success;
    }

    public get_cells_as_arrays_result setSuccess(List<List<String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<List<String>>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_as_arrays_result)
        return this.equals((get_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(get_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_as_arrays_result typedOther = (get_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                this.success = new ArrayList<List<String>>(_list106.size);
                for (int _i107 = 0; _i107 < _list106.size; ++_i107)
                {
                  List<String> _elem108; // required
                  {
                    org.apache.thrift.protocol.TList _list109 = iprot.readListBegin();
                    _elem108 = new ArrayList<String>(_list109.size);
                    for (int _i110 = 0; _i110 < _list109.size; ++_i110)
                    {
                      String _elem111; // required
                      _elem111 = iprot.readString();
                      _elem108.add(_elem111);
                    }
                    iprot.readListEnd();
                  }
                  this.success.add(_elem108);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (List<String> _iter112 : this.success)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter112.size()));
              for (String _iter113 : _iter112)
              {
                oprot.writeString(_iter113);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_as_arrays_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_serialized_args implements org.apache.thrift.TBase<get_cells_serialized_args, get_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SCAN_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("scan_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String name; // required
    public ScanSpec scan_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      SCAN_SPEC((short)3, "scan_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // SCAN_SPEC
            return SCAN_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCAN_SPEC, new org.apache.thrift.meta_data.FieldMetaData("scan_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScanSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_serialized_args.class, metaDataMap);
    }

    public get_cells_serialized_args() {
    }

    public get_cells_serialized_args(
      long ns,
      String name,
      ScanSpec scan_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.scan_spec = scan_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_serialized_args(get_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetScan_spec()) {
        this.scan_spec = new ScanSpec(other.scan_spec);
      }
    }

    public get_cells_serialized_args deepCopy() {
      return new get_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.scan_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_cells_serialized_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public get_cells_serialized_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public ScanSpec getScan_spec() {
      return this.scan_spec;
    }

    public get_cells_serialized_args setScan_spec(ScanSpec scan_spec) {
      this.scan_spec = scan_spec;
      return this;
    }

    public void unsetScan_spec() {
      this.scan_spec = null;
    }

    /** Returns true if field scan_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetScan_spec() {
      return this.scan_spec != null;
    }

    public void setScan_specIsSet(boolean value) {
      if (!value) {
        this.scan_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case SCAN_SPEC:
        if (value == null) {
          unsetScan_spec();
        } else {
          setScan_spec((ScanSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case SCAN_SPEC:
        return getScan_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case SCAN_SPEC:
        return isSetScan_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_serialized_args)
        return this.equals((get_cells_serialized_args)that);
      return false;
    }

    public boolean equals(get_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_scan_spec = true && this.isSetScan_spec();
      boolean that_present_scan_spec = true && that.isSetScan_spec();
      if (this_present_scan_spec || that_present_scan_spec) {
        if (!(this_present_scan_spec && that_present_scan_spec))
          return false;
        if (!this.scan_spec.equals(that.scan_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_serialized_args typedOther = (get_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScan_spec()).compareTo(typedOther.isSetScan_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScan_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scan_spec, typedOther.scan_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SCAN_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.scan_spec = new ScanSpec();
              this.scan_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.scan_spec != null) {
        oprot.writeFieldBegin(SCAN_SPEC_FIELD_DESC);
        this.scan_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_serialized_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scan_spec:");
      if (this.scan_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.scan_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_cells_serialized_result implements org.apache.thrift.TBase<get_cells_serialized_result, get_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ByteBuffer success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_cells_serialized_result.class, metaDataMap);
    }

    public get_cells_serialized_result() {
    }

    public get_cells_serialized_result(
      ByteBuffer success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_cells_serialized_result(get_cells_serialized_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_cells_serialized_result deepCopy() {
      return new get_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public get_cells_serialized_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public get_cells_serialized_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_cells_serialized_result)
        return this.equals((get_cells_serialized_result)that);
      return false;
    }

    public boolean equals(get_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_cells_serialized_result typedOther = (get_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_cells_serialized_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_refresh_args implements org.apache.thrift.TBase<shared_mutator_refresh_args, shared_mutator_refresh_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_refresh_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_refresh_args.class, metaDataMap);
    }

    public shared_mutator_refresh_args() {
    }

    public shared_mutator_refresh_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_refresh_args(shared_mutator_refresh_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
    }

    public shared_mutator_refresh_args deepCopy() {
      return new shared_mutator_refresh_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public shared_mutator_refresh_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public shared_mutator_refresh_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public shared_mutator_refresh_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_refresh_args)
        return this.equals((shared_mutator_refresh_args)that);
      return false;
    }

    public boolean equals(shared_mutator_refresh_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_refresh_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_refresh_args typedOther = (shared_mutator_refresh_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_refresh_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_refresh_result implements org.apache.thrift.TBase<shared_mutator_refresh_result, shared_mutator_refresh_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_refresh_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_refresh_result.class, metaDataMap);
    }

    public shared_mutator_refresh_result() {
    }

    public shared_mutator_refresh_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_refresh_result(shared_mutator_refresh_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public shared_mutator_refresh_result deepCopy() {
      return new shared_mutator_refresh_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public shared_mutator_refresh_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_refresh_result)
        return this.equals((shared_mutator_refresh_result)that);
      return false;
    }

    public boolean equals(shared_mutator_refresh_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_refresh_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_refresh_result typedOther = (shared_mutator_refresh_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_refresh_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class refresh_shared_mutator_args implements org.apache.thrift.TBase<refresh_shared_mutator_args, refresh_shared_mutator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refresh_shared_mutator_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refresh_shared_mutator_args.class, metaDataMap);
    }

    public refresh_shared_mutator_args() {
    }

    public refresh_shared_mutator_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refresh_shared_mutator_args(refresh_shared_mutator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
    }

    public refresh_shared_mutator_args deepCopy() {
      return new refresh_shared_mutator_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
    }

    public long getNs() {
      return this.ns;
    }

    public refresh_shared_mutator_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public refresh_shared_mutator_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public refresh_shared_mutator_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refresh_shared_mutator_args)
        return this.equals((refresh_shared_mutator_args)that);
      return false;
    }

    public boolean equals(refresh_shared_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refresh_shared_mutator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refresh_shared_mutator_args typedOther = (refresh_shared_mutator_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refresh_shared_mutator_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class refresh_shared_mutator_result implements org.apache.thrift.TBase<refresh_shared_mutator_result, refresh_shared_mutator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refresh_shared_mutator_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refresh_shared_mutator_result.class, metaDataMap);
    }

    public refresh_shared_mutator_result() {
    }

    public refresh_shared_mutator_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refresh_shared_mutator_result(refresh_shared_mutator_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public refresh_shared_mutator_result deepCopy() {
      return new refresh_shared_mutator_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public refresh_shared_mutator_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refresh_shared_mutator_result)
        return this.equals((refresh_shared_mutator_result)that);
      return false;
    }

    public boolean equals(refresh_shared_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refresh_shared_mutator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refresh_shared_mutator_result typedOther = (refresh_shared_mutator_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refresh_shared_mutator_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cells_args implements org.apache.thrift.TBase<shared_mutator_set_cells_args, shared_mutator_set_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cells_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELLS((short)4, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cells_args.class, metaDataMap);
    }

    public shared_mutator_set_cells_args() {
    }

    public shared_mutator_set_cells_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<Cell> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cells_args(shared_mutator_set_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public shared_mutator_set_cells_args deepCopy() {
      return new shared_mutator_set_cells_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public shared_mutator_set_cells_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public shared_mutator_set_cells_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public shared_mutator_set_cells_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public shared_mutator_set_cells_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cells_args)
        return this.equals((shared_mutator_set_cells_args)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cells_args typedOther = (shared_mutator_set_cells_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list114.size);
                for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                {
                  Cell _elem116; // required
                  _elem116 = new Cell();
                  _elem116.read(iprot);
                  this.cells.add(_elem116);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter117 : this.cells)
          {
            _iter117.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cells_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cells_result implements org.apache.thrift.TBase<shared_mutator_set_cells_result, shared_mutator_set_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cells_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cells_result.class, metaDataMap);
    }

    public shared_mutator_set_cells_result() {
    }

    public shared_mutator_set_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cells_result(shared_mutator_set_cells_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public shared_mutator_set_cells_result deepCopy() {
      return new shared_mutator_set_cells_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public shared_mutator_set_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cells_result)
        return this.equals((shared_mutator_set_cells_result)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cells_result typedOther = (shared_mutator_set_cells_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cells_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cells_args implements org.apache.thrift.TBase<offer_cells_args, offer_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cells_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELLS((short)4, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cells_args.class, metaDataMap);
    }

    public offer_cells_args() {
    }

    public offer_cells_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<Cell> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cells_args(offer_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public offer_cells_args deepCopy() {
      return new offer_cells_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public offer_cells_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public offer_cells_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public offer_cells_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public offer_cells_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cells_args)
        return this.equals((offer_cells_args)that);
      return false;
    }

    public boolean equals(offer_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cells_args typedOther = (offer_cells_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list118.size);
                for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                {
                  Cell _elem120; // required
                  _elem120 = new Cell();
                  _elem120.read(iprot);
                  this.cells.add(_elem120);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter121 : this.cells)
          {
            _iter121.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cells_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cells_result implements org.apache.thrift.TBase<offer_cells_result, offer_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cells_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cells_result.class, metaDataMap);
    }

    public offer_cells_result() {
    }

    public offer_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cells_result(offer_cells_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public offer_cells_result deepCopy() {
      return new offer_cells_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public offer_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cells_result)
        return this.equals((offer_cells_result)that);
      return false;
    }

    public boolean equals(offer_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cells_result typedOther = (offer_cells_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cells_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cells_as_arrays_args implements org.apache.thrift.TBase<shared_mutator_set_cells_as_arrays_args, shared_mutator_set_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELLS((short)4, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cells_as_arrays_args.class, metaDataMap);
    }

    public shared_mutator_set_cells_as_arrays_args() {
    }

    public shared_mutator_set_cells_as_arrays_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<List<String>> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cells_as_arrays_args(shared_mutator_set_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public shared_mutator_set_cells_as_arrays_args deepCopy() {
      return new shared_mutator_set_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public shared_mutator_set_cells_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public shared_mutator_set_cells_as_arrays_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public shared_mutator_set_cells_as_arrays_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public shared_mutator_set_cells_as_arrays_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cells_as_arrays_args)
        return this.equals((shared_mutator_set_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cells_as_arrays_args typedOther = (shared_mutator_set_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list122.size);
                for (int _i123 = 0; _i123 < _list122.size; ++_i123)
                {
                  List<String> _elem124; // required
                  {
                    org.apache.thrift.protocol.TList _list125 = iprot.readListBegin();
                    _elem124 = new ArrayList<String>(_list125.size);
                    for (int _i126 = 0; _i126 < _list125.size; ++_i126)
                    {
                      String _elem127; // required
                      _elem127 = iprot.readString();
                      _elem124.add(_elem127);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem124);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter128 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter128.size()));
              for (String _iter129 : _iter128)
              {
                oprot.writeString(_iter129);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cells_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cells_as_arrays_result implements org.apache.thrift.TBase<shared_mutator_set_cells_as_arrays_result, shared_mutator_set_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cells_as_arrays_result.class, metaDataMap);
    }

    public shared_mutator_set_cells_as_arrays_result() {
    }

    public shared_mutator_set_cells_as_arrays_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cells_as_arrays_result(shared_mutator_set_cells_as_arrays_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public shared_mutator_set_cells_as_arrays_result deepCopy() {
      return new shared_mutator_set_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public shared_mutator_set_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cells_as_arrays_result)
        return this.equals((shared_mutator_set_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cells_as_arrays_result typedOther = (shared_mutator_set_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cells_as_arrays_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cells_as_arrays_args implements org.apache.thrift.TBase<offer_cells_as_arrays_args, offer_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELLS((short)4, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cells_as_arrays_args.class, metaDataMap);
    }

    public offer_cells_as_arrays_args() {
    }

    public offer_cells_as_arrays_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<List<String>> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cells_as_arrays_args(offer_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public offer_cells_as_arrays_args deepCopy() {
      return new offer_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public offer_cells_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public offer_cells_as_arrays_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public offer_cells_as_arrays_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public offer_cells_as_arrays_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cells_as_arrays_args)
        return this.equals((offer_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(offer_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cells_as_arrays_args typedOther = (offer_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list130.size);
                for (int _i131 = 0; _i131 < _list130.size; ++_i131)
                {
                  List<String> _elem132; // required
                  {
                    org.apache.thrift.protocol.TList _list133 = iprot.readListBegin();
                    _elem132 = new ArrayList<String>(_list133.size);
                    for (int _i134 = 0; _i134 < _list133.size; ++_i134)
                    {
                      String _elem135; // required
                      _elem135 = iprot.readString();
                      _elem132.add(_elem135);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem132);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter136 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter136.size()));
              for (String _iter137 : _iter136)
              {
                oprot.writeString(_iter137);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cells_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cells_as_arrays_result implements org.apache.thrift.TBase<offer_cells_as_arrays_result, offer_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cells_as_arrays_result.class, metaDataMap);
    }

    public offer_cells_as_arrays_result() {
    }

    public offer_cells_as_arrays_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cells_as_arrays_result(offer_cells_as_arrays_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public offer_cells_as_arrays_result deepCopy() {
      return new offer_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public offer_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cells_as_arrays_result)
        return this.equals((offer_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(offer_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cells_as_arrays_result typedOther = (offer_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cells_as_arrays_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cell_args implements org.apache.thrift.TBase<shared_mutator_set_cell_args, shared_mutator_set_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cell_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELL((short)4, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cell_args.class, metaDataMap);
    }

    public shared_mutator_set_cell_args() {
    }

    public shared_mutator_set_cell_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      Cell cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cell_args(shared_mutator_set_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public shared_mutator_set_cell_args deepCopy() {
      return new shared_mutator_set_cell_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public shared_mutator_set_cell_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public shared_mutator_set_cell_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public shared_mutator_set_cell_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public Cell getCell() {
      return this.cell;
    }

    public shared_mutator_set_cell_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cell_args)
        return this.equals((shared_mutator_set_cell_args)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cell_args typedOther = (shared_mutator_set_cell_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cell_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cell_result implements org.apache.thrift.TBase<shared_mutator_set_cell_result, shared_mutator_set_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cell_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cell_result.class, metaDataMap);
    }

    public shared_mutator_set_cell_result() {
    }

    public shared_mutator_set_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cell_result(shared_mutator_set_cell_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public shared_mutator_set_cell_result deepCopy() {
      return new shared_mutator_set_cell_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public shared_mutator_set_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cell_result)
        return this.equals((shared_mutator_set_cell_result)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cell_result typedOther = (shared_mutator_set_cell_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cell_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cell_args implements org.apache.thrift.TBase<offer_cell_args, offer_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cell_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELL((short)4, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cell_args.class, metaDataMap);
    }

    public offer_cell_args() {
    }

    public offer_cell_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      Cell cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cell_args(offer_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public offer_cell_args deepCopy() {
      return new offer_cell_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public offer_cell_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public offer_cell_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public offer_cell_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public Cell getCell() {
      return this.cell;
    }

    public offer_cell_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cell_args)
        return this.equals((offer_cell_args)that);
      return false;
    }

    public boolean equals(offer_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cell_args typedOther = (offer_cell_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cell_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cell_result implements org.apache.thrift.TBase<offer_cell_result, offer_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cell_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cell_result.class, metaDataMap);
    }

    public offer_cell_result() {
    }

    public offer_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cell_result(offer_cell_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public offer_cell_result deepCopy() {
      return new offer_cell_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public offer_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cell_result)
        return this.equals((offer_cell_result)that);
      return false;
    }

    public boolean equals(offer_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cell_result typedOther = (offer_cell_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cell_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cell_as_array_args implements org.apache.thrift.TBase<shared_mutator_set_cell_as_array_args, shared_mutator_set_cell_as_array_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cell_as_array_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELL((short)4, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cell_as_array_args.class, metaDataMap);
    }

    public shared_mutator_set_cell_as_array_args() {
    }

    public shared_mutator_set_cell_as_array_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<String> cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cell_as_array_args(shared_mutator_set_cell_as_array_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public shared_mutator_set_cell_as_array_args deepCopy() {
      return new shared_mutator_set_cell_as_array_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public shared_mutator_set_cell_as_array_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public shared_mutator_set_cell_as_array_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public shared_mutator_set_cell_as_array_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public shared_mutator_set_cell_as_array_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cell_as_array_args)
        return this.equals((shared_mutator_set_cell_as_array_args)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cell_as_array_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cell_as_array_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cell_as_array_args typedOther = (shared_mutator_set_cell_as_array_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list138.size);
                for (int _i139 = 0; _i139 < _list138.size; ++_i139)
                {
                  String _elem140; // required
                  _elem140 = iprot.readString();
                  this.cell.add(_elem140);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter141 : this.cell)
          {
            oprot.writeString(_iter141);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cell_as_array_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class shared_mutator_set_cell_as_array_result implements org.apache.thrift.TBase<shared_mutator_set_cell_as_array_result, shared_mutator_set_cell_as_array_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shared_mutator_set_cell_as_array_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shared_mutator_set_cell_as_array_result.class, metaDataMap);
    }

    public shared_mutator_set_cell_as_array_result() {
    }

    public shared_mutator_set_cell_as_array_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shared_mutator_set_cell_as_array_result(shared_mutator_set_cell_as_array_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public shared_mutator_set_cell_as_array_result deepCopy() {
      return new shared_mutator_set_cell_as_array_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public shared_mutator_set_cell_as_array_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof shared_mutator_set_cell_as_array_result)
        return this.equals((shared_mutator_set_cell_as_array_result)that);
      return false;
    }

    public boolean equals(shared_mutator_set_cell_as_array_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(shared_mutator_set_cell_as_array_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      shared_mutator_set_cell_as_array_result typedOther = (shared_mutator_set_cell_as_array_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("shared_mutator_set_cell_as_array_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cell_as_array_args implements org.apache.thrift.TBase<offer_cell_as_array_args, offer_cell_as_array_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cell_as_array_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MUTATE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("mutate_spec", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)4);

    public long ns; // required
    public String table_name; // required
    public MutateSpec mutate_spec; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      MUTATE_SPEC((short)3, "mutate_spec"),
      CELL((short)4, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // MUTATE_SPEC
            return MUTATE_SPEC;
          case 4: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MUTATE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("mutate_spec", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MutateSpec.class)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cell_as_array_args.class, metaDataMap);
    }

    public offer_cell_as_array_args() {
    }

    public offer_cell_as_array_args(
      long ns,
      String table_name,
      MutateSpec mutate_spec,
      List<String> cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.mutate_spec = mutate_spec;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cell_as_array_args(offer_cell_as_array_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetMutate_spec()) {
        this.mutate_spec = new MutateSpec(other.mutate_spec);
      }
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public offer_cell_as_array_args deepCopy() {
      return new offer_cell_as_array_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.mutate_spec = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public offer_cell_as_array_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public offer_cell_as_array_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public MutateSpec getMutate_spec() {
      return this.mutate_spec;
    }

    public offer_cell_as_array_args setMutate_spec(MutateSpec mutate_spec) {
      this.mutate_spec = mutate_spec;
      return this;
    }

    public void unsetMutate_spec() {
      this.mutate_spec = null;
    }

    /** Returns true if field mutate_spec is set (has been assigned a value) and false otherwise */
    public boolean isSetMutate_spec() {
      return this.mutate_spec != null;
    }

    public void setMutate_specIsSet(boolean value) {
      if (!value) {
        this.mutate_spec = null;
      }
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public offer_cell_as_array_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case MUTATE_SPEC:
        if (value == null) {
          unsetMutate_spec();
        } else {
          setMutate_spec((MutateSpec)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case MUTATE_SPEC:
        return getMutate_spec();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case MUTATE_SPEC:
        return isSetMutate_spec();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cell_as_array_args)
        return this.equals((offer_cell_as_array_args)that);
      return false;
    }

    public boolean equals(offer_cell_as_array_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_mutate_spec = true && this.isSetMutate_spec();
      boolean that_present_mutate_spec = true && that.isSetMutate_spec();
      if (this_present_mutate_spec || that_present_mutate_spec) {
        if (!(this_present_mutate_spec && that_present_mutate_spec))
          return false;
        if (!this.mutate_spec.equals(that.mutate_spec))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cell_as_array_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cell_as_array_args typedOther = (offer_cell_as_array_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMutate_spec()).compareTo(typedOther.isSetMutate_spec());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutate_spec()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutate_spec, typedOther.mutate_spec);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MUTATE_SPEC
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.mutate_spec = new MutateSpec();
              this.mutate_spec.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list142.size);
                for (int _i143 = 0; _i143 < _list142.size; ++_i143)
                {
                  String _elem144; // required
                  _elem144 = iprot.readString();
                  this.cell.add(_elem144);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.mutate_spec != null) {
        oprot.writeFieldBegin(MUTATE_SPEC_FIELD_DESC);
        this.mutate_spec.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter145 : this.cell)
          {
            oprot.writeString(_iter145);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cell_as_array_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mutate_spec:");
      if (this.mutate_spec == null) {
        sb.append("null");
      } else {
        sb.append(this.mutate_spec);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class offer_cell_as_array_result implements org.apache.thrift.TBase<offer_cell_as_array_result, offer_cell_as_array_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("offer_cell_as_array_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(offer_cell_as_array_result.class, metaDataMap);
    }

    public offer_cell_as_array_result() {
    }

    public offer_cell_as_array_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public offer_cell_as_array_result(offer_cell_as_array_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public offer_cell_as_array_result deepCopy() {
      return new offer_cell_as_array_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public offer_cell_as_array_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof offer_cell_as_array_result)
        return this.equals((offer_cell_as_array_result)that);
      return false;
    }

    public boolean equals(offer_cell_as_array_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(offer_cell_as_array_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      offer_cell_as_array_result typedOther = (offer_cell_as_array_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("offer_cell_as_array_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_open_args implements org.apache.thrift.TBase<mutator_open_args, mutator_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_open_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FLUSH_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("flush_interval", org.apache.thrift.protocol.TType.I32, (short)4);

    public long ns; // required
    public String table_name; // required
    public int flags; // required
    public int flush_interval; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FLAGS((short)3, "flags"),
      FLUSH_INTERVAL((short)4, "flush_interval");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FLAGS
            return FLAGS;
          case 4: // FLUSH_INTERVAL
            return FLUSH_INTERVAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FLAGS_ISSET_ID = 1;
    private static final int __FLUSH_INTERVAL_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLUSH_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("flush_interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_open_args.class, metaDataMap);
    }

    public mutator_open_args() {
      this.flags = 0;

      this.flush_interval = 0;

    }

    public mutator_open_args(
      long ns,
      String table_name,
      int flags,
      int flush_interval)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.flags = flags;
      setFlagsIsSet(true);
      this.flush_interval = flush_interval;
      setFlush_intervalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_open_args(mutator_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.flags = other.flags;
      this.flush_interval = other.flush_interval;
    }

    public mutator_open_args deepCopy() {
      return new mutator_open_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.flags = 0;

      this.flush_interval = 0;

    }

    public long getNs() {
      return this.ns;
    }

    public mutator_open_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public mutator_open_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getFlags() {
      return this.flags;
    }

    public mutator_open_args setFlags(int flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bit_vector.clear(__FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return __isset_bit_vector.get(__FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
    }

    public int getFlush_interval() {
      return this.flush_interval;
    }

    public mutator_open_args setFlush_interval(int flush_interval) {
      this.flush_interval = flush_interval;
      setFlush_intervalIsSet(true);
      return this;
    }

    public void unsetFlush_interval() {
      __isset_bit_vector.clear(__FLUSH_INTERVAL_ISSET_ID);
    }

    /** Returns true if field flush_interval is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush_interval() {
      return __isset_bit_vector.get(__FLUSH_INTERVAL_ISSET_ID);
    }

    public void setFlush_intervalIsSet(boolean value) {
      __isset_bit_vector.set(__FLUSH_INTERVAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((Integer)value);
        }
        break;

      case FLUSH_INTERVAL:
        if (value == null) {
          unsetFlush_interval();
        } else {
          setFlush_interval((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FLAGS:
        return Integer.valueOf(getFlags());

      case FLUSH_INTERVAL:
        return Integer.valueOf(getFlush_interval());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FLAGS:
        return isSetFlags();
      case FLUSH_INTERVAL:
        return isSetFlush_interval();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_open_args)
        return this.equals((mutator_open_args)that);
      return false;
    }

    public boolean equals(mutator_open_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      boolean this_present_flush_interval = true;
      boolean that_present_flush_interval = true;
      if (this_present_flush_interval || that_present_flush_interval) {
        if (!(this_present_flush_interval && that_present_flush_interval))
          return false;
        if (this.flush_interval != that.flush_interval)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_open_args typedOther = (mutator_open_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush_interval()).compareTo(typedOther.isSetFlush_interval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush_interval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush_interval, typedOther.flush_interval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLAGS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flags = iprot.readI32();
              setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FLUSH_INTERVAL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flush_interval = iprot.readI32();
              setFlush_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(this.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLUSH_INTERVAL_FIELD_DESC);
      oprot.writeI32(this.flush_interval);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_open_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush_interval:");
      sb.append(this.flush_interval);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_open_result implements org.apache.thrift.TBase<mutator_open_result, mutator_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_open_result.class, metaDataMap);
    }

    public mutator_open_result() {
    }

    public mutator_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_open_result(mutator_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_open_result deepCopy() {
      return new mutator_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public mutator_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_open_result)
        return this.equals((mutator_open_result)that);
      return false;
    }

    public boolean equals(mutator_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_open_result typedOther = (mutator_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_mutator_args implements org.apache.thrift.TBase<open_mutator_args, open_mutator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_mutator_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField FLUSH_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("flush_interval", org.apache.thrift.protocol.TType.I32, (short)4);

    public long ns; // required
    public String table_name; // required
    public int flags; // required
    public int flush_interval; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FLAGS((short)3, "flags"),
      FLUSH_INTERVAL((short)4, "flush_interval");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FLAGS
            return FLAGS;
          case 4: // FLUSH_INTERVAL
            return FLUSH_INTERVAL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FLAGS_ISSET_ID = 1;
    private static final int __FLUSH_INTERVAL_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FLUSH_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("flush_interval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_mutator_args.class, metaDataMap);
    }

    public open_mutator_args() {
      this.flags = 0;

      this.flush_interval = 0;

    }

    public open_mutator_args(
      long ns,
      String table_name,
      int flags,
      int flush_interval)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.flags = flags;
      setFlagsIsSet(true);
      this.flush_interval = flush_interval;
      setFlush_intervalIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_args(open_mutator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.flags = other.flags;
      this.flush_interval = other.flush_interval;
    }

    public open_mutator_args deepCopy() {
      return new open_mutator_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.flags = 0;

      this.flush_interval = 0;

    }

    public long getNs() {
      return this.ns;
    }

    public open_mutator_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public open_mutator_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getFlags() {
      return this.flags;
    }

    public open_mutator_args setFlags(int flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bit_vector.clear(__FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return __isset_bit_vector.get(__FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
    }

    public int getFlush_interval() {
      return this.flush_interval;
    }

    public open_mutator_args setFlush_interval(int flush_interval) {
      this.flush_interval = flush_interval;
      setFlush_intervalIsSet(true);
      return this;
    }

    public void unsetFlush_interval() {
      __isset_bit_vector.clear(__FLUSH_INTERVAL_ISSET_ID);
    }

    /** Returns true if field flush_interval is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush_interval() {
      return __isset_bit_vector.get(__FLUSH_INTERVAL_ISSET_ID);
    }

    public void setFlush_intervalIsSet(boolean value) {
      __isset_bit_vector.set(__FLUSH_INTERVAL_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((Integer)value);
        }
        break;

      case FLUSH_INTERVAL:
        if (value == null) {
          unsetFlush_interval();
        } else {
          setFlush_interval((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FLAGS:
        return Integer.valueOf(getFlags());

      case FLUSH_INTERVAL:
        return Integer.valueOf(getFlush_interval());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FLAGS:
        return isSetFlags();
      case FLUSH_INTERVAL:
        return isSetFlush_interval();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_args)
        return this.equals((open_mutator_args)that);
      return false;
    }

    public boolean equals(open_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      boolean this_present_flush_interval = true;
      boolean that_present_flush_interval = true;
      if (this_present_flush_interval || that_present_flush_interval) {
        if (!(this_present_flush_interval && that_present_flush_interval))
          return false;
        if (this.flush_interval != that.flush_interval)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_mutator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_mutator_args typedOther = (open_mutator_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush_interval()).compareTo(typedOther.isSetFlush_interval());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush_interval()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush_interval, typedOther.flush_interval);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLAGS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flags = iprot.readI32();
              setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FLUSH_INTERVAL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flush_interval = iprot.readI32();
              setFlush_intervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(this.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLUSH_INTERVAL_FIELD_DESC);
      oprot.writeI32(this.flush_interval);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush_interval:");
      sb.append(this.flush_interval);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_mutator_result implements org.apache.thrift.TBase<open_mutator_result, open_mutator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_mutator_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_mutator_result.class, metaDataMap);
    }

    public open_mutator_result() {
    }

    public open_mutator_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_result(open_mutator_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_mutator_result deepCopy() {
      return new open_mutator_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_mutator_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_mutator_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_result)
        return this.equals((open_mutator_result)that);
      return false;
    }

    public boolean equals(open_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_mutator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_mutator_result typedOther = (open_mutator_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_open_args implements org.apache.thrift.TBase<async_mutator_open_args, async_mutator_open_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_open_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("future", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)4);

    public long ns; // required
    public String table_name; // required
    public long future; // required
    public int flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FUTURE((short)3, "future"),
      FLAGS((short)4, "flags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FUTURE
            return FUTURE;
          case 4: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FUTURE_ISSET_ID = 1;
    private static final int __FLAGS_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FUTURE, new org.apache.thrift.meta_data.FieldMetaData("future", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_open_args.class, metaDataMap);
    }

    public async_mutator_open_args() {
      this.flags = 0;

    }

    public async_mutator_open_args(
      long ns,
      String table_name,
      long future,
      int flags)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.future = future;
      setFutureIsSet(true);
      this.flags = flags;
      setFlagsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_open_args(async_mutator_open_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.future = other.future;
      this.flags = other.flags;
    }

    public async_mutator_open_args deepCopy() {
      return new async_mutator_open_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      setFutureIsSet(false);
      this.future = 0;
      this.flags = 0;

    }

    public long getNs() {
      return this.ns;
    }

    public async_mutator_open_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public async_mutator_open_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getFuture() {
      return this.future;
    }

    public async_mutator_open_args setFuture(long future) {
      this.future = future;
      setFutureIsSet(true);
      return this;
    }

    public void unsetFuture() {
      __isset_bit_vector.clear(__FUTURE_ISSET_ID);
    }

    /** Returns true if field future is set (has been assigned a value) and false otherwise */
    public boolean isSetFuture() {
      return __isset_bit_vector.get(__FUTURE_ISSET_ID);
    }

    public void setFutureIsSet(boolean value) {
      __isset_bit_vector.set(__FUTURE_ISSET_ID, value);
    }

    public int getFlags() {
      return this.flags;
    }

    public async_mutator_open_args setFlags(int flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bit_vector.clear(__FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return __isset_bit_vector.get(__FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FUTURE:
        if (value == null) {
          unsetFuture();
        } else {
          setFuture((Long)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FUTURE:
        return Long.valueOf(getFuture());

      case FLAGS:
        return Integer.valueOf(getFlags());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FUTURE:
        return isSetFuture();
      case FLAGS:
        return isSetFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_open_args)
        return this.equals((async_mutator_open_args)that);
      return false;
    }

    public boolean equals(async_mutator_open_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_future = true;
      boolean that_present_future = true;
      if (this_present_future || that_present_future) {
        if (!(this_present_future && that_present_future))
          return false;
        if (this.future != that.future)
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_open_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_open_args typedOther = (async_mutator_open_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFuture()).compareTo(typedOther.isSetFuture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.future, typedOther.future);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FUTURE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.future = iprot.readI64();
              setFutureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FLAGS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flags = iprot.readI32();
              setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_FIELD_DESC);
      oprot.writeI64(this.future);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(this.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_open_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("future:");
      sb.append(this.future);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_open_result implements org.apache.thrift.TBase<async_mutator_open_result, async_mutator_open_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_open_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_open_result.class, metaDataMap);
    }

    public async_mutator_open_result() {
    }

    public async_mutator_open_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_open_result(async_mutator_open_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_open_result deepCopy() {
      return new async_mutator_open_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public async_mutator_open_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_open_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_open_result)
        return this.equals((async_mutator_open_result)that);
      return false;
    }

    public boolean equals(async_mutator_open_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_open_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_open_result typedOther = (async_mutator_open_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_open_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_mutator_async_args implements org.apache.thrift.TBase<open_mutator_async_args, open_mutator_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_mutator_async_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FUTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("future", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I32, (short)4);

    public long ns; // required
    public String table_name; // required
    public long future; // required
    public int flags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      FUTURE((short)3, "future"),
      FLAGS((short)4, "flags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // FUTURE
            return FUTURE;
          case 4: // FLAGS
            return FLAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __FUTURE_ISSET_ID = 1;
    private static final int __FLAGS_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FUTURE, new org.apache.thrift.meta_data.FieldMetaData("future", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Future")));
      tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_mutator_async_args.class, metaDataMap);
    }

    public open_mutator_async_args() {
      this.flags = 0;

    }

    public open_mutator_async_args(
      long ns,
      String table_name,
      long future,
      int flags)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.future = future;
      setFutureIsSet(true);
      this.flags = flags;
      setFlagsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_async_args(open_mutator_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      this.future = other.future;
      this.flags = other.flags;
    }

    public open_mutator_async_args deepCopy() {
      return new open_mutator_async_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      setFutureIsSet(false);
      this.future = 0;
      this.flags = 0;

    }

    public long getNs() {
      return this.ns;
    }

    public open_mutator_async_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public open_mutator_async_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public long getFuture() {
      return this.future;
    }

    public open_mutator_async_args setFuture(long future) {
      this.future = future;
      setFutureIsSet(true);
      return this;
    }

    public void unsetFuture() {
      __isset_bit_vector.clear(__FUTURE_ISSET_ID);
    }

    /** Returns true if field future is set (has been assigned a value) and false otherwise */
    public boolean isSetFuture() {
      return __isset_bit_vector.get(__FUTURE_ISSET_ID);
    }

    public void setFutureIsSet(boolean value) {
      __isset_bit_vector.set(__FUTURE_ISSET_ID, value);
    }

    public int getFlags() {
      return this.flags;
    }

    public open_mutator_async_args setFlags(int flags) {
      this.flags = flags;
      setFlagsIsSet(true);
      return this;
    }

    public void unsetFlags() {
      __isset_bit_vector.clear(__FLAGS_ISSET_ID);
    }

    /** Returns true if field flags is set (has been assigned a value) and false otherwise */
    public boolean isSetFlags() {
      return __isset_bit_vector.get(__FLAGS_ISSET_ID);
    }

    public void setFlagsIsSet(boolean value) {
      __isset_bit_vector.set(__FLAGS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case FUTURE:
        if (value == null) {
          unsetFuture();
        } else {
          setFuture((Long)value);
        }
        break;

      case FLAGS:
        if (value == null) {
          unsetFlags();
        } else {
          setFlags((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case FUTURE:
        return Long.valueOf(getFuture());

      case FLAGS:
        return Integer.valueOf(getFlags());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case FUTURE:
        return isSetFuture();
      case FLAGS:
        return isSetFlags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_async_args)
        return this.equals((open_mutator_async_args)that);
      return false;
    }

    public boolean equals(open_mutator_async_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_future = true;
      boolean that_present_future = true;
      if (this_present_future || that_present_future) {
        if (!(this_present_future && that_present_future))
          return false;
        if (this.future != that.future)
          return false;
      }

      boolean this_present_flags = true;
      boolean that_present_flags = true;
      if (this_present_flags || that_present_flags) {
        if (!(this_present_flags && that_present_flags))
          return false;
        if (this.flags != that.flags)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_mutator_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_mutator_async_args typedOther = (open_mutator_async_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFuture()).compareTo(typedOther.isSetFuture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuture()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.future, typedOther.future);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlags()).compareTo(typedOther.isSetFlags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, typedOther.flags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FUTURE
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.future = iprot.readI64();
              setFutureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // FLAGS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.flags = iprot.readI32();
              setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUTURE_FIELD_DESC);
      oprot.writeI64(this.future);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAGS_FIELD_DESC);
      oprot.writeI32(this.flags);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_async_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("future:");
      sb.append(this.future);
      first = false;
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class open_mutator_async_result implements org.apache.thrift.TBase<open_mutator_async_result, open_mutator_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("open_mutator_async_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public long success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(open_mutator_async_result.class, metaDataMap);
    }

    public open_mutator_async_result() {
    }

    public open_mutator_async_result(
      long success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public open_mutator_async_result(open_mutator_async_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public open_mutator_async_result deepCopy() {
      return new open_mutator_async_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public open_mutator_async_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public open_mutator_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof open_mutator_async_result)
        return this.equals((open_mutator_async_result)that);
      return false;
    }

    public boolean equals(open_mutator_async_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(open_mutator_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      open_mutator_async_result typedOther = (open_mutator_async_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("open_mutator_async_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_close_args implements org.apache.thrift.TBase<mutator_close_args, mutator_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_close_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_close_args.class, metaDataMap);
    }

    public mutator_close_args() {
    }

    public mutator_close_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_close_args(mutator_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public mutator_close_args deepCopy() {
      return new mutator_close_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_close_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_close_args)
        return this.equals((mutator_close_args)that);
      return false;
    }

    public boolean equals(mutator_close_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_close_args typedOther = (mutator_close_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_close_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_close_result implements org.apache.thrift.TBase<mutator_close_result, mutator_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_close_result.class, metaDataMap);
    }

    public mutator_close_result() {
    }

    public mutator_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_close_result(mutator_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_close_result deepCopy() {
      return new mutator_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_close_result)
        return this.equals((mutator_close_result)that);
      return false;
    }

    public boolean equals(mutator_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_close_result typedOther = (mutator_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_mutator_args implements org.apache.thrift.TBase<close_mutator_args, close_mutator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_mutator_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_mutator_args.class, metaDataMap);
    }

    public close_mutator_args() {
    }

    public close_mutator_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_args(close_mutator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public close_mutator_args deepCopy() {
      return new close_mutator_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public close_mutator_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_args)
        return this.equals((close_mutator_args)that);
      return false;
    }

    public boolean equals(close_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_mutator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_mutator_args typedOther = (close_mutator_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_mutator_result implements org.apache.thrift.TBase<close_mutator_result, close_mutator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_mutator_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_mutator_result.class, metaDataMap);
    }

    public close_mutator_result() {
    }

    public close_mutator_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_result(close_mutator_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_mutator_result deepCopy() {
      return new close_mutator_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_mutator_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_result)
        return this.equals((close_mutator_result)that);
      return false;
    }

    public boolean equals(close_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_mutator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_mutator_result typedOther = (close_mutator_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_cancel_args implements org.apache.thrift.TBase<async_mutator_cancel_args, async_mutator_cancel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_cancel_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_cancel_args.class, metaDataMap);
    }

    public async_mutator_cancel_args() {
    }

    public async_mutator_cancel_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_cancel_args(async_mutator_cancel_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public async_mutator_cancel_args deepCopy() {
      return new async_mutator_cancel_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_cancel_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_cancel_args)
        return this.equals((async_mutator_cancel_args)that);
      return false;
    }

    public boolean equals(async_mutator_cancel_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_cancel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_cancel_args typedOther = (async_mutator_cancel_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_cancel_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_cancel_result implements org.apache.thrift.TBase<async_mutator_cancel_result, async_mutator_cancel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_cancel_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_cancel_result.class, metaDataMap);
    }

    public async_mutator_cancel_result() {
    }

    public async_mutator_cancel_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_cancel_result(async_mutator_cancel_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_cancel_result deepCopy() {
      return new async_mutator_cancel_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_cancel_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_cancel_result)
        return this.equals((async_mutator_cancel_result)that);
      return false;
    }

    public boolean equals(async_mutator_cancel_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_cancel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_cancel_result typedOther = (async_mutator_cancel_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_cancel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_mutator_async_args implements org.apache.thrift.TBase<cancel_mutator_async_args, cancel_mutator_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_mutator_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_mutator_async_args.class, metaDataMap);
    }

    public cancel_mutator_async_args() {
    }

    public cancel_mutator_async_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_mutator_async_args(cancel_mutator_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public cancel_mutator_async_args deepCopy() {
      return new cancel_mutator_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public cancel_mutator_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_mutator_async_args)
        return this.equals((cancel_mutator_async_args)that);
      return false;
    }

    public boolean equals(cancel_mutator_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_mutator_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_mutator_async_args typedOther = (cancel_mutator_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_mutator_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class cancel_mutator_async_result implements org.apache.thrift.TBase<cancel_mutator_async_result, cancel_mutator_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancel_mutator_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancel_mutator_async_result.class, metaDataMap);
    }

    public cancel_mutator_async_result() {
    }

    public cancel_mutator_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancel_mutator_async_result(cancel_mutator_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public cancel_mutator_async_result deepCopy() {
      return new cancel_mutator_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public cancel_mutator_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancel_mutator_async_result)
        return this.equals((cancel_mutator_async_result)that);
      return false;
    }

    public boolean equals(cancel_mutator_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancel_mutator_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancel_mutator_async_result typedOther = (cancel_mutator_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancel_mutator_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_close_args implements org.apache.thrift.TBase<async_mutator_close_args, async_mutator_close_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_close_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_close_args.class, metaDataMap);
    }

    public async_mutator_close_args() {
    }

    public async_mutator_close_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_close_args(async_mutator_close_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public async_mutator_close_args deepCopy() {
      return new async_mutator_close_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_close_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_close_args)
        return this.equals((async_mutator_close_args)that);
      return false;
    }

    public boolean equals(async_mutator_close_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_close_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_close_args typedOther = (async_mutator_close_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_close_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_close_result implements org.apache.thrift.TBase<async_mutator_close_result, async_mutator_close_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_close_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_close_result.class, metaDataMap);
    }

    public async_mutator_close_result() {
    }

    public async_mutator_close_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_close_result(async_mutator_close_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_close_result deepCopy() {
      return new async_mutator_close_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_close_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_close_result)
        return this.equals((async_mutator_close_result)that);
      return false;
    }

    public boolean equals(async_mutator_close_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_close_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_close_result typedOther = (async_mutator_close_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_close_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_mutator_async_args implements org.apache.thrift.TBase<close_mutator_async_args, close_mutator_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_mutator_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_mutator_async_args.class, metaDataMap);
    }

    public close_mutator_async_args() {
    }

    public close_mutator_async_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_async_args(close_mutator_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public close_mutator_async_args deepCopy() {
      return new close_mutator_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public close_mutator_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_async_args)
        return this.equals((close_mutator_async_args)that);
      return false;
    }

    public boolean equals(close_mutator_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_mutator_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_mutator_async_args typedOther = (close_mutator_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class close_mutator_async_result implements org.apache.thrift.TBase<close_mutator_async_result, close_mutator_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("close_mutator_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(close_mutator_async_result.class, metaDataMap);
    }

    public close_mutator_async_result() {
    }

    public close_mutator_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public close_mutator_async_result(close_mutator_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public close_mutator_async_result deepCopy() {
      return new close_mutator_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public close_mutator_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof close_mutator_async_result)
        return this.equals((close_mutator_async_result)that);
      return false;
    }

    public boolean equals(close_mutator_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(close_mutator_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      close_mutator_async_result typedOther = (close_mutator_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("close_mutator_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cell_args implements org.apache.thrift.TBase<mutator_set_cell_args, mutator_set_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cell_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public long mutator; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cell_args.class, metaDataMap);
    }

    public mutator_set_cell_args() {
    }

    public mutator_set_cell_args(
      long mutator,
      Cell cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cell_args(mutator_set_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public mutator_set_cell_args deepCopy() {
      return new mutator_set_cell_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_set_cell_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public Cell getCell() {
      return this.cell;
    }

    public mutator_set_cell_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cell_args)
        return this.equals((mutator_set_cell_args)that);
      return false;
    }

    public boolean equals(mutator_set_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cell_args typedOther = (mutator_set_cell_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cell_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cell_result implements org.apache.thrift.TBase<mutator_set_cell_result, mutator_set_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cell_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cell_result.class, metaDataMap);
    }

    public mutator_set_cell_result() {
    }

    public mutator_set_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cell_result(mutator_set_cell_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_set_cell_result deepCopy() {
      return new mutator_set_cell_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_set_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cell_result)
        return this.equals((mutator_set_cell_result)that);
      return false;
    }

    public boolean equals(mutator_set_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cell_result typedOther = (mutator_set_cell_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cell_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_args implements org.apache.thrift.TBase<set_cell_args, set_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    public long ns; // required
    public String table_name; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      CELL((short)3, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_args.class, metaDataMap);
    }

    public set_cell_args() {
    }

    public set_cell_args(
      long ns,
      String table_name,
      Cell cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_args(set_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public set_cell_args deepCopy() {
      return new set_cell_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public set_cell_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public set_cell_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public Cell getCell() {
      return this.cell;
    }

    public set_cell_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_args)
        return this.equals((set_cell_args)that);
      return false;
    }

    public boolean equals(set_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_args typedOther = (set_cell_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_result implements org.apache.thrift.TBase<set_cell_result, set_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_result.class, metaDataMap);
    }

    public set_cell_result() {
    }

    public set_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_result(set_cell_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cell_result deepCopy() {
      return new set_cell_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_result)
        return this.equals((set_cell_result)that);
      return false;
    }

    public boolean equals(set_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_result typedOther = (set_cell_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cell_as_array_args implements org.apache.thrift.TBase<mutator_set_cell_as_array_args, mutator_set_cell_as_array_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cell_as_array_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cell_as_array_args.class, metaDataMap);
    }

    public mutator_set_cell_as_array_args() {
    }

    public mutator_set_cell_as_array_args(
      long mutator,
      List<String> cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cell_as_array_args(mutator_set_cell_as_array_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public mutator_set_cell_as_array_args deepCopy() {
      return new mutator_set_cell_as_array_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_set_cell_as_array_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public mutator_set_cell_as_array_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cell_as_array_args)
        return this.equals((mutator_set_cell_as_array_args)that);
      return false;
    }

    public boolean equals(mutator_set_cell_as_array_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cell_as_array_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cell_as_array_args typedOther = (mutator_set_cell_as_array_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list146.size);
                for (int _i147 = 0; _i147 < _list146.size; ++_i147)
                {
                  String _elem148; // required
                  _elem148 = iprot.readString();
                  this.cell.add(_elem148);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter149 : this.cell)
          {
            oprot.writeString(_iter149);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cell_as_array_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cell_as_array_result implements org.apache.thrift.TBase<mutator_set_cell_as_array_result, mutator_set_cell_as_array_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cell_as_array_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cell_as_array_result.class, metaDataMap);
    }

    public mutator_set_cell_as_array_result() {
    }

    public mutator_set_cell_as_array_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cell_as_array_result(mutator_set_cell_as_array_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_set_cell_as_array_result deepCopy() {
      return new mutator_set_cell_as_array_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_set_cell_as_array_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cell_as_array_result)
        return this.equals((mutator_set_cell_as_array_result)that);
      return false;
    }

    public boolean equals(mutator_set_cell_as_array_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cell_as_array_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cell_as_array_result typedOther = (mutator_set_cell_as_array_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cell_as_array_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_as_array_args implements org.apache.thrift.TBase<set_cell_as_array_args, set_cell_as_array_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_as_array_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)3);

    public long ns; // required
    public String table_name; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      CELL((short)3, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_as_array_args.class, metaDataMap);
    }

    public set_cell_as_array_args() {
    }

    public set_cell_as_array_args(
      long ns,
      String table_name,
      List<String> cell)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_as_array_args(set_cell_as_array_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public set_cell_as_array_args deepCopy() {
      return new set_cell_as_array_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.cell = null;
    }

    public long getNs() {
      return this.ns;
    }

    public set_cell_as_array_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public set_cell_as_array_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public set_cell_as_array_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_as_array_args)
        return this.equals((set_cell_as_array_args)that);
      return false;
    }

    public boolean equals(set_cell_as_array_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_as_array_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_as_array_args typedOther = (set_cell_as_array_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list150.size);
                for (int _i151 = 0; _i151 < _list150.size; ++_i151)
                {
                  String _elem152; // required
                  _elem152 = iprot.readString();
                  this.cell.add(_elem152);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter153 : this.cell)
          {
            oprot.writeString(_iter153);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_as_array_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_as_array_result implements org.apache.thrift.TBase<set_cell_as_array_result, set_cell_as_array_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_as_array_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_as_array_result.class, metaDataMap);
    }

    public set_cell_as_array_result() {
    }

    public set_cell_as_array_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_as_array_result(set_cell_as_array_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cell_as_array_result deepCopy() {
      return new set_cell_as_array_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cell_as_array_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_as_array_result)
        return this.equals((set_cell_as_array_result)that);
      return false;
    }

    public boolean equals(set_cell_as_array_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_as_array_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_as_array_result typedOther = (set_cell_as_array_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_as_array_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_args implements org.apache.thrift.TBase<mutator_set_cells_args, mutator_set_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_args.class, metaDataMap);
    }

    public mutator_set_cells_args() {
    }

    public mutator_set_cells_args(
      long mutator,
      List<Cell> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_args(mutator_set_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public mutator_set_cells_args deepCopy() {
      return new mutator_set_cells_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_set_cells_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public mutator_set_cells_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_args)
        return this.equals((mutator_set_cells_args)that);
      return false;
    }

    public boolean equals(mutator_set_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_args typedOther = (mutator_set_cells_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list154.size);
                for (int _i155 = 0; _i155 < _list154.size; ++_i155)
                {
                  Cell _elem156; // required
                  _elem156 = new Cell();
                  _elem156.read(iprot);
                  this.cells.add(_elem156);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter157 : this.cells)
          {
            _iter157.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_result implements org.apache.thrift.TBase<mutator_set_cells_result, mutator_set_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_result.class, metaDataMap);
    }

    public mutator_set_cells_result() {
    }

    public mutator_set_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_result(mutator_set_cells_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_set_cells_result deepCopy() {
      return new mutator_set_cells_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_set_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_result)
        return this.equals((mutator_set_cells_result)that);
      return false;
    }

    public boolean equals(mutator_set_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_result typedOther = (mutator_set_cells_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_args implements org.apache.thrift.TBase<set_cells_args, set_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)3);

    public long ns; // required
    public String table_name; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      CELLS((short)3, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_args.class, metaDataMap);
    }

    public set_cells_args() {
    }

    public set_cells_args(
      long ns,
      String table_name,
      List<Cell> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_args(set_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public set_cells_args deepCopy() {
      return new set_cells_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public set_cells_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public set_cells_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public set_cells_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_args)
        return this.equals((set_cells_args)that);
      return false;
    }

    public boolean equals(set_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_args typedOther = (set_cells_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list158 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list158.size);
                for (int _i159 = 0; _i159 < _list158.size; ++_i159)
                {
                  Cell _elem160; // required
                  _elem160 = new Cell();
                  _elem160.read(iprot);
                  this.cells.add(_elem160);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter161 : this.cells)
          {
            _iter161.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_result implements org.apache.thrift.TBase<set_cells_result, set_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_result.class, metaDataMap);
    }

    public set_cells_result() {
    }

    public set_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_result(set_cells_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_result deepCopy() {
      return new set_cells_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_result)
        return this.equals((set_cells_result)that);
      return false;
    }

    public boolean equals(set_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_result typedOther = (set_cells_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_as_arrays_args implements org.apache.thrift.TBase<mutator_set_cells_as_arrays_args, mutator_set_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_as_arrays_args.class, metaDataMap);
    }

    public mutator_set_cells_as_arrays_args() {
    }

    public mutator_set_cells_as_arrays_args(
      long mutator,
      List<List<String>> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_as_arrays_args(mutator_set_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public mutator_set_cells_as_arrays_args deepCopy() {
      return new mutator_set_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_set_cells_as_arrays_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public mutator_set_cells_as_arrays_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_as_arrays_args)
        return this.equals((mutator_set_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(mutator_set_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_as_arrays_args typedOther = (mutator_set_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list162.size);
                for (int _i163 = 0; _i163 < _list162.size; ++_i163)
                {
                  List<String> _elem164; // required
                  {
                    org.apache.thrift.protocol.TList _list165 = iprot.readListBegin();
                    _elem164 = new ArrayList<String>(_list165.size);
                    for (int _i166 = 0; _i166 < _list165.size; ++_i166)
                    {
                      String _elem167; // required
                      _elem167 = iprot.readString();
                      _elem164.add(_elem167);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem164);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter168 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter168.size()));
              for (String _iter169 : _iter168)
              {
                oprot.writeString(_iter169);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_as_arrays_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_as_arrays_result implements org.apache.thrift.TBase<mutator_set_cells_as_arrays_result, mutator_set_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_as_arrays_result.class, metaDataMap);
    }

    public mutator_set_cells_as_arrays_result() {
    }

    public mutator_set_cells_as_arrays_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_as_arrays_result(mutator_set_cells_as_arrays_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_set_cells_as_arrays_result deepCopy() {
      return new mutator_set_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_set_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_as_arrays_result)
        return this.equals((mutator_set_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(mutator_set_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_as_arrays_result typedOther = (mutator_set_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_as_arrays_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_as_arrays_args implements org.apache.thrift.TBase<set_cells_as_arrays_args, set_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)3);

    public long ns; // required
    public String table_name; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      CELLS((short)3, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_as_arrays_args.class, metaDataMap);
    }

    public set_cells_as_arrays_args() {
    }

    public set_cells_as_arrays_args(
      long ns,
      String table_name,
      List<List<String>> cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_as_arrays_args(set_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public set_cells_as_arrays_args deepCopy() {
      return new set_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public set_cells_as_arrays_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public set_cells_as_arrays_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public set_cells_as_arrays_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_as_arrays_args)
        return this.equals((set_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(set_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_as_arrays_args typedOther = (set_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list170 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list170.size);
                for (int _i171 = 0; _i171 < _list170.size; ++_i171)
                {
                  List<String> _elem172; // required
                  {
                    org.apache.thrift.protocol.TList _list173 = iprot.readListBegin();
                    _elem172 = new ArrayList<String>(_list173.size);
                    for (int _i174 = 0; _i174 < _list173.size; ++_i174)
                    {
                      String _elem175; // required
                      _elem175 = iprot.readString();
                      _elem172.add(_elem175);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem172);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter176 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter176.size()));
              for (String _iter177 : _iter176)
              {
                oprot.writeString(_iter177);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_as_arrays_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_as_arrays_result implements org.apache.thrift.TBase<set_cells_as_arrays_result, set_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_as_arrays_result.class, metaDataMap);
    }

    public set_cells_as_arrays_result() {
    }

    public set_cells_as_arrays_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_as_arrays_result(set_cells_as_arrays_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_as_arrays_result deepCopy() {
      return new set_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_as_arrays_result)
        return this.equals((set_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(set_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_as_arrays_result typedOther = (set_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_as_arrays_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_serialized_args implements org.apache.thrift.TBase<mutator_set_cells_serialized_args, mutator_set_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("flush", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public long mutator; // required
    public ByteBuffer cells; // required
    public boolean flush; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells"),
      FLUSH((short)3, "flush");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          case 3: // FLUSH
            return FLUSH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private static final int __FLUSH_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.FLUSH, new org.apache.thrift.meta_data.FieldMetaData("flush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_serialized_args.class, metaDataMap);
    }

    public mutator_set_cells_serialized_args() {
      this.flush = false;

    }

    public mutator_set_cells_serialized_args(
      long mutator,
      ByteBuffer cells,
      boolean flush)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
      this.flush = flush;
      setFlushIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_serialized_args(mutator_set_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        this.cells = other.cells;
      }
      this.flush = other.flush;
    }

    public mutator_set_cells_serialized_args deepCopy() {
      return new mutator_set_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
      this.flush = false;

    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_set_cells_serialized_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public byte[] getCells() {
      setCells(org.apache.thrift.TBaseHelper.rightSize(cells));
      return cells == null ? null : cells.array();
    }

    public ByteBuffer bufferForCells() {
      return cells;
    }

    public mutator_set_cells_serialized_args setCells(byte[] cells) {
      setCells(cells == null ? (ByteBuffer)null : ByteBuffer.wrap(cells));
      return this;
    }

    public mutator_set_cells_serialized_args setCells(ByteBuffer cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public boolean isFlush() {
      return this.flush;
    }

    public mutator_set_cells_serialized_args setFlush(boolean flush) {
      this.flush = flush;
      setFlushIsSet(true);
      return this;
    }

    public void unsetFlush() {
      __isset_bit_vector.clear(__FLUSH_ISSET_ID);
    }

    /** Returns true if field flush is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush() {
      return __isset_bit_vector.get(__FLUSH_ISSET_ID);
    }

    public void setFlushIsSet(boolean value) {
      __isset_bit_vector.set(__FLUSH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((ByteBuffer)value);
        }
        break;

      case FLUSH:
        if (value == null) {
          unsetFlush();
        } else {
          setFlush((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      case FLUSH:
        return Boolean.valueOf(isFlush());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      case FLUSH:
        return isSetFlush();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_serialized_args)
        return this.equals((mutator_set_cells_serialized_args)that);
      return false;
    }

    public boolean equals(mutator_set_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      boolean this_present_flush = true;
      boolean that_present_flush = true;
      if (this_present_flush || that_present_flush) {
        if (!(this_present_flush && that_present_flush))
          return false;
        if (this.flush != that.flush)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_serialized_args typedOther = (mutator_set_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush()).compareTo(typedOther.isSetFlush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush, typedOther.flush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cells = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLUSH
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.flush = iprot.readBool();
              setFlushIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        oprot.writeBinary(this.cells);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLUSH_FIELD_DESC);
      oprot.writeBool(this.flush);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_serialized_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush:");
      sb.append(this.flush);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_set_cells_serialized_result implements org.apache.thrift.TBase<mutator_set_cells_serialized_result, mutator_set_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_set_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_set_cells_serialized_result.class, metaDataMap);
    }

    public mutator_set_cells_serialized_result() {
    }

    public mutator_set_cells_serialized_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_set_cells_serialized_result(mutator_set_cells_serialized_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_set_cells_serialized_result deepCopy() {
      return new mutator_set_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_set_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_set_cells_serialized_result)
        return this.equals((mutator_set_cells_serialized_result)that);
      return false;
    }

    public boolean equals(mutator_set_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_set_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_set_cells_serialized_result typedOther = (mutator_set_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_set_cells_serialized_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_serialized_args implements org.apache.thrift.TBase<set_cells_serialized_args, set_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String table_name; // required
    public ByteBuffer cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      CELLS((short)3, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_serialized_args.class, metaDataMap);
    }

    public set_cells_serialized_args() {
    }

    public set_cells_serialized_args(
      long ns,
      String table_name,
      ByteBuffer cells)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_serialized_args(set_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetCells()) {
        this.cells = other.cells;
      }
    }

    public set_cells_serialized_args deepCopy() {
      return new set_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.cells = null;
    }

    public long getNs() {
      return this.ns;
    }

    public set_cells_serialized_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public set_cells_serialized_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public byte[] getCells() {
      setCells(org.apache.thrift.TBaseHelper.rightSize(cells));
      return cells == null ? null : cells.array();
    }

    public ByteBuffer bufferForCells() {
      return cells;
    }

    public set_cells_serialized_args setCells(byte[] cells) {
      setCells(cells == null ? (ByteBuffer)null : ByteBuffer.wrap(cells));
      return this;
    }

    public set_cells_serialized_args setCells(ByteBuffer cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_serialized_args)
        return this.equals((set_cells_serialized_args)that);
      return false;
    }

    public boolean equals(set_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_serialized_args typedOther = (set_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cells = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        oprot.writeBinary(this.cells);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_serialized_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_serialized_result implements org.apache.thrift.TBase<set_cells_serialized_result, set_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_serialized_result.class, metaDataMap);
    }

    public set_cells_serialized_result() {
    }

    public set_cells_serialized_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_serialized_result(set_cells_serialized_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_serialized_result deepCopy() {
      return new set_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_serialized_result)
        return this.equals((set_cells_serialized_result)that);
      return false;
    }

    public boolean equals(set_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_serialized_result typedOther = (set_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_serialized_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_flush_args implements org.apache.thrift.TBase<mutator_flush_args, mutator_flush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_flush_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_flush_args.class, metaDataMap);
    }

    public mutator_flush_args() {
    }

    public mutator_flush_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_flush_args(mutator_flush_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public mutator_flush_args deepCopy() {
      return new mutator_flush_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public mutator_flush_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_flush_args)
        return this.equals((mutator_flush_args)that);
      return false;
    }

    public boolean equals(mutator_flush_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_flush_args typedOther = (mutator_flush_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_flush_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class mutator_flush_result implements org.apache.thrift.TBase<mutator_flush_result, mutator_flush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mutator_flush_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mutator_flush_result.class, metaDataMap);
    }

    public mutator_flush_result() {
    }

    public mutator_flush_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mutator_flush_result(mutator_flush_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public mutator_flush_result deepCopy() {
      return new mutator_flush_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public mutator_flush_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof mutator_flush_result)
        return this.equals((mutator_flush_result)that);
      return false;
    }

    public boolean equals(mutator_flush_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(mutator_flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      mutator_flush_result typedOther = (mutator_flush_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("mutator_flush_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class flush_mutator_args implements org.apache.thrift.TBase<flush_mutator_args, flush_mutator_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flush_mutator_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Mutator")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flush_mutator_args.class, metaDataMap);
    }

    public flush_mutator_args() {
    }

    public flush_mutator_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_args(flush_mutator_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public flush_mutator_args deepCopy() {
      return new flush_mutator_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public flush_mutator_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_args)
        return this.equals((flush_mutator_args)that);
      return false;
    }

    public boolean equals(flush_mutator_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(flush_mutator_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_mutator_args typedOther = (flush_mutator_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class flush_mutator_result implements org.apache.thrift.TBase<flush_mutator_result, flush_mutator_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flush_mutator_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flush_mutator_result.class, metaDataMap);
    }

    public flush_mutator_result() {
    }

    public flush_mutator_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_result(flush_mutator_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public flush_mutator_result deepCopy() {
      return new flush_mutator_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public flush_mutator_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_result)
        return this.equals((flush_mutator_result)that);
      return false;
    }

    public boolean equals(flush_mutator_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(flush_mutator_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_mutator_result typedOther = (flush_mutator_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cell_args implements org.apache.thrift.TBase<async_mutator_set_cell_args, async_mutator_set_cell_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cell_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public long mutator; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cell_args.class, metaDataMap);
    }

    public async_mutator_set_cell_args() {
    }

    public async_mutator_set_cell_args(
      long mutator,
      Cell cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cell_args(async_mutator_set_cell_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public async_mutator_set_cell_args deepCopy() {
      return new async_mutator_set_cell_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_set_cell_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public Cell getCell() {
      return this.cell;
    }

    public async_mutator_set_cell_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cell_args)
        return this.equals((async_mutator_set_cell_args)that);
      return false;
    }

    public boolean equals(async_mutator_set_cell_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cell_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cell_args typedOther = (async_mutator_set_cell_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cell_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cell_result implements org.apache.thrift.TBase<async_mutator_set_cell_result, async_mutator_set_cell_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cell_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cell_result.class, metaDataMap);
    }

    public async_mutator_set_cell_result() {
    }

    public async_mutator_set_cell_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cell_result(async_mutator_set_cell_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_set_cell_result deepCopy() {
      return new async_mutator_set_cell_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_set_cell_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cell_result)
        return this.equals((async_mutator_set_cell_result)that);
      return false;
    }

    public boolean equals(async_mutator_set_cell_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cell_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cell_result typedOther = (async_mutator_set_cell_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cell_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_async_args implements org.apache.thrift.TBase<set_cell_async_args, set_cell_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    public long mutator; // required
    public Cell cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_async_args.class, metaDataMap);
    }

    public set_cell_async_args() {
    }

    public set_cell_async_args(
      long mutator,
      Cell cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_async_args(set_cell_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = new Cell(other.cell);
      }
    }

    public set_cell_async_args deepCopy() {
      return new set_cell_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public set_cell_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public Cell getCell() {
      return this.cell;
    }

    public set_cell_async_args setCell(Cell cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((Cell)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_async_args)
        return this.equals((set_cell_async_args)that);
      return false;
    }

    public boolean equals(set_cell_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_async_args typedOther = (set_cell_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cell = new Cell();
              this.cell.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        this.cell.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_async_result implements org.apache.thrift.TBase<set_cell_async_result, set_cell_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_async_result.class, metaDataMap);
    }

    public set_cell_async_result() {
    }

    public set_cell_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_async_result(set_cell_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cell_async_result deepCopy() {
      return new set_cell_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cell_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_async_result)
        return this.equals((set_cell_async_result)that);
      return false;
    }

    public boolean equals(set_cell_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_async_result typedOther = (set_cell_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cell_as_array_args implements org.apache.thrift.TBase<async_mutator_set_cell_as_array_args, async_mutator_set_cell_as_array_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cell_as_array_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cell_as_array_args.class, metaDataMap);
    }

    public async_mutator_set_cell_as_array_args() {
    }

    public async_mutator_set_cell_as_array_args(
      long mutator,
      List<String> cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cell_as_array_args(async_mutator_set_cell_as_array_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public async_mutator_set_cell_as_array_args deepCopy() {
      return new async_mutator_set_cell_as_array_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_set_cell_as_array_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public async_mutator_set_cell_as_array_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cell_as_array_args)
        return this.equals((async_mutator_set_cell_as_array_args)that);
      return false;
    }

    public boolean equals(async_mutator_set_cell_as_array_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cell_as_array_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cell_as_array_args typedOther = (async_mutator_set_cell_as_array_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list178.size);
                for (int _i179 = 0; _i179 < _list178.size; ++_i179)
                {
                  String _elem180; // required
                  _elem180 = iprot.readString();
                  this.cell.add(_elem180);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter181 : this.cell)
          {
            oprot.writeString(_iter181);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cell_as_array_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cell_as_array_result implements org.apache.thrift.TBase<async_mutator_set_cell_as_array_result, async_mutator_set_cell_as_array_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cell_as_array_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cell_as_array_result.class, metaDataMap);
    }

    public async_mutator_set_cell_as_array_result() {
    }

    public async_mutator_set_cell_as_array_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cell_as_array_result(async_mutator_set_cell_as_array_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_set_cell_as_array_result deepCopy() {
      return new async_mutator_set_cell_as_array_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_set_cell_as_array_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cell_as_array_result)
        return this.equals((async_mutator_set_cell_as_array_result)that);
      return false;
    }

    public boolean equals(async_mutator_set_cell_as_array_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cell_as_array_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cell_as_array_result typedOther = (async_mutator_set_cell_as_array_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cell_as_array_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_as_array_async_args implements org.apache.thrift.TBase<set_cell_as_array_async_args, set_cell_as_array_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_as_array_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELL_FIELD_DESC = new org.apache.thrift.protocol.TField("cell", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<String> cell; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELL((short)2, "cell");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELL
            return CELL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELL, new org.apache.thrift.meta_data.FieldMetaData("cell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "CellAsArray")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_as_array_async_args.class, metaDataMap);
    }

    public set_cell_as_array_async_args() {
    }

    public set_cell_as_array_async_args(
      long mutator,
      List<String> cell)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cell = cell;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_as_array_async_args(set_cell_as_array_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCell()) {
        this.cell = other.cell;
      }
    }

    public set_cell_as_array_async_args deepCopy() {
      return new set_cell_as_array_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cell = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public set_cell_as_array_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellSize() {
      return (this.cell == null) ? 0 : this.cell.size();
    }

    public java.util.Iterator<String> getCellIterator() {
      return (this.cell == null) ? null : this.cell.iterator();
    }

    public void addToCell(String elem) {
      if (this.cell == null) {
        this.cell = new ArrayList<String>();
      }
      this.cell.add(elem);
    }

    public List<String> getCell() {
      return this.cell;
    }

    public set_cell_as_array_async_args setCell(List<String> cell) {
      this.cell = cell;
      return this;
    }

    public void unsetCell() {
      this.cell = null;
    }

    /** Returns true if field cell is set (has been assigned a value) and false otherwise */
    public boolean isSetCell() {
      return this.cell != null;
    }

    public void setCellIsSet(boolean value) {
      if (!value) {
        this.cell = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELL:
        if (value == null) {
          unsetCell();
        } else {
          setCell((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELL:
        return getCell();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELL:
        return isSetCell();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_as_array_async_args)
        return this.equals((set_cell_as_array_async_args)that);
      return false;
    }

    public boolean equals(set_cell_as_array_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cell = true && this.isSetCell();
      boolean that_present_cell = true && that.isSetCell();
      if (this_present_cell || that_present_cell) {
        if (!(this_present_cell && that_present_cell))
          return false;
        if (!this.cell.equals(that.cell))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_as_array_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_as_array_async_args typedOther = (set_cell_as_array_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCell()).compareTo(typedOther.isSetCell());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCell()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cell, typedOther.cell);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELL
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list182 = iprot.readListBegin();
                this.cell = new ArrayList<String>(_list182.size);
                for (int _i183 = 0; _i183 < _list182.size; ++_i183)
                {
                  String _elem184; // required
                  _elem184 = iprot.readString();
                  this.cell.add(_elem184);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cell != null) {
        oprot.writeFieldBegin(CELL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.cell.size()));
          for (String _iter185 : this.cell)
          {
            oprot.writeString(_iter185);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_as_array_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cell:");
      if (this.cell == null) {
        sb.append("null");
      } else {
        sb.append(this.cell);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cell_as_array_async_result implements org.apache.thrift.TBase<set_cell_as_array_async_result, set_cell_as_array_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cell_as_array_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cell_as_array_async_result.class, metaDataMap);
    }

    public set_cell_as_array_async_result() {
    }

    public set_cell_as_array_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cell_as_array_async_result(set_cell_as_array_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cell_as_array_async_result deepCopy() {
      return new set_cell_as_array_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cell_as_array_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cell_as_array_async_result)
        return this.equals((set_cell_as_array_async_result)that);
      return false;
    }

    public boolean equals(set_cell_as_array_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cell_as_array_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cell_as_array_async_result typedOther = (set_cell_as_array_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cell_as_array_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_args implements org.apache.thrift.TBase<async_mutator_set_cells_args, async_mutator_set_cells_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_args.class, metaDataMap);
    }

    public async_mutator_set_cells_args() {
    }

    public async_mutator_set_cells_args(
      long mutator,
      List<Cell> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_args(async_mutator_set_cells_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public async_mutator_set_cells_args deepCopy() {
      return new async_mutator_set_cells_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_set_cells_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public async_mutator_set_cells_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_args)
        return this.equals((async_mutator_set_cells_args)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_args typedOther = (async_mutator_set_cells_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list186 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list186.size);
                for (int _i187 = 0; _i187 < _list186.size; ++_i187)
                {
                  Cell _elem188; // required
                  _elem188 = new Cell();
                  _elem188.read(iprot);
                  this.cells.add(_elem188);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter189 : this.cells)
          {
            _iter189.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_result implements org.apache.thrift.TBase<async_mutator_set_cells_result, async_mutator_set_cells_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_result.class, metaDataMap);
    }

    public async_mutator_set_cells_result() {
    }

    public async_mutator_set_cells_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_result(async_mutator_set_cells_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_set_cells_result deepCopy() {
      return new async_mutator_set_cells_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_set_cells_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_result)
        return this.equals((async_mutator_set_cells_result)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_result typedOther = (async_mutator_set_cells_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_async_args implements org.apache.thrift.TBase<set_cells_async_args, set_cells_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<Cell> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cell.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_async_args.class, metaDataMap);
    }

    public set_cells_async_args() {
    }

    public set_cells_async_args(
      long mutator,
      List<Cell> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_async_args(set_cells_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<Cell> __this__cells = new ArrayList<Cell>();
        for (Cell other_element : other.cells) {
          __this__cells.add(new Cell(other_element));
        }
        this.cells = __this__cells;
      }
    }

    public set_cells_async_args deepCopy() {
      return new set_cells_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public set_cells_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<Cell> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(Cell elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<Cell>();
      }
      this.cells.add(elem);
    }

    public List<Cell> getCells() {
      return this.cells;
    }

    public set_cells_async_args setCells(List<Cell> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<Cell>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_async_args)
        return this.equals((set_cells_async_args)that);
      return false;
    }

    public boolean equals(set_cells_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_async_args typedOther = (set_cells_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                this.cells = new ArrayList<Cell>(_list190.size);
                for (int _i191 = 0; _i191 < _list190.size; ++_i191)
                {
                  Cell _elem192; // required
                  _elem192 = new Cell();
                  _elem192.read(iprot);
                  this.cells.add(_elem192);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cells.size()));
          for (Cell _iter193 : this.cells)
          {
            _iter193.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_async_result implements org.apache.thrift.TBase<set_cells_async_result, set_cells_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_async_result.class, metaDataMap);
    }

    public set_cells_async_result() {
    }

    public set_cells_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_async_result(set_cells_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_async_result deepCopy() {
      return new set_cells_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_async_result)
        return this.equals((set_cells_async_result)that);
      return false;
    }

    public boolean equals(set_cells_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_async_result typedOther = (set_cells_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_as_arrays_args implements org.apache.thrift.TBase<async_mutator_set_cells_as_arrays_args, async_mutator_set_cells_as_arrays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_as_arrays_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_as_arrays_args.class, metaDataMap);
    }

    public async_mutator_set_cells_as_arrays_args() {
    }

    public async_mutator_set_cells_as_arrays_args(
      long mutator,
      List<List<String>> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_as_arrays_args(async_mutator_set_cells_as_arrays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public async_mutator_set_cells_as_arrays_args deepCopy() {
      return new async_mutator_set_cells_as_arrays_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_set_cells_as_arrays_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public async_mutator_set_cells_as_arrays_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_as_arrays_args)
        return this.equals((async_mutator_set_cells_as_arrays_args)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_as_arrays_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_as_arrays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_as_arrays_args typedOther = (async_mutator_set_cells_as_arrays_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list194 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list194.size);
                for (int _i195 = 0; _i195 < _list194.size; ++_i195)
                {
                  List<String> _elem196; // required
                  {
                    org.apache.thrift.protocol.TList _list197 = iprot.readListBegin();
                    _elem196 = new ArrayList<String>(_list197.size);
                    for (int _i198 = 0; _i198 < _list197.size; ++_i198)
                    {
                      String _elem199; // required
                      _elem199 = iprot.readString();
                      _elem196.add(_elem199);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem196);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter200 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter200.size()));
              for (String _iter201 : _iter200)
              {
                oprot.writeString(_iter201);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_as_arrays_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_as_arrays_result implements org.apache.thrift.TBase<async_mutator_set_cells_as_arrays_result, async_mutator_set_cells_as_arrays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_as_arrays_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_as_arrays_result.class, metaDataMap);
    }

    public async_mutator_set_cells_as_arrays_result() {
    }

    public async_mutator_set_cells_as_arrays_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_as_arrays_result(async_mutator_set_cells_as_arrays_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_set_cells_as_arrays_result deepCopy() {
      return new async_mutator_set_cells_as_arrays_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_set_cells_as_arrays_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_as_arrays_result)
        return this.equals((async_mutator_set_cells_as_arrays_result)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_as_arrays_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_as_arrays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_as_arrays_result typedOther = (async_mutator_set_cells_as_arrays_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_as_arrays_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_as_arrays_async_args implements org.apache.thrift.TBase<set_cells_as_arrays_async_args, set_cells_as_arrays_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_as_arrays_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.LIST, (short)2);

    public long mutator; // required
    public List<List<String>> cells; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST              , "CellAsArray"))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_as_arrays_async_args.class, metaDataMap);
    }

    public set_cells_as_arrays_async_args() {
    }

    public set_cells_as_arrays_async_args(
      long mutator,
      List<List<String>> cells)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_as_arrays_async_args(set_cells_as_arrays_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        List<List<String>> __this__cells = new ArrayList<List<String>>();
        for (List<String> other_element : other.cells) {
          __this__cells.add(other_element);
        }
        this.cells = __this__cells;
      }
    }

    public set_cells_as_arrays_async_args deepCopy() {
      return new set_cells_as_arrays_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
    }

    public long getMutator() {
      return this.mutator;
    }

    public set_cells_as_arrays_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public int getCellsSize() {
      return (this.cells == null) ? 0 : this.cells.size();
    }

    public java.util.Iterator<List<String>> getCellsIterator() {
      return (this.cells == null) ? null : this.cells.iterator();
    }

    public void addToCells(List<String> elem) {
      if (this.cells == null) {
        this.cells = new ArrayList<List<String>>();
      }
      this.cells.add(elem);
    }

    public List<List<String>> getCells() {
      return this.cells;
    }

    public set_cells_as_arrays_async_args setCells(List<List<String>> cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((List<List<String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_as_arrays_async_args)
        return this.equals((set_cells_as_arrays_async_args)that);
      return false;
    }

    public boolean equals(set_cells_as_arrays_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_as_arrays_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_as_arrays_async_args typedOther = (set_cells_as_arrays_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                this.cells = new ArrayList<List<String>>(_list202.size);
                for (int _i203 = 0; _i203 < _list202.size; ++_i203)
                {
                  List<String> _elem204; // required
                  {
                    org.apache.thrift.protocol.TList _list205 = iprot.readListBegin();
                    _elem204 = new ArrayList<String>(_list205.size);
                    for (int _i206 = 0; _i206 < _list205.size; ++_i206)
                    {
                      String _elem207; // required
                      _elem207 = iprot.readString();
                      _elem204.add(_elem207);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.add(_elem204);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, this.cells.size()));
          for (List<String> _iter208 : this.cells)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter208.size()));
              for (String _iter209 : _iter208)
              {
                oprot.writeString(_iter209);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_as_arrays_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_as_arrays_async_result implements org.apache.thrift.TBase<set_cells_as_arrays_async_result, set_cells_as_arrays_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_as_arrays_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_as_arrays_async_result.class, metaDataMap);
    }

    public set_cells_as_arrays_async_result() {
    }

    public set_cells_as_arrays_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_as_arrays_async_result(set_cells_as_arrays_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_as_arrays_async_result deepCopy() {
      return new set_cells_as_arrays_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_as_arrays_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_as_arrays_async_result)
        return this.equals((set_cells_as_arrays_async_result)that);
      return false;
    }

    public boolean equals(set_cells_as_arrays_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_as_arrays_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_as_arrays_async_result typedOther = (set_cells_as_arrays_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_as_arrays_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_serialized_args implements org.apache.thrift.TBase<async_mutator_set_cells_serialized_args, async_mutator_set_cells_serialized_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_serialized_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("flush", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public long mutator; // required
    public ByteBuffer cells; // required
    public boolean flush; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells"),
      FLUSH((short)3, "flush");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          case 3: // FLUSH
            return FLUSH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private static final int __FLUSH_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.FLUSH, new org.apache.thrift.meta_data.FieldMetaData("flush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_serialized_args.class, metaDataMap);
    }

    public async_mutator_set_cells_serialized_args() {
      this.flush = false;

    }

    public async_mutator_set_cells_serialized_args(
      long mutator,
      ByteBuffer cells,
      boolean flush)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
      this.flush = flush;
      setFlushIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_serialized_args(async_mutator_set_cells_serialized_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        this.cells = other.cells;
      }
      this.flush = other.flush;
    }

    public async_mutator_set_cells_serialized_args deepCopy() {
      return new async_mutator_set_cells_serialized_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
      this.flush = false;

    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_set_cells_serialized_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public byte[] getCells() {
      setCells(org.apache.thrift.TBaseHelper.rightSize(cells));
      return cells == null ? null : cells.array();
    }

    public ByteBuffer bufferForCells() {
      return cells;
    }

    public async_mutator_set_cells_serialized_args setCells(byte[] cells) {
      setCells(cells == null ? (ByteBuffer)null : ByteBuffer.wrap(cells));
      return this;
    }

    public async_mutator_set_cells_serialized_args setCells(ByteBuffer cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public boolean isFlush() {
      return this.flush;
    }

    public async_mutator_set_cells_serialized_args setFlush(boolean flush) {
      this.flush = flush;
      setFlushIsSet(true);
      return this;
    }

    public void unsetFlush() {
      __isset_bit_vector.clear(__FLUSH_ISSET_ID);
    }

    /** Returns true if field flush is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush() {
      return __isset_bit_vector.get(__FLUSH_ISSET_ID);
    }

    public void setFlushIsSet(boolean value) {
      __isset_bit_vector.set(__FLUSH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((ByteBuffer)value);
        }
        break;

      case FLUSH:
        if (value == null) {
          unsetFlush();
        } else {
          setFlush((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      case FLUSH:
        return Boolean.valueOf(isFlush());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      case FLUSH:
        return isSetFlush();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_serialized_args)
        return this.equals((async_mutator_set_cells_serialized_args)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_serialized_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      boolean this_present_flush = true;
      boolean that_present_flush = true;
      if (this_present_flush || that_present_flush) {
        if (!(this_present_flush && that_present_flush))
          return false;
        if (this.flush != that.flush)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_serialized_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_serialized_args typedOther = (async_mutator_set_cells_serialized_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush()).compareTo(typedOther.isSetFlush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush, typedOther.flush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cells = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLUSH
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.flush = iprot.readBool();
              setFlushIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        oprot.writeBinary(this.cells);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLUSH_FIELD_DESC);
      oprot.writeBool(this.flush);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_serialized_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush:");
      sb.append(this.flush);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_set_cells_serialized_result implements org.apache.thrift.TBase<async_mutator_set_cells_serialized_result, async_mutator_set_cells_serialized_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_set_cells_serialized_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_set_cells_serialized_result.class, metaDataMap);
    }

    public async_mutator_set_cells_serialized_result() {
    }

    public async_mutator_set_cells_serialized_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_set_cells_serialized_result(async_mutator_set_cells_serialized_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_set_cells_serialized_result deepCopy() {
      return new async_mutator_set_cells_serialized_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_set_cells_serialized_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_set_cells_serialized_result)
        return this.equals((async_mutator_set_cells_serialized_result)that);
      return false;
    }

    public boolean equals(async_mutator_set_cells_serialized_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_set_cells_serialized_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_set_cells_serialized_result typedOther = (async_mutator_set_cells_serialized_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_set_cells_serialized_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_serialized_async_args implements org.apache.thrift.TBase<set_cells_serialized_async_args, set_cells_serialized_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_serialized_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("cells", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FLUSH_FIELD_DESC = new org.apache.thrift.protocol.TField("flush", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public long mutator; // required
    public ByteBuffer cells; // required
    public boolean flush; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator"),
      CELLS((short)2, "cells"),
      FLUSH((short)3, "flush");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          case 2: // CELLS
            return CELLS;
          case 3: // FLUSH
            return FLUSH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private static final int __FLUSH_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      tmpMap.put(_Fields.CELLS, new org.apache.thrift.meta_data.FieldMetaData("cells", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "CellsSerialized")));
      tmpMap.put(_Fields.FLUSH, new org.apache.thrift.meta_data.FieldMetaData("flush", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_serialized_async_args.class, metaDataMap);
    }

    public set_cells_serialized_async_args() {
      this.flush = false;

    }

    public set_cells_serialized_async_args(
      long mutator,
      ByteBuffer cells,
      boolean flush)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
      this.cells = cells;
      this.flush = flush;
      setFlushIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_serialized_async_args(set_cells_serialized_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
      if (other.isSetCells()) {
        this.cells = other.cells;
      }
      this.flush = other.flush;
    }

    public set_cells_serialized_async_args deepCopy() {
      return new set_cells_serialized_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
      this.cells = null;
      this.flush = false;

    }

    public long getMutator() {
      return this.mutator;
    }

    public set_cells_serialized_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public byte[] getCells() {
      setCells(org.apache.thrift.TBaseHelper.rightSize(cells));
      return cells == null ? null : cells.array();
    }

    public ByteBuffer bufferForCells() {
      return cells;
    }

    public set_cells_serialized_async_args setCells(byte[] cells) {
      setCells(cells == null ? (ByteBuffer)null : ByteBuffer.wrap(cells));
      return this;
    }

    public set_cells_serialized_async_args setCells(ByteBuffer cells) {
      this.cells = cells;
      return this;
    }

    public void unsetCells() {
      this.cells = null;
    }

    /** Returns true if field cells is set (has been assigned a value) and false otherwise */
    public boolean isSetCells() {
      return this.cells != null;
    }

    public void setCellsIsSet(boolean value) {
      if (!value) {
        this.cells = null;
      }
    }

    public boolean isFlush() {
      return this.flush;
    }

    public set_cells_serialized_async_args setFlush(boolean flush) {
      this.flush = flush;
      setFlushIsSet(true);
      return this;
    }

    public void unsetFlush() {
      __isset_bit_vector.clear(__FLUSH_ISSET_ID);
    }

    /** Returns true if field flush is set (has been assigned a value) and false otherwise */
    public boolean isSetFlush() {
      return __isset_bit_vector.get(__FLUSH_ISSET_ID);
    }

    public void setFlushIsSet(boolean value) {
      __isset_bit_vector.set(__FLUSH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      case CELLS:
        if (value == null) {
          unsetCells();
        } else {
          setCells((ByteBuffer)value);
        }
        break;

      case FLUSH:
        if (value == null) {
          unsetFlush();
        } else {
          setFlush((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      case CELLS:
        return getCells();

      case FLUSH:
        return Boolean.valueOf(isFlush());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      case CELLS:
        return isSetCells();
      case FLUSH:
        return isSetFlush();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_serialized_async_args)
        return this.equals((set_cells_serialized_async_args)that);
      return false;
    }

    public boolean equals(set_cells_serialized_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      boolean this_present_cells = true && this.isSetCells();
      boolean that_present_cells = true && that.isSetCells();
      if (this_present_cells || that_present_cells) {
        if (!(this_present_cells && that_present_cells))
          return false;
        if (!this.cells.equals(that.cells))
          return false;
      }

      boolean this_present_flush = true;
      boolean that_present_flush = true;
      if (this_present_flush || that_present_flush) {
        if (!(this_present_flush && that_present_flush))
          return false;
        if (this.flush != that.flush)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_serialized_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_serialized_async_args typedOther = (set_cells_serialized_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCells()).compareTo(typedOther.isSetCells());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCells()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cells, typedOther.cells);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFlush()).compareTo(typedOther.isSetFlush());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlush()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flush, typedOther.flush);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CELLS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cells = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLUSH
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.flush = iprot.readBool();
              setFlushIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      if (this.cells != null) {
        oprot.writeFieldBegin(CELLS_FIELD_DESC);
        oprot.writeBinary(this.cells);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLUSH_FIELD_DESC);
      oprot.writeBool(this.flush);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_serialized_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cells:");
      if (this.cells == null) {
        sb.append("null");
      } else {
        sb.append(this.cells);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flush:");
      sb.append(this.flush);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class set_cells_serialized_async_result implements org.apache.thrift.TBase<set_cells_serialized_async_result, set_cells_serialized_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("set_cells_serialized_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(set_cells_serialized_async_result.class, metaDataMap);
    }

    public set_cells_serialized_async_result() {
    }

    public set_cells_serialized_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public set_cells_serialized_async_result(set_cells_serialized_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public set_cells_serialized_async_result deepCopy() {
      return new set_cells_serialized_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public set_cells_serialized_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof set_cells_serialized_async_result)
        return this.equals((set_cells_serialized_async_result)that);
      return false;
    }

    public boolean equals(set_cells_serialized_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(set_cells_serialized_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      set_cells_serialized_async_result typedOther = (set_cells_serialized_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("set_cells_serialized_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_flush_args implements org.apache.thrift.TBase<async_mutator_flush_args, async_mutator_flush_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_flush_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_flush_args.class, metaDataMap);
    }

    public async_mutator_flush_args() {
    }

    public async_mutator_flush_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_flush_args(async_mutator_flush_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public async_mutator_flush_args deepCopy() {
      return new async_mutator_flush_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public async_mutator_flush_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_flush_args)
        return this.equals((async_mutator_flush_args)that);
      return false;
    }

    public boolean equals(async_mutator_flush_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_flush_args typedOther = (async_mutator_flush_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_flush_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class async_mutator_flush_result implements org.apache.thrift.TBase<async_mutator_flush_result, async_mutator_flush_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("async_mutator_flush_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(async_mutator_flush_result.class, metaDataMap);
    }

    public async_mutator_flush_result() {
    }

    public async_mutator_flush_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public async_mutator_flush_result(async_mutator_flush_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public async_mutator_flush_result deepCopy() {
      return new async_mutator_flush_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public async_mutator_flush_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof async_mutator_flush_result)
        return this.equals((async_mutator_flush_result)that);
      return false;
    }

    public boolean equals(async_mutator_flush_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(async_mutator_flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      async_mutator_flush_result typedOther = (async_mutator_flush_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("async_mutator_flush_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class flush_mutator_async_args implements org.apache.thrift.TBase<flush_mutator_async_args, flush_mutator_async_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flush_mutator_async_args");

    private static final org.apache.thrift.protocol.TField MUTATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mutator", org.apache.thrift.protocol.TType.I64, (short)1);

    public long mutator; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MUTATOR((short)1, "mutator");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MUTATOR
            return MUTATOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MUTATOR_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MUTATOR, new org.apache.thrift.meta_data.FieldMetaData("mutator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "MutatorAsync")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flush_mutator_async_args.class, metaDataMap);
    }

    public flush_mutator_async_args() {
    }

    public flush_mutator_async_args(
      long mutator)
    {
      this();
      this.mutator = mutator;
      setMutatorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_async_args(flush_mutator_async_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.mutator = other.mutator;
    }

    public flush_mutator_async_args deepCopy() {
      return new flush_mutator_async_args(this);
    }

    @Override
    public void clear() {
      setMutatorIsSet(false);
      this.mutator = 0;
    }

    public long getMutator() {
      return this.mutator;
    }

    public flush_mutator_async_args setMutator(long mutator) {
      this.mutator = mutator;
      setMutatorIsSet(true);
      return this;
    }

    public void unsetMutator() {
      __isset_bit_vector.clear(__MUTATOR_ISSET_ID);
    }

    /** Returns true if field mutator is set (has been assigned a value) and false otherwise */
    public boolean isSetMutator() {
      return __isset_bit_vector.get(__MUTATOR_ISSET_ID);
    }

    public void setMutatorIsSet(boolean value) {
      __isset_bit_vector.set(__MUTATOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MUTATOR:
        if (value == null) {
          unsetMutator();
        } else {
          setMutator((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MUTATOR:
        return Long.valueOf(getMutator());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MUTATOR:
        return isSetMutator();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_async_args)
        return this.equals((flush_mutator_async_args)that);
      return false;
    }

    public boolean equals(flush_mutator_async_args that) {
      if (that == null)
        return false;

      boolean this_present_mutator = true;
      boolean that_present_mutator = true;
      if (this_present_mutator || that_present_mutator) {
        if (!(this_present_mutator && that_present_mutator))
          return false;
        if (this.mutator != that.mutator)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(flush_mutator_async_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_mutator_async_args typedOther = (flush_mutator_async_args)other;

      lastComparison = Boolean.valueOf(isSetMutator()).compareTo(typedOther.isSetMutator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMutator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mutator, typedOther.mutator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATOR
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.mutator = iprot.readI64();
              setMutatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MUTATOR_FIELD_DESC);
      oprot.writeI64(this.mutator);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_async_args(");
      boolean first = true;

      sb.append("mutator:");
      sb.append(this.mutator);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class flush_mutator_async_result implements org.apache.thrift.TBase<flush_mutator_async_result, flush_mutator_async_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("flush_mutator_async_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(flush_mutator_async_result.class, metaDataMap);
    }

    public flush_mutator_async_result() {
    }

    public flush_mutator_async_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public flush_mutator_async_result(flush_mutator_async_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public flush_mutator_async_result deepCopy() {
      return new flush_mutator_async_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public flush_mutator_async_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof flush_mutator_async_result)
        return this.equals((flush_mutator_async_result)that);
      return false;
    }

    public boolean equals(flush_mutator_async_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(flush_mutator_async_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      flush_mutator_async_result typedOther = (flush_mutator_async_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("flush_mutator_async_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_exists_args implements org.apache.thrift.TBase<namespace_exists_args, namespace_exists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_exists_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_exists_args.class, metaDataMap);
    }

    public namespace_exists_args() {
    }

    public namespace_exists_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_exists_args(namespace_exists_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public namespace_exists_args deepCopy() {
      return new namespace_exists_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public namespace_exists_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_exists_args)
        return this.equals((namespace_exists_args)that);
      return false;
    }

    public boolean equals(namespace_exists_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_exists_args typedOther = (namespace_exists_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_exists_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_exists_result implements org.apache.thrift.TBase<namespace_exists_result, namespace_exists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_exists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_exists_result.class, metaDataMap);
    }

    public namespace_exists_result() {
    }

    public namespace_exists_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_exists_result(namespace_exists_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_exists_result deepCopy() {
      return new namespace_exists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public namespace_exists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_exists_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_exists_result)
        return this.equals((namespace_exists_result)that);
      return false;
    }

    public boolean equals(namespace_exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_exists_result typedOther = (namespace_exists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exists_namespace_args implements org.apache.thrift.TBase<exists_namespace_args, exists_namespace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_namespace_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);

    public String ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_namespace_args.class, metaDataMap);
    }

    public exists_namespace_args() {
    }

    public exists_namespace_args(
      String ns)
    {
      this();
      this.ns = ns;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_namespace_args(exists_namespace_args other) {
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
    }

    public exists_namespace_args deepCopy() {
      return new exists_namespace_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
    }

    public String getNs() {
      return this.ns;
    }

    public exists_namespace_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_namespace_args)
        return this.equals((exists_namespace_args)that);
      return false;
    }

    public boolean equals(exists_namespace_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exists_namespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exists_namespace_args typedOther = (exists_namespace_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_namespace_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exists_namespace_result implements org.apache.thrift.TBase<exists_namespace_result, exists_namespace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_namespace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_namespace_result.class, metaDataMap);
    }

    public exists_namespace_result() {
    }

    public exists_namespace_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_namespace_result(exists_namespace_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public exists_namespace_result deepCopy() {
      return new exists_namespace_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exists_namespace_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public exists_namespace_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_namespace_result)
        return this.equals((exists_namespace_result)that);
      return false;
    }

    public boolean equals(exists_namespace_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exists_namespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exists_namespace_result typedOther = (exists_namespace_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_namespace_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exists_table_args implements org.apache.thrift.TBase<exists_table_args, exists_table_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_table_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_table_args.class, metaDataMap);
    }

    public exists_table_args() {
    }

    public exists_table_args(
      long ns,
      String name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_table_args(exists_table_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public exists_table_args deepCopy() {
      return new exists_table_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public exists_table_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public exists_table_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_table_args)
        return this.equals((exists_table_args)that);
      return false;
    }

    public boolean equals(exists_table_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exists_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exists_table_args typedOther = (exists_table_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_table_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class exists_table_result implements org.apache.thrift.TBase<exists_table_result, exists_table_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exists_table_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exists_table_result.class, metaDataMap);
    }

    public exists_table_result() {
    }

    public exists_table_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exists_table_result(exists_table_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public exists_table_result deepCopy() {
      return new exists_table_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exists_table_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public exists_table_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exists_table_result)
        return this.equals((exists_table_result)that);
      return false;
    }

    public boolean equals(exists_table_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exists_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exists_table_result typedOther = (exists_table_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exists_table_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_exists_args implements org.apache.thrift.TBase<table_exists_args, table_exists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_exists_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_exists_args.class, metaDataMap);
    }

    public table_exists_args() {
    }

    public table_exists_args(
      long ns,
      String name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_exists_args(table_exists_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public table_exists_args deepCopy() {
      return new table_exists_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_exists_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public table_exists_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_exists_args)
        return this.equals((table_exists_args)that);
      return false;
    }

    public boolean equals(table_exists_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_exists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_exists_args typedOther = (table_exists_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_exists_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_exists_result implements org.apache.thrift.TBase<table_exists_result, table_exists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_exists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public boolean success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_exists_result.class, metaDataMap);
    }

    public table_exists_result() {
    }

    public table_exists_result(
      boolean success,
      ClientException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_exists_result(table_exists_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_exists_result deepCopy() {
      return new table_exists_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public table_exists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public ClientException getE() {
      return this.e;
    }

    public table_exists_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_exists_result)
        return this.equals((table_exists_result)that);
      return false;
    }

    public boolean equals(table_exists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_exists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_exists_result typedOther = (table_exists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_exists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_id_args implements org.apache.thrift.TBase<table_get_id_args, table_get_id_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_id_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_id_args.class, metaDataMap);
    }

    public table_get_id_args() {
    }

    public table_get_id_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_id_args(table_get_id_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public table_get_id_args deepCopy() {
      return new table_get_id_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_get_id_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_get_id_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_id_args)
        return this.equals((table_get_id_args)that);
      return false;
    }

    public boolean equals(table_get_id_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_id_args typedOther = (table_get_id_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_id_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_id_result implements org.apache.thrift.TBase<table_get_id_result, table_get_id_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_id_result.class, metaDataMap);
    }

    public table_get_id_result() {
    }

    public table_get_id_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_id_result(table_get_id_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_get_id_result deepCopy() {
      return new table_get_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public table_get_id_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public table_get_id_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_id_result)
        return this.equals((table_get_id_result)that);
      return false;
    }

    public boolean equals(table_get_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_id_result typedOther = (table_get_id_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_table_id_args implements org.apache.thrift.TBase<get_table_id_args, get_table_id_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_id_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_id_args.class, metaDataMap);
    }

    public get_table_id_args() {
    }

    public get_table_id_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_id_args(get_table_id_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public get_table_id_args deepCopy() {
      return new get_table_id_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_table_id_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_table_id_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_id_args)
        return this.equals((get_table_id_args)that);
      return false;
    }

    public boolean equals(get_table_id_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_table_id_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_table_id_args typedOther = (get_table_id_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_id_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_table_id_result implements org.apache.thrift.TBase<get_table_id_result, get_table_id_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_id_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_id_result.class, metaDataMap);
    }

    public get_table_id_result() {
    }

    public get_table_id_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_id_result(get_table_id_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_table_id_result deepCopy() {
      return new get_table_id_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_table_id_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_table_id_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_id_result)
        return this.equals((get_table_id_result)that);
      return false;
    }

    public boolean equals(get_table_id_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_table_id_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_table_id_result typedOther = (get_table_id_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_id_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_str_args implements org.apache.thrift.TBase<table_get_schema_str_args, table_get_schema_str_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_str_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_str_args.class, metaDataMap);
    }

    public table_get_schema_str_args() {
    }

    public table_get_schema_str_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_str_args(table_get_schema_str_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public table_get_schema_str_args deepCopy() {
      return new table_get_schema_str_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_get_schema_str_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_get_schema_str_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_str_args)
        return this.equals((table_get_schema_str_args)that);
      return false;
    }

    public boolean equals(table_get_schema_str_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_str_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_str_args typedOther = (table_get_schema_str_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_str_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_str_result implements org.apache.thrift.TBase<table_get_schema_str_result, table_get_schema_str_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_str_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_str_result.class, metaDataMap);
    }

    public table_get_schema_str_result() {
    }

    public table_get_schema_str_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_str_result(table_get_schema_str_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_get_schema_str_result deepCopy() {
      return new table_get_schema_str_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public table_get_schema_str_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public table_get_schema_str_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_str_result)
        return this.equals((table_get_schema_str_result)that);
      return false;
    }

    public boolean equals(table_get_schema_str_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_str_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_str_result typedOther = (table_get_schema_str_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_str_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_str_args implements org.apache.thrift.TBase<get_schema_str_args, get_schema_str_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_str_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_str_args.class, metaDataMap);
    }

    public get_schema_str_args() {
    }

    public get_schema_str_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_str_args(get_schema_str_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public get_schema_str_args deepCopy() {
      return new get_schema_str_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_schema_str_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_schema_str_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_str_args)
        return this.equals((get_schema_str_args)that);
      return false;
    }

    public boolean equals(get_schema_str_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_str_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_str_args typedOther = (get_schema_str_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_str_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_str_result implements org.apache.thrift.TBase<get_schema_str_result, get_schema_str_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_str_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_str_result.class, metaDataMap);
    }

    public get_schema_str_result() {
    }

    public get_schema_str_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_str_result(get_schema_str_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_schema_str_result deepCopy() {
      return new get_schema_str_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_schema_str_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_schema_str_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_str_result)
        return this.equals((get_schema_str_result)that);
      return false;
    }

    public boolean equals(get_schema_str_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_str_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_str_result typedOther = (get_schema_str_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_str_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_str_with_ids_args implements org.apache.thrift.TBase<table_get_schema_str_with_ids_args, table_get_schema_str_with_ids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_str_with_ids_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_str_with_ids_args.class, metaDataMap);
    }

    public table_get_schema_str_with_ids_args() {
    }

    public table_get_schema_str_with_ids_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_str_with_ids_args(table_get_schema_str_with_ids_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public table_get_schema_str_with_ids_args deepCopy() {
      return new table_get_schema_str_with_ids_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_get_schema_str_with_ids_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_get_schema_str_with_ids_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_str_with_ids_args)
        return this.equals((table_get_schema_str_with_ids_args)that);
      return false;
    }

    public boolean equals(table_get_schema_str_with_ids_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_str_with_ids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_str_with_ids_args typedOther = (table_get_schema_str_with_ids_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_str_with_ids_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_str_with_ids_result implements org.apache.thrift.TBase<table_get_schema_str_with_ids_result, table_get_schema_str_with_ids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_str_with_ids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_str_with_ids_result.class, metaDataMap);
    }

    public table_get_schema_str_with_ids_result() {
    }

    public table_get_schema_str_with_ids_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_str_with_ids_result(table_get_schema_str_with_ids_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_get_schema_str_with_ids_result deepCopy() {
      return new table_get_schema_str_with_ids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public table_get_schema_str_with_ids_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public table_get_schema_str_with_ids_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_str_with_ids_result)
        return this.equals((table_get_schema_str_with_ids_result)that);
      return false;
    }

    public boolean equals(table_get_schema_str_with_ids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_str_with_ids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_str_with_ids_result typedOther = (table_get_schema_str_with_ids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_str_with_ids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_str_with_ids_args implements org.apache.thrift.TBase<get_schema_str_with_ids_args, get_schema_str_with_ids_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_str_with_ids_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_str_with_ids_args.class, metaDataMap);
    }

    public get_schema_str_with_ids_args() {
    }

    public get_schema_str_with_ids_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_str_with_ids_args(get_schema_str_with_ids_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public get_schema_str_with_ids_args deepCopy() {
      return new get_schema_str_with_ids_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_schema_str_with_ids_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_schema_str_with_ids_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_str_with_ids_args)
        return this.equals((get_schema_str_with_ids_args)that);
      return false;
    }

    public boolean equals(get_schema_str_with_ids_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_str_with_ids_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_str_with_ids_args typedOther = (get_schema_str_with_ids_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_str_with_ids_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_str_with_ids_result implements org.apache.thrift.TBase<get_schema_str_with_ids_result, get_schema_str_with_ids_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_str_with_ids_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_str_with_ids_result.class, metaDataMap);
    }

    public get_schema_str_with_ids_result() {
    }

    public get_schema_str_with_ids_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_str_with_ids_result(get_schema_str_with_ids_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_schema_str_with_ids_result deepCopy() {
      return new get_schema_str_with_ids_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public get_schema_str_with_ids_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_schema_str_with_ids_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_str_with_ids_result)
        return this.equals((get_schema_str_with_ids_result)that);
      return false;
    }

    public boolean equals(get_schema_str_with_ids_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_str_with_ids_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_str_with_ids_result typedOther = (get_schema_str_with_ids_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_str_with_ids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_args implements org.apache.thrift.TBase<table_get_schema_args, table_get_schema_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_args.class, metaDataMap);
    }

    public table_get_schema_args() {
    }

    public table_get_schema_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_args(table_get_schema_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public table_get_schema_args deepCopy() {
      return new table_get_schema_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_get_schema_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_get_schema_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_args)
        return this.equals((table_get_schema_args)that);
      return false;
    }

    public boolean equals(table_get_schema_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_args typedOther = (table_get_schema_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_schema_result implements org.apache.thrift.TBase<table_get_schema_result, table_get_schema_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_schema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public Schema success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schema.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_schema_result.class, metaDataMap);
    }

    public table_get_schema_result() {
    }

    public table_get_schema_result(
      Schema success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_schema_result(table_get_schema_result other) {
      if (other.isSetSuccess()) {
        this.success = new Schema(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_get_schema_result deepCopy() {
      return new table_get_schema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Schema getSuccess() {
      return this.success;
    }

    public table_get_schema_result setSuccess(Schema success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public table_get_schema_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Schema)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_schema_result)
        return this.equals((table_get_schema_result)that);
      return false;
    }

    public boolean equals(table_get_schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_schema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_schema_result typedOther = (table_get_schema_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new Schema();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_schema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_args implements org.apache.thrift.TBase<get_schema_args, get_schema_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_args.class, metaDataMap);
    }

    public get_schema_args() {
    }

    public get_schema_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_args(get_schema_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public get_schema_args deepCopy() {
      return new get_schema_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_schema_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_schema_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_args)
        return this.equals((get_schema_args)that);
      return false;
    }

    public boolean equals(get_schema_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_args typedOther = (get_schema_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_schema_result implements org.apache.thrift.TBase<get_schema_result, get_schema_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_schema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public Schema success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Schema.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_schema_result.class, metaDataMap);
    }

    public get_schema_result() {
    }

    public get_schema_result(
      Schema success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_schema_result(get_schema_result other) {
      if (other.isSetSuccess()) {
        this.success = new Schema(other.success);
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_schema_result deepCopy() {
      return new get_schema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Schema getSuccess() {
      return this.success;
    }

    public get_schema_result setSuccess(Schema success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_schema_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Schema)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_schema_result)
        return this.equals((get_schema_result)that);
      return false;
    }

    public boolean equals(get_schema_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_schema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_schema_result typedOther = (get_schema_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new Schema();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_schema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_tables_args implements org.apache.thrift.TBase<get_tables_args, get_tables_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tables_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tables_args.class, metaDataMap);
    }

    public get_tables_args() {
    }

    public get_tables_args(
      long ns)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_args(get_tables_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
    }

    public get_tables_args deepCopy() {
      return new get_tables_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
    }

    public long getNs() {
      return this.ns;
    }

    public get_tables_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_args)
        return this.equals((get_tables_args)that);
      return false;
    }

    public boolean equals(get_tables_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tables_args typedOther = (get_tables_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_tables_result implements org.apache.thrift.TBase<get_tables_result, get_tables_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_tables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<String> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_tables_result.class, metaDataMap);
    }

    public get_tables_result() {
    }

    public get_tables_result(
      List<String> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_tables_result(get_tables_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_tables_result deepCopy() {
      return new get_tables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public get_tables_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_tables_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_tables_result)
        return this.equals((get_tables_result)that);
      return false;
    }

    public boolean equals(get_tables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_tables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_tables_result typedOther = (get_tables_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list210.size);
                for (int _i211 = 0; _i211 < _list210.size; ++_i211)
                {
                  String _elem212; // required
                  _elem212 = iprot.readString();
                  this.success.add(_elem212);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (String _iter213 : this.success)
          {
            oprot.writeString(_iter213);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_tables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_get_listing_args implements org.apache.thrift.TBase<namespace_get_listing_args, namespace_get_listing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_get_listing_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_get_listing_args.class, metaDataMap);
    }

    public namespace_get_listing_args() {
    }

    public namespace_get_listing_args(
      long ns)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_get_listing_args(namespace_get_listing_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
    }

    public namespace_get_listing_args deepCopy() {
      return new namespace_get_listing_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
    }

    public long getNs() {
      return this.ns;
    }

    public namespace_get_listing_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_get_listing_args)
        return this.equals((namespace_get_listing_args)that);
      return false;
    }

    public boolean equals(namespace_get_listing_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_get_listing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_get_listing_args typedOther = (namespace_get_listing_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_get_listing_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_get_listing_result implements org.apache.thrift.TBase<namespace_get_listing_result, namespace_get_listing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_get_listing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<NamespaceListing> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamespaceListing.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_get_listing_result.class, metaDataMap);
    }

    public namespace_get_listing_result() {
    }

    public namespace_get_listing_result(
      List<NamespaceListing> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_get_listing_result(namespace_get_listing_result other) {
      if (other.isSetSuccess()) {
        List<NamespaceListing> __this__success = new ArrayList<NamespaceListing>();
        for (NamespaceListing other_element : other.success) {
          __this__success.add(new NamespaceListing(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_get_listing_result deepCopy() {
      return new namespace_get_listing_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NamespaceListing> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NamespaceListing elem) {
      if (this.success == null) {
        this.success = new ArrayList<NamespaceListing>();
      }
      this.success.add(elem);
    }

    public List<NamespaceListing> getSuccess() {
      return this.success;
    }

    public namespace_get_listing_result setSuccess(List<NamespaceListing> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_get_listing_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NamespaceListing>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_get_listing_result)
        return this.equals((namespace_get_listing_result)that);
      return false;
    }

    public boolean equals(namespace_get_listing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_get_listing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_get_listing_result typedOther = (namespace_get_listing_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                this.success = new ArrayList<NamespaceListing>(_list214.size);
                for (int _i215 = 0; _i215 < _list214.size; ++_i215)
                {
                  NamespaceListing _elem216; // required
                  _elem216 = new NamespaceListing();
                  _elem216.read(iprot);
                  this.success.add(_elem216);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (NamespaceListing _iter217 : this.success)
          {
            _iter217.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_get_listing_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_listing_args implements org.apache.thrift.TBase<get_listing_args, get_listing_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_listing_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);

    public long ns; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_listing_args.class, metaDataMap);
    }

    public get_listing_args() {
    }

    public get_listing_args(
      long ns)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_listing_args(get_listing_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
    }

    public get_listing_args deepCopy() {
      return new get_listing_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
    }

    public long getNs() {
      return this.ns;
    }

    public get_listing_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_listing_args)
        return this.equals((get_listing_args)that);
      return false;
    }

    public boolean equals(get_listing_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_listing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_listing_args typedOther = (get_listing_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_listing_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_listing_result implements org.apache.thrift.TBase<get_listing_result, get_listing_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_listing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<NamespaceListing> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NamespaceListing.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_listing_result.class, metaDataMap);
    }

    public get_listing_result() {
    }

    public get_listing_result(
      List<NamespaceListing> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_listing_result(get_listing_result other) {
      if (other.isSetSuccess()) {
        List<NamespaceListing> __this__success = new ArrayList<NamespaceListing>();
        for (NamespaceListing other_element : other.success) {
          __this__success.add(new NamespaceListing(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_listing_result deepCopy() {
      return new get_listing_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NamespaceListing> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NamespaceListing elem) {
      if (this.success == null) {
        this.success = new ArrayList<NamespaceListing>();
      }
      this.success.add(elem);
    }

    public List<NamespaceListing> getSuccess() {
      return this.success;
    }

    public get_listing_result setSuccess(List<NamespaceListing> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_listing_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NamespaceListing>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_listing_result)
        return this.equals((get_listing_result)that);
      return false;
    }

    public boolean equals(get_listing_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_listing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_listing_result typedOther = (get_listing_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                this.success = new ArrayList<NamespaceListing>(_list218.size);
                for (int _i219 = 0; _i219 < _list218.size; ++_i219)
                {
                  NamespaceListing _elem220; // required
                  _elem220 = new NamespaceListing();
                  _elem220.read(iprot);
                  this.success.add(_elem220);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (NamespaceListing _iter221 : this.success)
          {
            _iter221.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_listing_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_splits_args implements org.apache.thrift.TBase<table_get_splits_args, table_get_splits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_splits_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_splits_args.class, metaDataMap);
    }

    public table_get_splits_args() {
    }

    public table_get_splits_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_splits_args(table_get_splits_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public table_get_splits_args deepCopy() {
      return new table_get_splits_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_get_splits_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public table_get_splits_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_splits_args)
        return this.equals((table_get_splits_args)that);
      return false;
    }

    public boolean equals(table_get_splits_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_splits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_splits_args typedOther = (table_get_splits_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_splits_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_get_splits_result implements org.apache.thrift.TBase<table_get_splits_result, table_get_splits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_get_splits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<TableSplit> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSplit.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_get_splits_result.class, metaDataMap);
    }

    public table_get_splits_result() {
    }

    public table_get_splits_result(
      List<TableSplit> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_get_splits_result(table_get_splits_result other) {
      if (other.isSetSuccess()) {
        List<TableSplit> __this__success = new ArrayList<TableSplit>();
        for (TableSplit other_element : other.success) {
          __this__success.add(new TableSplit(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_get_splits_result deepCopy() {
      return new table_get_splits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TableSplit> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TableSplit elem) {
      if (this.success == null) {
        this.success = new ArrayList<TableSplit>();
      }
      this.success.add(elem);
    }

    public List<TableSplit> getSuccess() {
      return this.success;
    }

    public table_get_splits_result setSuccess(List<TableSplit> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public table_get_splits_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TableSplit>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_get_splits_result)
        return this.equals((table_get_splits_result)that);
      return false;
    }

    public boolean equals(table_get_splits_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_get_splits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_get_splits_result typedOther = (table_get_splits_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list222 = iprot.readListBegin();
                this.success = new ArrayList<TableSplit>(_list222.size);
                for (int _i223 = 0; _i223 < _list222.size; ++_i223)
                {
                  TableSplit _elem224; // required
                  _elem224 = new TableSplit();
                  _elem224.read(iprot);
                  this.success.add(_elem224);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TableSplit _iter225 : this.success)
          {
            _iter225.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_get_splits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_table_splits_args implements org.apache.thrift.TBase<get_table_splits_args, get_table_splits_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_splits_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);

    public long ns; // required
    public String table_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_splits_args.class, metaDataMap);
    }

    public get_table_splits_args() {
    }

    public get_table_splits_args(
      long ns,
      String table_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_splits_args(get_table_splits_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
    }

    public get_table_splits_args deepCopy() {
      return new get_table_splits_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public get_table_splits_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public get_table_splits_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_splits_args)
        return this.equals((get_table_splits_args)that);
      return false;
    }

    public boolean equals(get_table_splits_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_table_splits_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_table_splits_args typedOther = (get_table_splits_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_splits_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class get_table_splits_result implements org.apache.thrift.TBase<get_table_splits_result, get_table_splits_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_table_splits_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public List<TableSplit> success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TableSplit.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_table_splits_result.class, metaDataMap);
    }

    public get_table_splits_result() {
    }

    public get_table_splits_result(
      List<TableSplit> success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_table_splits_result(get_table_splits_result other) {
      if (other.isSetSuccess()) {
        List<TableSplit> __this__success = new ArrayList<TableSplit>();
        for (TableSplit other_element : other.success) {
          __this__success.add(new TableSplit(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public get_table_splits_result deepCopy() {
      return new get_table_splits_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TableSplit> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TableSplit elem) {
      if (this.success == null) {
        this.success = new ArrayList<TableSplit>();
      }
      this.success.add(elem);
    }

    public List<TableSplit> getSuccess() {
      return this.success;
    }

    public get_table_splits_result setSuccess(List<TableSplit> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public get_table_splits_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TableSplit>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_table_splits_result)
        return this.equals((get_table_splits_result)that);
      return false;
    }

    public boolean equals(get_table_splits_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_table_splits_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_table_splits_result typedOther = (get_table_splits_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                this.success = new ArrayList<TableSplit>(_list226.size);
                for (int _i227 = 0; _i227 < _list226.size; ++_i227)
                {
                  TableSplit _elem228; // required
                  _elem228 = new TableSplit();
                  _elem228.read(iprot);
                  this.success.add(_elem228);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TableSplit _iter229 : this.success)
          {
            _iter229.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_table_splits_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_drop_args implements org.apache.thrift.TBase<namespace_drop_args, namespace_drop_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_drop_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)2);

    public String ns; // required
    public boolean if_exists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      IF_EXISTS((short)2, "if_exists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // IF_EXISTS
            return IF_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IF_EXISTS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_drop_args.class, metaDataMap);
    }

    public namespace_drop_args() {
      this.if_exists = true;

    }

    public namespace_drop_args(
      String ns,
      boolean if_exists)
    {
      this();
      this.ns = ns;
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_drop_args(namespace_drop_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
      this.if_exists = other.if_exists;
    }

    public namespace_drop_args deepCopy() {
      return new namespace_drop_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
      this.if_exists = true;

    }

    public String getNs() {
      return this.ns;
    }

    public namespace_drop_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public boolean isIf_exists() {
      return this.if_exists;
    }

    public namespace_drop_args setIf_exists(boolean if_exists) {
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
      return this;
    }

    public void unsetIf_exists() {
      __isset_bit_vector.clear(__IF_EXISTS_ISSET_ID);
    }

    /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetIf_exists() {
      return __isset_bit_vector.get(__IF_EXISTS_ISSET_ID);
    }

    public void setIf_existsIsSet(boolean value) {
      __isset_bit_vector.set(__IF_EXISTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      case IF_EXISTS:
        if (value == null) {
          unsetIf_exists();
        } else {
          setIf_exists((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      case IF_EXISTS:
        return Boolean.valueOf(isIf_exists());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case IF_EXISTS:
        return isSetIf_exists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_drop_args)
        return this.equals((namespace_drop_args)that);
      return false;
    }

    public boolean equals(namespace_drop_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      boolean this_present_if_exists = true;
      boolean that_present_if_exists = true;
      if (this_present_if_exists || that_present_if_exists) {
        if (!(this_present_if_exists && that_present_if_exists))
          return false;
        if (this.if_exists != that.if_exists)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_drop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_drop_args typedOther = (namespace_drop_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(typedOther.isSetIf_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIf_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, typedOther.if_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IF_EXISTS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.if_exists = iprot.readBool();
              setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(this.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_drop_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("if_exists:");
      sb.append(this.if_exists);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class namespace_drop_result implements org.apache.thrift.TBase<namespace_drop_result, namespace_drop_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("namespace_drop_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(namespace_drop_result.class, metaDataMap);
    }

    public namespace_drop_result() {
    }

    public namespace_drop_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public namespace_drop_result(namespace_drop_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public namespace_drop_result deepCopy() {
      return new namespace_drop_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public namespace_drop_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof namespace_drop_result)
        return this.equals((namespace_drop_result)that);
      return false;
    }

    public boolean equals(namespace_drop_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(namespace_drop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      namespace_drop_result typedOther = (namespace_drop_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("namespace_drop_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class drop_namespace_args implements org.apache.thrift.TBase<drop_namespace_args, drop_namespace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_namespace_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)2);

    public String ns; // required
    public boolean if_exists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      IF_EXISTS((short)2, "if_exists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // IF_EXISTS
            return IF_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IF_EXISTS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_namespace_args.class, metaDataMap);
    }

    public drop_namespace_args() {
      this.if_exists = true;

    }

    public drop_namespace_args(
      String ns,
      boolean if_exists)
    {
      this();
      this.ns = ns;
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_namespace_args(drop_namespace_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNs()) {
        this.ns = other.ns;
      }
      this.if_exists = other.if_exists;
    }

    public drop_namespace_args deepCopy() {
      return new drop_namespace_args(this);
    }

    @Override
    public void clear() {
      this.ns = null;
      this.if_exists = true;

    }

    public String getNs() {
      return this.ns;
    }

    public drop_namespace_args setNs(String ns) {
      this.ns = ns;
      return this;
    }

    public void unsetNs() {
      this.ns = null;
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return this.ns != null;
    }

    public void setNsIsSet(boolean value) {
      if (!value) {
        this.ns = null;
      }
    }

    public boolean isIf_exists() {
      return this.if_exists;
    }

    public drop_namespace_args setIf_exists(boolean if_exists) {
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
      return this;
    }

    public void unsetIf_exists() {
      __isset_bit_vector.clear(__IF_EXISTS_ISSET_ID);
    }

    /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetIf_exists() {
      return __isset_bit_vector.get(__IF_EXISTS_ISSET_ID);
    }

    public void setIf_existsIsSet(boolean value) {
      __isset_bit_vector.set(__IF_EXISTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((String)value);
        }
        break;

      case IF_EXISTS:
        if (value == null) {
          unsetIf_exists();
        } else {
          setIf_exists((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return getNs();

      case IF_EXISTS:
        return Boolean.valueOf(isIf_exists());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case IF_EXISTS:
        return isSetIf_exists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_namespace_args)
        return this.equals((drop_namespace_args)that);
      return false;
    }

    public boolean equals(drop_namespace_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true && this.isSetNs();
      boolean that_present_ns = true && that.isSetNs();
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (!this.ns.equals(that.ns))
          return false;
      }

      boolean this_present_if_exists = true;
      boolean that_present_if_exists = true;
      if (this_present_if_exists || that_present_if_exists) {
        if (!(this_present_if_exists && that_present_if_exists))
          return false;
        if (this.if_exists != that.if_exists)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(drop_namespace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      drop_namespace_args typedOther = (drop_namespace_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(typedOther.isSetIf_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIf_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, typedOther.if_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.ns = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IF_EXISTS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.if_exists = iprot.readBool();
              setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ns != null) {
        oprot.writeFieldBegin(NS_FIELD_DESC);
        oprot.writeString(this.ns);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(this.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_namespace_args(");
      boolean first = true;

      sb.append("ns:");
      if (this.ns == null) {
        sb.append("null");
      } else {
        sb.append(this.ns);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("if_exists:");
      sb.append(this.if_exists);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class drop_namespace_result implements org.apache.thrift.TBase<drop_namespace_result, drop_namespace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_namespace_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_namespace_result.class, metaDataMap);
    }

    public drop_namespace_result() {
    }

    public drop_namespace_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_namespace_result(drop_namespace_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public drop_namespace_result deepCopy() {
      return new drop_namespace_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public drop_namespace_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_namespace_result)
        return this.equals((drop_namespace_result)that);
      return false;
    }

    public boolean equals(drop_namespace_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(drop_namespace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      drop_namespace_result typedOther = (drop_namespace_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_namespace_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class rename_table_args implements org.apache.thrift.TBase<rename_table_args, rename_table_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rename_table_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("new_name", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String name; // required
    public String new_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      NEW_NAME((short)3, "new_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("new_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rename_table_args.class, metaDataMap);
    }

    public rename_table_args() {
    }

    public rename_table_args(
      long ns,
      String name,
      String new_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.new_name = new_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rename_table_args(rename_table_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetNew_name()) {
        this.new_name = other.new_name;
      }
    }

    public rename_table_args deepCopy() {
      return new rename_table_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.new_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public rename_table_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public rename_table_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getNew_name() {
      return this.new_name;
    }

    public rename_table_args setNew_name(String new_name) {
      this.new_name = new_name;
      return this;
    }

    public void unsetNew_name() {
      this.new_name = null;
    }

    /** Returns true if field new_name is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_name() {
      return this.new_name != null;
    }

    public void setNew_nameIsSet(boolean value) {
      if (!value) {
        this.new_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNew_name();
        } else {
          setNew_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case NEW_NAME:
        return getNew_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case NEW_NAME:
        return isSetNew_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rename_table_args)
        return this.equals((rename_table_args)that);
      return false;
    }

    public boolean equals(rename_table_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_new_name = true && this.isSetNew_name();
      boolean that_present_new_name = true && that.isSetNew_name();
      if (this_present_new_name || that_present_new_name) {
        if (!(this_present_new_name && that_present_new_name))
          return false;
        if (!this.new_name.equals(that.new_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rename_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rename_table_args typedOther = (rename_table_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_name, typedOther.new_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NEW_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.new_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.new_name != null) {
        oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
        oprot.writeString(this.new_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rename_table_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_name:");
      if (this.new_name == null) {
        sb.append("null");
      } else {
        sb.append(this.new_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class rename_table_result implements org.apache.thrift.TBase<rename_table_result, rename_table_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rename_table_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rename_table_result.class, metaDataMap);
    }

    public rename_table_result() {
    }

    public rename_table_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rename_table_result(rename_table_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public rename_table_result deepCopy() {
      return new rename_table_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public rename_table_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rename_table_result)
        return this.equals((rename_table_result)that);
      return false;
    }

    public boolean equals(rename_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rename_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rename_table_result typedOther = (rename_table_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rename_table_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_rename_args implements org.apache.thrift.TBase<table_rename_args, table_rename_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_rename_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("new_name", org.apache.thrift.protocol.TType.STRING, (short)3);

    public long ns; // required
    public String name; // required
    public String new_name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      NEW_NAME((short)3, "new_name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // NEW_NAME
            return NEW_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NEW_NAME, new org.apache.thrift.meta_data.FieldMetaData("new_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_rename_args.class, metaDataMap);
    }

    public table_rename_args() {
    }

    public table_rename_args(
      long ns,
      String name,
      String new_name)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.new_name = new_name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_rename_args(table_rename_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetNew_name()) {
        this.new_name = other.new_name;
      }
    }

    public table_rename_args deepCopy() {
      return new table_rename_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.new_name = null;
    }

    public long getNs() {
      return this.ns;
    }

    public table_rename_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public table_rename_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getNew_name() {
      return this.new_name;
    }

    public table_rename_args setNew_name(String new_name) {
      this.new_name = new_name;
      return this;
    }

    public void unsetNew_name() {
      this.new_name = null;
    }

    /** Returns true if field new_name is set (has been assigned a value) and false otherwise */
    public boolean isSetNew_name() {
      return this.new_name != null;
    }

    public void setNew_nameIsSet(boolean value) {
      if (!value) {
        this.new_name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case NEW_NAME:
        if (value == null) {
          unsetNew_name();
        } else {
          setNew_name((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case NEW_NAME:
        return getNew_name();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case NEW_NAME:
        return isSetNew_name();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_rename_args)
        return this.equals((table_rename_args)that);
      return false;
    }

    public boolean equals(table_rename_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_new_name = true && this.isSetNew_name();
      boolean that_present_new_name = true && that.isSetNew_name();
      if (this_present_new_name || that_present_new_name) {
        if (!(this_present_new_name && that_present_new_name))
          return false;
        if (!this.new_name.equals(that.new_name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_rename_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_rename_args typedOther = (table_rename_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNew_name()).compareTo(typedOther.isSetNew_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNew_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.new_name, typedOther.new_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NEW_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.new_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.new_name != null) {
        oprot.writeFieldBegin(NEW_NAME_FIELD_DESC);
        oprot.writeString(this.new_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_rename_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("new_name:");
      if (this.new_name == null) {
        sb.append("null");
      } else {
        sb.append(this.new_name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_rename_result implements org.apache.thrift.TBase<table_rename_result, table_rename_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_rename_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_rename_result.class, metaDataMap);
    }

    public table_rename_result() {
    }

    public table_rename_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_rename_result(table_rename_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_rename_result deepCopy() {
      return new table_rename_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public table_rename_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_rename_result)
        return this.equals((table_rename_result)that);
      return false;
    }

    public boolean equals(table_rename_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_rename_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_rename_result typedOther = (table_rename_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_rename_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class drop_table_args implements org.apache.thrift.TBase<drop_table_args, drop_table_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_table_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public long ns; // required
    public String name; // required
    public boolean if_exists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      IF_EXISTS((short)3, "if_exists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // IF_EXISTS
            return IF_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __IF_EXISTS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_table_args.class, metaDataMap);
    }

    public drop_table_args() {
      this.if_exists = true;

    }

    public drop_table_args(
      long ns,
      String name,
      boolean if_exists)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_args(drop_table_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.if_exists = other.if_exists;
    }

    public drop_table_args deepCopy() {
      return new drop_table_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.if_exists = true;

    }

    public long getNs() {
      return this.ns;
    }

    public drop_table_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public drop_table_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isIf_exists() {
      return this.if_exists;
    }

    public drop_table_args setIf_exists(boolean if_exists) {
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
      return this;
    }

    public void unsetIf_exists() {
      __isset_bit_vector.clear(__IF_EXISTS_ISSET_ID);
    }

    /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetIf_exists() {
      return __isset_bit_vector.get(__IF_EXISTS_ISSET_ID);
    }

    public void setIf_existsIsSet(boolean value) {
      __isset_bit_vector.set(__IF_EXISTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case IF_EXISTS:
        if (value == null) {
          unsetIf_exists();
        } else {
          setIf_exists((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case IF_EXISTS:
        return Boolean.valueOf(isIf_exists());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case IF_EXISTS:
        return isSetIf_exists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_args)
        return this.equals((drop_table_args)that);
      return false;
    }

    public boolean equals(drop_table_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_if_exists = true;
      boolean that_present_if_exists = true;
      if (this_present_if_exists || that_present_if_exists) {
        if (!(this_present_if_exists && that_present_if_exists))
          return false;
        if (this.if_exists != that.if_exists)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(drop_table_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      drop_table_args typedOther = (drop_table_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(typedOther.isSetIf_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIf_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, typedOther.if_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IF_EXISTS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.if_exists = iprot.readBool();
              setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(this.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("if_exists:");
      sb.append(this.if_exists);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class drop_table_result implements org.apache.thrift.TBase<drop_table_result, drop_table_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drop_table_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drop_table_result.class, metaDataMap);
    }

    public drop_table_result() {
    }

    public drop_table_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public drop_table_result(drop_table_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public drop_table_result deepCopy() {
      return new drop_table_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public drop_table_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drop_table_result)
        return this.equals((drop_table_result)that);
      return false;
    }

    public boolean equals(drop_table_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(drop_table_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      drop_table_result typedOther = (drop_table_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drop_table_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_drop_args implements org.apache.thrift.TBase<table_drop_args, table_drop_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_drop_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IF_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("if_exists", org.apache.thrift.protocol.TType.BOOL, (short)3);

    public long ns; // required
    public String name; // required
    public boolean if_exists; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      NAME((short)2, "name"),
      IF_EXISTS((short)3, "if_exists");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // NAME
            return NAME;
          case 3: // IF_EXISTS
            return IF_EXISTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private static final int __IF_EXISTS_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IF_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("if_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_drop_args.class, metaDataMap);
    }

    public table_drop_args() {
      this.if_exists = true;

    }

    public table_drop_args(
      long ns,
      String name,
      boolean if_exists)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.name = name;
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_drop_args(table_drop_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetName()) {
        this.name = other.name;
      }
      this.if_exists = other.if_exists;
    }

    public table_drop_args deepCopy() {
      return new table_drop_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.name = null;
      this.if_exists = true;

    }

    public long getNs() {
      return this.ns;
    }

    public table_drop_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getName() {
      return this.name;
    }

    public table_drop_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean isIf_exists() {
      return this.if_exists;
    }

    public table_drop_args setIf_exists(boolean if_exists) {
      this.if_exists = if_exists;
      setIf_existsIsSet(true);
      return this;
    }

    public void unsetIf_exists() {
      __isset_bit_vector.clear(__IF_EXISTS_ISSET_ID);
    }

    /** Returns true if field if_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetIf_exists() {
      return __isset_bit_vector.get(__IF_EXISTS_ISSET_ID);
    }

    public void setIf_existsIsSet(boolean value) {
      __isset_bit_vector.set(__IF_EXISTS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case IF_EXISTS:
        if (value == null) {
          unsetIf_exists();
        } else {
          setIf_exists((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case NAME:
        return getName();

      case IF_EXISTS:
        return Boolean.valueOf(isIf_exists());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case NAME:
        return isSetName();
      case IF_EXISTS:
        return isSetIf_exists();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_drop_args)
        return this.equals((table_drop_args)that);
      return false;
    }

    public boolean equals(table_drop_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_if_exists = true;
      boolean that_present_if_exists = true;
      if (this_present_if_exists || that_present_if_exists) {
        if (!(this_present_if_exists && that_present_if_exists))
          return false;
        if (this.if_exists != that.if_exists)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_drop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_drop_args typedOther = (table_drop_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIf_exists()).compareTo(typedOther.isSetIf_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIf_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.if_exists, typedOther.if_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IF_EXISTS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.if_exists = iprot.readBool();
              setIf_existsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IF_EXISTS_FIELD_DESC);
      oprot.writeBool(this.if_exists);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_drop_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("if_exists:");
      sb.append(this.if_exists);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class table_drop_result implements org.apache.thrift.TBase<table_drop_result, table_drop_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("table_drop_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(table_drop_result.class, metaDataMap);
    }

    public table_drop_result() {
    }

    public table_drop_result(
      ClientException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public table_drop_result(table_drop_result other) {
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public table_drop_result deepCopy() {
      return new table_drop_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public ClientException getE() {
      return this.e;
    }

    public table_drop_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof table_drop_result)
        return this.equals((table_drop_result)that);
      return false;
    }

    public boolean equals(table_drop_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(table_drop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      table_drop_result typedOther = (table_drop_result)other;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("table_drop_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generate_guid_args implements org.apache.thrift.TBase<generate_guid_args, generate_guid_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generate_guid_args");



    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generate_guid_args.class, metaDataMap);
    }

    public generate_guid_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generate_guid_args(generate_guid_args other) {
    }

    public generate_guid_args deepCopy() {
      return new generate_guid_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generate_guid_args)
        return this.equals((generate_guid_args)that);
      return false;
    }

    public boolean equals(generate_guid_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generate_guid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generate_guid_args typedOther = (generate_guid_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generate_guid_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class generate_guid_result implements org.apache.thrift.TBase<generate_guid_result, generate_guid_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("generate_guid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(generate_guid_result.class, metaDataMap);
    }

    public generate_guid_result() {
    }

    public generate_guid_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generate_guid_result(generate_guid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public generate_guid_result deepCopy() {
      return new generate_guid_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public generate_guid_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generate_guid_result)
        return this.equals((generate_guid_result)that);
      return false;
    }

    public boolean equals(generate_guid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(generate_guid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      generate_guid_result typedOther = (generate_guid_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("generate_guid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_cell_unique_args implements org.apache.thrift.TBase<create_cell_unique_args, create_cell_unique_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_cell_unique_args");

    private static final org.apache.thrift.protocol.TField NS_FIELD_DESC = new org.apache.thrift.protocol.TField("ns", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)4);

    public long ns; // required
    public String table_name; // required
    public Key key; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NS((short)1, "ns"),
      TABLE_NAME((short)2, "table_name"),
      KEY((short)3, "key"),
      VALUE((short)4, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NS
            return NS;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // KEY
            return KEY;
          case 4: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NS, new org.apache.thrift.meta_data.FieldMetaData("ns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Namespace")));
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Key.class)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_cell_unique_args.class, metaDataMap);
    }

    public create_cell_unique_args() {
    }

    public create_cell_unique_args(
      long ns,
      String table_name,
      Key key,
      String value)
    {
      this();
      this.ns = ns;
      setNsIsSet(true);
      this.table_name = table_name;
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_cell_unique_args(create_cell_unique_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.ns = other.ns;
      if (other.isSetTable_name()) {
        this.table_name = other.table_name;
      }
      if (other.isSetKey()) {
        this.key = new Key(other.key);
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public create_cell_unique_args deepCopy() {
      return new create_cell_unique_args(this);
    }

    @Override
    public void clear() {
      setNsIsSet(false);
      this.ns = 0;
      this.table_name = null;
      this.key = null;
      this.value = null;
    }

    public long getNs() {
      return this.ns;
    }

    public create_cell_unique_args setNs(long ns) {
      this.ns = ns;
      setNsIsSet(true);
      return this;
    }

    public void unsetNs() {
      __isset_bit_vector.clear(__NS_ISSET_ID);
    }

    /** Returns true if field ns is set (has been assigned a value) and false otherwise */
    public boolean isSetNs() {
      return __isset_bit_vector.get(__NS_ISSET_ID);
    }

    public void setNsIsSet(boolean value) {
      __isset_bit_vector.set(__NS_ISSET_ID, value);
    }

    public String getTable_name() {
      return this.table_name;
    }

    public create_cell_unique_args setTable_name(String table_name) {
      this.table_name = table_name;
      return this;
    }

    public void unsetTable_name() {
      this.table_name = null;
    }

    /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
    public boolean isSetTable_name() {
      return this.table_name != null;
    }

    public void setTable_nameIsSet(boolean value) {
      if (!value) {
        this.table_name = null;
      }
    }

    public Key getKey() {
      return this.key;
    }

    public create_cell_unique_args setKey(Key key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public create_cell_unique_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NS:
        if (value == null) {
          unsetNs();
        } else {
          setNs((Long)value);
        }
        break;

      case TABLE_NAME:
        if (value == null) {
          unsetTable_name();
        } else {
          setTable_name((String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((Key)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NS:
        return Long.valueOf(getNs());

      case TABLE_NAME:
        return getTable_name();

      case KEY:
        return getKey();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NS:
        return isSetNs();
      case TABLE_NAME:
        return isSetTable_name();
      case KEY:
        return isSetKey();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_cell_unique_args)
        return this.equals((create_cell_unique_args)that);
      return false;
    }

    public boolean equals(create_cell_unique_args that) {
      if (that == null)
        return false;

      boolean this_present_ns = true;
      boolean that_present_ns = true;
      if (this_present_ns || that_present_ns) {
        if (!(this_present_ns && that_present_ns))
          return false;
        if (this.ns != that.ns)
          return false;
      }

      boolean this_present_table_name = true && this.isSetTable_name();
      boolean that_present_table_name = true && that.isSetTable_name();
      if (this_present_table_name || that_present_table_name) {
        if (!(this_present_table_name && that_present_table_name))
          return false;
        if (!this.table_name.equals(that.table_name))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_cell_unique_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_cell_unique_args typedOther = (create_cell_unique_args)other;

      lastComparison = Boolean.valueOf(isSetNs()).compareTo(typedOther.isSetNs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ns, typedOther.ns);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable_name()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, typedOther.table_name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // NS
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.ns = iprot.readI64();
              setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TABLE_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.table_name = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.key = new Key();
              this.key.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.value = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NS_FIELD_DESC);
      oprot.writeI64(this.ns);
      oprot.writeFieldEnd();
      if (this.table_name != null) {
        oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
        oprot.writeString(this.table_name);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        this.key.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_cell_unique_args(");
      boolean first = true;

      sb.append("ns:");
      sb.append(this.ns);
      first = false;
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class create_cell_unique_result implements org.apache.thrift.TBase<create_cell_unique_result, create_cell_unique_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_cell_unique_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    public String success; // required
    public ClientException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_cell_unique_result.class, metaDataMap);
    }

    public create_cell_unique_result() {
    }

    public create_cell_unique_result(
      String success,
      ClientException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_cell_unique_result(create_cell_unique_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ClientException(other.e);
      }
    }

    public create_cell_unique_result deepCopy() {
      return new create_cell_unique_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public create_cell_unique_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ClientException getE() {
      return this.e;
    }

    public create_cell_unique_result setE(ClientException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ClientException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_cell_unique_result)
        return this.equals((create_cell_unique_result)that);
      return false;
    }

    public boolean equals(create_cell_unique_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(create_cell_unique_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      create_cell_unique_result typedOther = (create_cell_unique_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(typedOther.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, typedOther.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.e = new ClientException();
              this.e.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_cell_unique_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class error_get_text_args implements org.apache.thrift.TBase<error_get_text_args, error_get_text_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("error_get_text_args");

    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("error_code", org.apache.thrift.protocol.TType.I32, (short)1);

    public int error_code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERROR_CODE((short)1, "error_code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERROR_CODE
            return ERROR_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ERROR_CODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("error_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(error_get_text_args.class, metaDataMap);
    }

    public error_get_text_args() {
    }

    public error_get_text_args(
      int error_code)
    {
      this();
      this.error_code = error_code;
      setError_codeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public error_get_text_args(error_get_text_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.error_code = other.error_code;
    }

    public error_get_text_args deepCopy() {
      return new error_get_text_args(this);
    }

    @Override
    public void clear() {
      setError_codeIsSet(false);
      this.error_code = 0;
    }

    public int getError_code() {
      return this.error_code;
    }

    public error_get_text_args setError_code(int error_code) {
      this.error_code = error_code;
      setError_codeIsSet(true);
      return this;
    }

    public void unsetError_code() {
      __isset_bit_vector.clear(__ERROR_CODE_ISSET_ID);
    }

    /** Returns true if field error_code is set (has been assigned a value) and false otherwise */
    public boolean isSetError_code() {
      return __isset_bit_vector.get(__ERROR_CODE_ISSET_ID);
    }

    public void setError_codeIsSet(boolean value) {
      __isset_bit_vector.set(__ERROR_CODE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERROR_CODE:
        if (value == null) {
          unsetError_code();
        } else {
          setError_code((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERROR_CODE:
        return Integer.valueOf(getError_code());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERROR_CODE:
        return isSetError_code();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof error_get_text_args)
        return this.equals((error_get_text_args)that);
      return false;
    }

    public boolean equals(error_get_text_args that) {
      if (that == null)
        return false;

      boolean this_present_error_code = true;
      boolean that_present_error_code = true;
      if (this_present_error_code || that_present_error_code) {
        if (!(this_present_error_code && that_present_error_code))
          return false;
        if (this.error_code != that.error_code)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(error_get_text_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      error_get_text_args typedOther = (error_get_text_args)other;

      lastComparison = Boolean.valueOf(isSetError_code()).compareTo(typedOther.isSetError_code());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetError_code()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_code, typedOther.error_code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ERROR_CODE
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.error_code = iprot.readI32();
              setError_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.error_code);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("error_get_text_args(");
      boolean first = true;

      sb.append("error_code:");
      sb.append(this.error_code);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

  public static class error_get_text_result implements org.apache.thrift.TBase<error_get_text_result, error_get_text_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("error_get_text_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(error_get_text_result.class, metaDataMap);
    }

    public error_get_text_result() {
    }

    public error_get_text_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public error_get_text_result(error_get_text_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public error_get_text_result deepCopy() {
      return new error_get_text_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public error_get_text_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof error_get_text_result)
        return this.equals((error_get_text_result)that);
      return false;
    }

    public boolean equals(error_get_text_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(error_get_text_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      error_get_text_result typedOther = (error_get_text_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("error_get_text_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

  }

}
